{"meta":{"title":"歪马行空","subtitle":"做一只默默奋斗的程序猿~！","description":null,"author":"verymuch","url":"http://verymuch.com"},"pages":[{"title":"Categories","date":"2017-10-19T15:02:41.000Z","updated":"2017-01-07T13:10:54.000Z","comments":true,"path":"categories/index.html","permalink":"http://verymuch.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-10T02:46:30.313Z","updated":"2018-02-10T02:46:30.000Z","comments":true,"path":"css/custom-toc.css","permalink":"http://verymuch.com/css/custom-toc.css","excerpt":"","text":".article { position: relative; } .custom-toc-container { position: absolute; top: 5px; right: 5px; width: 36px; height: 36px; border-radius: 50%; background: #f6f8f9; z-index: 2; cursor: pointer; border: 15px solid white; } .custom-toc-container:hover { background: #edf4ef; } /* .custom-toc-container:before { position: absolute; display: block; width: 10px; height: 10px; background: white; content: \"\"; top: 20px; left: -12px; z-index: 3; transform: translate(0, -50%) rotate(45deg); box-shadow: 0.5px -0.5px 1px 0 rgba(0, 0, 0, 0.12), 0.5px -0.5px 1.5px 0 rgba(0, 0, 0, 0.04); } */ .custom-toc-container img { width: 18px; height: 18px; line-height: 36px; display: block; margin: 10px auto; } .custom-toc-container:hover .custom-toc { display: block; } .custom-toc { display: none; position: absolute; max-height: 400px; overflow-y: scroll; top: 0; right: 40px; background: white; padding: 15px 20px 15px 15px; border-radius: 3px; line-height: 2; box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); border: 1px solid #eee; } .custom-toc li { cursor: pointer; min-width: 160px; max-width: 600px; white-space: nowrap; } .custom-toc .custom-toc--h3 { padding: 0 0 0 20px; } .custom-toc li a { transition: all 0.3s ease; color: #333; } .custom-toc li:hover a { color: #38b7ea; } .custom-toc--h2 { font-size: 13px; } .custom-toc--h3 { font-size: 12px; }"},{"title":"About","date":"2017-10-19T15:02:41.000Z","updated":"2017-01-07T13:10:54.000Z","comments":true,"path":"about/index.html","permalink":"http://verymuch.com/about/index.html","excerpt":"","text":""},{"title":"","date":"2018-10-09T08:37:07.740Z","updated":"2018-10-09T08:37:07.740Z","comments":true,"path":"css/custom.css","permalink":"http://verymuch.com/css/custom.css","excerpt":"","text":"@import './custom-toc.css'; #container { font-size: 16px; } .text-highlight { color: red; } .text-hint { color: #999; } button { padding: 5px 10px; background: #38b7ea; color: #fff; border: none; border-radius: 2px; cursor: pointer; } /* 示例区域 */ .demo-area { border: 1px solid #f8f8f8; padding: 10px; } .demo-area textarea { display: block; margin-top: 5px; width: 100%; height: 120px; } .demo-area canvas { width: 200px; height: 100px; } /* 重置样式 */ .article-entry td { /* padding: 0; */ } .article-entry--center th, .article-entry--center td { text-align: center; }"},{"title":"Tags","date":"2017-10-19T15:02:41.000Z","updated":"2017-01-07T13:10:54.000Z","comments":true,"path":"tags/index.html","permalink":"http://verymuch.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-02-10T02:50:50.189Z","updated":"2018-02-10T02:50:50.000Z","comments":true,"path":"js/generate-toc.js","permalink":"http://verymuch.com/js/generate-toc.js","excerpt":"","text":"$(window).ready(() => { // 生成目录容器 const $article = $(\".article\"); const $tocContainer = $(\"\").addClass(\"custom-toc-container\"); const $img = $(\"\").attr({ src: \"https://p0.ssl.qhimg.com/t01b4b55a270cdc08a6.png\" }); $img.appendTo($tocContainer); $tocContainer.appendTo($article); // 根据文章内容，为二级标题生成目录 const headers = $(\"h2,h3\", $article); const headersArr = [...headers]; const $toc = $(\"\").addClass(\"custom-toc\"); headersArr.forEach(header => { const headerText = $(header).text(); const hash = $(\"span\", header).attr(\"id\"); const className = header.tagName === \"H2\" ? \"custom-toc--h2\" : \"custom-toc--h3\"; const $newLink = $(\"\") .attr(\"href\", `#${hash}`) .html($(header).text()); const $newLi = $(\"\").addClass(className); $newLink.appendTo($newLi); $newLi.appendTo($toc); }); $toc.appendTo($tocContainer); });"}],"posts":[{"title":"base64原理浅析","slug":"base64原理浅析","date":"2019-06-17T02:35:57.000Z","updated":"2019-06-19T03:33:13.777Z","comments":true,"path":"2019/06/17/base64原理浅析/","link":"","permalink":"http://verymuch.com/2019/06/17/base64原理浅析/","excerpt":"前言上一次，我写了一篇《Data URL的简介与使用》，该文章主要介绍了什么是Data URL，其优缺点及可以如何使用。其中有一个隐含在文中的重要概念，那就是Data URL是Base64编码的，且Base64编码的数据体积通常是原数据的体积4/3。 不知道大家会不会有这样的疑问： 为什么图片转成Base64编码，就可以直接内联到HTML中显示呢？ 为什么Base64编码后，体积会增大1/3呢？ 如果你对此也有疑问的话，就往下一看究竟吧。","text":"前言上一次，我写了一篇《Data URL的简介与使用》，该文章主要介绍了什么是Data URL，其优缺点及可以如何使用。其中有一个隐含在文中的重要概念，那就是Data URL是Base64编码的，且Base64编码的数据体积通常是原数据的体积4/3。 不知道大家会不会有这样的疑问： 为什么图片转成Base64编码，就可以直接内联到HTML中显示呢？ 为什么Base64编码后，体积会增大1/3呢？ 如果你对此也有疑问的话，就往下一看究竟吧。 为什么Base64编码可以内联到HTML中？我们知道HTTP协议是文本协议，不同于常规的二进制协议那样直接进行二进制传输。Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。 什么是Base64编码首先Base64是一种编码算法，为什么叫做Base64呢？其实原因也很简单，是因为该算法共包含64个字符。包括大小写拉丁字母各26个、数字10个、加号+和斜杠/，共64个字符。此外还有等号=用来作为后缀用途。 字符与索引的对应关系如下图所示。 但，为什么Base64编码算法只支持64个字符呢？ 首先，我们先回顾下ASCII码。ASCII码的范围是0-127，其中0-31和127是控制字符，共33个。其余95个，即32-126是可打印字符，包括数字、大小写字母、常用符号等。如下图所示，图片来源（https://zh.wikipedia.org/wiki/ASCII）。 早期的一些传输协议，例如邮件传输协议SMTP，只能传输可打印的ASCII字符。这样原本的8bit字节码（0-255）就会超出使用范围，从而到这无法传输。 这时，就产生了Base64编码，它利用6bit字符来表达原本的8bit字符。 Base64编码原理上面我们知道了什么是Base64编码，知道了其包含的64个字符。它主要是通过6bit字符来表达原本的8bit字符。接下来我们一起学习下这一过程是如何进行的。 首先，6bit显然不够容纳8bit的数据。6和8的最小公倍数是24，所以我们用4个Base64字符刚好能够表示三个传统的8bit字符。如下所示，字符串Man的编码图解如下： Man的编码结果为TWFu，显然，Base64编码会多1/3的长度，这也解释了文中开头的疑问，为什么Base64编码后的体积会大1/3。 Man这个字符串的长度刚好是3，我们能用4个Base64来表示。如果待编码的字符串长度不是三的倍数时应该怎么处理呢？ 这是需要做一个特殊处理，假设带编码字符串长度为10。这前9个字符可以用12个Base64字符表示。第10个字符的前6bit作为一个Base64字符，剩下的2bit后面需要先补0，补到6位（此处补4个0）作为第二个Base64字符，至于第三个和第四个Base64字符，虽然没有相对应的内容，我们仍需以=填充。 如下图所示，A对应的Base64编码为QQ==，BC对应的Base64编码为QkM=。 最后的问题就是解码啦，解码的过程比较简单。去掉末尾的等号=。剩下的Base64字符，每8bit组成一个8bit字节，最后剩余不足8位的丢弃即可。 总结本文篇幅较短，旨在简单介绍Base64编码原理。相信看完之后，大家一定能够理解为什么Base64编码后体积会增大1/3，而不再是死记硬背这一特点。至少有这个收获就够啦。","categories":[],"tags":[]},{"title":"CSS自定义属性及其用法","slug":"CSS自定义属性及其用法","date":"2019-04-15T08:32:06.000Z","updated":"2019-04-15T09:54:37.894Z","comments":true,"path":"2019/04/15/CSS自定义属性及其用法/","link":"","permalink":"http://verymuch.com/2019/04/15/CSS自定义属性及其用法/","excerpt":"大家可能不一定都用过CSS自定义属性（ CSS Custom Properties ），但是一定都用过预处理器中的变量。这也是CSS自定义属性有时候被称作CSS变量的原因。 但由于预处理器中变量的使用位置可以不局限在属性值，但是自定义属性只能作为属性值使用，所以其准确名称是CSS自定义属性，而不是CSS变量。 下面我们先从预处理器说起。","text":"大家可能不一定都用过CSS自定义属性（ CSS Custom Properties ），但是一定都用过预处理器中的变量。这也是CSS自定义属性有时候被称作CSS变量的原因。 但由于预处理器中变量的使用位置可以不局限在属性值，但是自定义属性只能作为属性值使用，所以其准确名称是CSS自定义属性，而不是CSS变量。 下面我们先从预处理器说起。 一、预处理器中的变量如果大家用过预处理器的话，一定会有这样的感触。设计师给的某个颜色值，只需要给其定义一个语义化的变量名，就可以在页面的任何（适当的）地方使用了，而不用记住或者复制粘贴这一色值。这样做的好处也是很明显，那就是当这一色值在多处使用需要修改时，直接修改变量的值即可。这就是预处理器中的变量的优势所在：减少复制粘贴，易于修改。 不过撇开优点不谈，预处理器的变量也有一些缺点和限制，如下： 不能动态修改变量：预处理器是在编译时进行变量的处理，编译后变量其实就不存在了。 没有DOM结构，无法级联继承。 不能用JavaScript进行读写。 看到这里大家都一定会想，既然预处理器变量有这些缺点，那是不是CSS的自定义属性就能做到这些呢？想知道的话，和我一起往下进行吧。 二、如何定义自定义属性2.1 自定义属性名CSS自定义属性的语法格式为--*，双横线加上具体的自定义属性名，属性名是一个合法的CSS标识符即可。 自定义属性没有具体的CSS含义，其用途完全由作者和使用者决定。自定义属性可以应用于任何元素，其可以被继承，并且支持级联，不支持动画。 注意：与CSS属性不同，自定义属性是大小写敏感的。 CSS不会被all属性重置，将来可能会定义一个重置所有变量的属性。 2.2 自定义属性值自定义属性值的要求可以说是非常地宽松，可以是任何有效的CSS值，如颜色、字符、布局的值、甚至是表达式。 既然自定义属性值的要求如此宽松，那我们只需要知道有哪些情况不允许即可。 只要自定义属性值不存在以下几种情况即为合法：无效字符值、无效url值、未配对的)/]/}、不能在最外层出现;、不能出现!。 有个例外，自定义属性后面可以跟!important，但是这个!important其实并没有卵用，因为在进行属性值检测前就会将其移除。 下面我们来看个自定义属性的例子，大家觉得下面这个是一个合法的自定义属性吗？ 1--foo: if(x &gt; 5) this.width = 10; 答案是这是一个合法的自定义属性，但显然它并没有任何用处，因为将其用于其他任何常规属性是都是无效的。 2.3 如何使用变量通过var()函数，自定义属性的值可以用作另一个属性的值。var()的语法格式如下： 1var() = var( &lt;custom-property-name&gt; [, &lt;declaration-value&gt; ]? ) 其中第一个参数为自定义属性名，第二个参数为后备值。当传入的自定义属性无效或者不存在时，会使用后备值。 var()可以用在属性值中的任何部分，但是不能用在属性名、选择器以及其他除属性值以外的地方。 注意，后备值允许逗号，如var(--foo, red, blud)会定义一个red, blue的后备值，也就是说第一个逗号之后的都会被当做默认值。 好了，我们已经知道了var()的基础用法，那么var()是如何替换成具体值的呢？ 如果自定义属性的值为初始值以外的任何值，则直接将var()替换为对应的值。 否则，如果var()函数有后备值，则替换成后备值，如果后备值中也有var()则同样进行替换。 否则在计算值过程中，var()就是无效的。 2.4 注意事项1. 自定义属性与动画上面有提到自定义属性不能用于动画。其实自定义属性可以出现在@keyframs中，但其行为较为特殊，会导致动画瑕疵，因为其只会在指定帧影响使用了自定义属性的可动画属性。如下所示： 1234567891011121314151617181920&lt;style&gt; :root &#123; --custom-color: #0f0; --custom-width: 200px; &#125; .box &#123; color: var(--custom-color); width: var(--custom-width); border: 1px solid grey; animation: linear 3s scale-width; &#125; @keyframes scale-width &#123; 50% &#123; --custom-width: 400px; &#125; &#125;&lt;/style&gt;&lt;div class=\"box\"&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Animi rerum labore numquam quo magni, modi quas dolores maiores alias! Consequatur optio error fugit velit, et veritatis quidem unde fuga nostrum?&lt;/div&gt; 可以看出，类.box元素div的宽度只发生了两次改变，这说明自定义属性无法进行动画，但是会在固定帧时生效，从而影响相关的属性。 2. 自定义属性大小写敏感如下例所示，两个div内的字体颜色不一样，可以看出CSS自定义属性大小写敏感性。 123456789101112131415&lt;style&gt; :root &#123; --custom-color: red; --CUSTOM-COLOR: green; &#125; .box--1 &#123; color: var(--custom-color); &#125; .box--2 &#123; color: var(--CUSTOM-COLOR); &#125;&lt;/style&gt;&lt;div class=\"box--1\"&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Animi rerum labore numquam quo magni, modi quas dolores maiores alias! Consequatur optio error fugit velit, et veritatis quidem unde fuga nostrum?&lt;/div&gt;&lt;div class=\"box--2\"&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Animi rerum labore numquam quo magni, modi quas dolores maiores alias! Consequatur optio error fugit velit, et veritatis quidem unde fuga nostrum?&lt;/div&gt; 3. 自定义属性不能作为一个独立属性值的一部分自定义属性不能作为一个独立属性值的一部分， 如下所示： 1234.foo &#123; --gap: 20; margin-top: var(--gap)px;&#125; 最终的并不是想象中的margin-top: 20px，而是margin-top: 20 px，而这是一个无效的值。这时我们可以用calc()函数来实现，如下： 1234.foo &#123; --gap: 20; margin-top: calc(var(--gap) * 1px);&#125; 4. 循环依赖既然能通过var()使用变量，不知道大家是不是和我一样会有这样的疑问，如果使用变量的时候产生了闭环咋办呢？ 其实大家可以放心，CSS规范在定义自定义属性的时候已经考虑到了这一点。规范中将其称为依赖循环，如果自定义属性引用自己，或者两个以上的属性互相引用则会导致依赖循环。如下所示 12345678:root &#123; /* 自定义属性引用自己 */ --self: calc(var(--self) + 10px); /* 两个自定义属性互相引用 */ --one: calc(var(--two) + 20px); --two: calc(var(--one) - 20px);&#125; 其实对于依赖循环的处理也没有想象中的复杂，如果在计算属性的时候，发现了依赖依赖循环，则依赖循环中的所有自定义属性值都使用初始值代替。 需要注意的是，自定义属性是在计算值时解析其中的var()函数的，这一步是在值继承之前。所以只有同一元素上的多个自定义属性相互引用时才会导致依赖循环；元素树中父级元素上的自定义属性不会导致子孙元素自定义属性的循环依赖。 如下所示，two中的—-bar在被three继承前值已经为calc(10px + 10px)，所以最终three中--foo的值为30px，并不会导致循环依赖。 12345&lt;one&gt;&lt;two&gt;&lt;three /&gt;&lt;/two&gt;&lt;/one&gt;one &#123; --foo: 10px; &#125;two &#123; --bar: calc(var(--foo) + 10px); &#125;three &#123; --foo: calc(var(--bar) + 10px); &#125; 三、自定义属性的优势前面提到了预处理器中，自定义属性有三个局限或缺点。那么CSS引入的自定义属性是否具备了相应的特性呢。是的，CSS自定义属性是具备的。 可以动态修改自定义属性 有DOM结构的概念，可以级联继承。 可以用JavaScript进行读写。 3.1 动态修改自定义属性我们先看下下例中SCSS代码和CSS自定义属性的对比： 1234567891011121314151617181920212223// SCSS$custom-size: 16px;@media (min-width: 1000px) &#123; $custom-size: 28px;&#125;body &#123; font-size: $custom-size;&#125;// CSS自定义属性:root &#123; --custom-size: 16px;&#125;@media (min-width: 1000px) &#123; :root &#123; --custom-size: 28px; &#125;&#125;body &#123; font-size: var(--custom-size)；&#125; 如果你实际试一下的话，你会发现使用SCSS预编译器时，在视口宽度变化时，并不能改变字体大小。而使用自定义属性时，当窗口宽度大于1000px时，字体会相应变大。 3.2 有DOM结构的概念，可以级联继承CSS自定义属性时存在DOM结构的概念，并且可以继承。如下例所示： 123456789101112:root &#123; --custom-color: red;&#125;div &#123; --custom-color: green;&#125;p &#123; color: var(--custom-color)&#125;&lt;div&gt;&lt;p&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Animi rerum labore numquam quo magni, modi quas dolores maiores alias! Consequatur optio error fugit velit, et veritatis quidem unde fuga nostrum?&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Animi rerum labore numquam quo magni, modi quas dolores maiores alias! Consequatur optio error fugit velit, et veritatis quidem unde fuga nostrum?&lt;/p&gt; 其中第一个div内的p标签内的颜色为绿色，因为自定义属性继承了div中的值，而第二个p标签中文字颜色即为红色，因为它的值来自全局的:root中的自定义属性。 3.2 使用JavaScript进行读写我们可以通过window.getComputedStyle(element)的方法getPropertyValue获取属性值，通过el.style.setProperty来设置属性值。 如下所示，我们可以先获取当前元素的字体大小，然后再对其进行修改： 12345678:root &#123; --custom-font-size: 12px;&#125;p &#123; font-size: var(--custom-font-size);&#125;&lt;p id=\"p1\"&gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Culpa, pariatur maiores esse perspiciatis quam itaque modi impedit soluta, reiciendis voluptatem non obcaecati dolorum eveniet ad reprehenderit hic eligendi maxime repudiandae.&lt;/p&gt; 123456789const el = document.getElementById('p1')setTimeout(() =&gt; &#123; const currSize = window.getComputedStyle(el).getPropertyValue('--custom-font-size') // 计算新的大小 const newSize = ( currSize.split('px')[0] * 2) + 'px' el.style.setProperty('--custom-font-size', newSize)&#125;, 3000) 执行如上代码，会发现，三秒后，字体的的大小会增大一倍，这就是通过JavaScript对自定义属性操作的结果。 四、兼容性 如图所示，目前主流的浏览器对于自定义属性都已经有了很好的兼容性。所以如果你的产品只用兼容现代浏览器，而且可以通过类似postcss-css-variables的插件来实现兼容，那么你就完全可以用起来了。或者也可以通过优雅降级的方式分别加载带有CSS自定义属性和不带有CSS自定义属性的代码。 总结本文介绍了CSS自定义属性的用法及其所具备的几个优势，但限于篇幅有限，本文没有介绍CSS自定属性的使用场景。其实CSS自定义属非常适合用来实现主题的切换，感兴趣的可以自己参考一下。 参考链接 https://www.w3.org/TR/2015/CR-css-variables-1-20151203/ https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/ https://www.smashingmagazine.com/2018/05/css-custom-properties-strategy-guide/ https://www.w3cplus.com/css3/start-using-css-custom-properties.html","categories":[],"tags":[]},{"title":"细数CSS伪元素及其用法","slug":"细数最新的CSS微元素及其用法","date":"2019-03-20T03:29:11.000Z","updated":"2019-03-20T11:09:11.727Z","comments":true,"path":"2019/03/20/细数最新的CSS微元素及其用法/","link":"","permalink":"http://verymuch.com/2019/03/20/细数最新的CSS微元素及其用法/","excerpt":"引言CSS中有两个很常见的概念，伪类和伪元素。 伪类用于在页面中的元素处于某个状态时，为其添加指定的样式。 伪元素会创建一个抽象的伪元素，这个元素不是DOM中的真实元素，但是会存在于最终的渲染树中，我们可以为其添加样式。 最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。 此外，伪类是使用单冒号:，伪元素使用是双冒号::。 伪元素可以分为排版伪元素、突出显示伪元素、树中伪元素三类。下面我们一起看看具体都有哪些吧。 本文主要介绍CSS Pseudo-Elements Module Level 4涉及的伪元素，因为该标准仍处于草案阶段，所以会存在变动的可能。本文旨在带大家了解有哪些现在以及将来可用的伪类。有兴趣的可以持续跟进。","text":"引言CSS中有两个很常见的概念，伪类和伪元素。 伪类用于在页面中的元素处于某个状态时，为其添加指定的样式。 伪元素会创建一个抽象的伪元素，这个元素不是DOM中的真实元素，但是会存在于最终的渲染树中，我们可以为其添加样式。 最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通过添加类来实现，但是想要实现伪元素的等价效果只能创建实际的DOM节点。 此外，伪类是使用单冒号:，伪元素使用是双冒号::。 伪元素可以分为排版伪元素、突出显示伪元素、树中伪元素三类。下面我们一起看看具体都有哪些吧。 本文主要介绍CSS Pseudo-Elements Module Level 4涉及的伪元素，因为该标准仍处于草案阶段，所以会存在变动的可能。本文旨在带大家了解有哪些现在以及将来可用的伪类。有兴趣的可以持续跟进。 第一类：排版伪元素1. ::first-line伪元素这个伪元素大家应该很熟悉，因为早在CSS2.1中就存在了。它表示所属源元素的第一格式化行。可以定义这一行的样式。 如下面的CSS和HTML代码，其对应的效果如图所示。 123p::first-line &#123; text-transform: uppercase;&#125; 1&lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Necessitatibus quisquam ipsum sunt doloribus accusamus quae atque quaerat quam deleniti beatae, ipsam nobis dignissimos fugiat reiciendis error deserunt. Odio, eligendi placeat.&lt;/p&gt; 第一格式化行被截断的位置与元素的宽度、字体大小等很多因素有关，本文的截图均只为了展示效果而截取的。 虽然在DOM中看不到，但实际上，上面的这段HTML代码会通过添加虚拟标签的方式进行修改。如下： 1&lt;p&gt;&lt;p::first-line&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit.&lt;/p::first-line&gt; Necessitatibus quisquam ipsum sunt doloribus accusamus quae atque quaerat quam deleniti beatae, ipsam nobis dignissimos fugiat reiciendis error deserunt. Odio, eligendi placeat.&lt;/p&gt; 如果::first-line伪元素的应用会截断真实的元素，这个时候会在截断的位置前先闭合标签，在截断位置之后再重新添加开标签。对比如下两段代码： 12345&lt;!-- 无伪元素 --&gt;&lt;p&gt;&lt;span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Necessitatibus quisquam ipsum sunt doloribus accusamus quae atque quaerat quam deleniti beatae, ipsam nobis dignissimos fugiat reiciendis error deserunt.&lt;/span&gt; Odio, eligendi placeat.&lt;/p&gt;&lt;!-- 有伪元素 --&gt;&lt;p&gt;&lt;p::first-line&gt;&lt;span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit.&lt;/span&gt;&lt;/p::first-line&gt;&lt;span&gt; Necessitatibus quisquam ipsum sunt doloribus accusamus quae atque quaerat quam deleniti beatae, ipsam nobis dignissimos fugiat reiciendis error deserunt.&lt;/span&gt; Odio, eligendi placeat.&lt;/p&gt; 1.1 如何确定第一格式化行需要注意的是，::first-line伪元素只有应用在块级容器上才有效，且必须出现在相同流中的块级子孙元素中（即没有定位和浮动）。 如下所示，DIV的首行就是P元素的首行 12345678&lt;div&gt; &lt;p&gt;Lorem ipsum&lt;/p&gt; dolor sit amet consectetur adipisicing elit. Omnis asperiores voluptatem sit ipsa ex fugit provident tenetur eum pariatur impedit cumque corrupti iste expedita, esse nulla ad et excepturi. Iste!&lt;/div&gt;&lt;!-- 等价抽象代码 --&gt;&lt;div&gt; &lt;p&gt;&lt;div::first-line&gt;Lorem ipsum&lt;/div::first-line&gt;&lt;/p&gt; dolor sit amet consectetur adipisicing elit. Omnis asperiores voluptatem sit ipsa ex fugit provident tenetur eum pariatur impedit cumque corrupti iste expedita, esse nulla ad et excepturi. Iste!&lt;/div&gt; 如果display值为table-cell和inline-block的元素的内容，不能作为祖先元素的第一格式化行内容。 如下所示，如果将上面HTML代码中p标签改为display: inline-block，则其不会应用首行效果。 如下所示，可以看出Lorem ipsum仍为小写： 12345678910&lt;div&gt; &lt;p style=\"display: inline-block;\"&gt;Lorem ipsum&lt;/p&gt; dolor sit amet consectetur adipisicing elit. Omnis asperiores voluptatem sit ipsa ex fugit provident tenetur eum pariatur impedit cumque corrupti iste expedita, esse nulla ad et excepturi. Iste!&lt;/div&gt;&lt;!-- 等价抽象代码 --&gt;&lt;div&gt; &lt;p style=\"display: inline-block;\"&gt;Lorem ipsum&lt;/p&gt;&lt;div::first-line&gt; dolor sit amet consectetur adipisicing elit. Omnis&lt;/div::first-line&gt; asperiores voluptatem sit ipsa ex fugit provident tenetur eum pariatur impedit cumque corrupti iste expedita, esse nulla ad et excepturi. Iste!&lt;/div&gt; 1.2 可以用于::first-line伪元素的样式::first-line生成的伪元素的行为类似于一个行级元素，还有一些其他限制。主要有以下样式可以应用于其上： 所有的字体属性 color和opacity属性 所有的背景属性 可以应用于行级元素的排版属性 文字装饰属性 可以用于行级元素的行布局属性 其他一些规范中特别指定可以应用的属性 此外，浏览器厂商有可能额外应用其他属性。 2. ::first-letter伪元素::first-letter伪元素代表所属源元素的第一格式化行的第一个排版字符单元，且其前面不能有任何其他内容。 ::first-letter常用于下沉首字母效果。 如下，我们可以创建一个下沉两行的段落。第一种方法，是CSS-INLINE-3中引入的，浏览器尚不支持。我们可以通过第二种方法实现同样的效果。 12&lt;p&gt;“Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dignissimos hic vero reprehenderit sunt temporibus? Doloribus consequatur quo illo porro quae recusandae autem eos. Corrupti itaque alias nam eius animi illum.&lt;/p&gt; 12345678910&lt;!-- initial-letter(尚不支持) --&gt;p::first-letter &#123; initial-letter: 2; &#125;&lt;!-- 普通实现 --&gt;h3 + p::first-letter &#123; float: left; display: inline-block; font-size: 32px; padding: 10px 15px;&#125; 注意，第一个排版字符单元前的标点符号（可以是多个标点符号）也要包含在::first-letter伪元素内。CSS3 TEXT中规定，一个排版字符单元可以包含超过一个的Unicode码点。不同的语言也可以有额外的规则决定如何处理。 如果将要放入::first-letter伪元素的字符不在同一个元素中，如&lt;p&gt;“&lt;em&gt;L中的&quot;L，浏览器可以选择一个元素创建伪元素，也可以两个都创建，或者都不创建。 在chrome下效果如下，还是挺奇怪的。所以尽量避免该情况。 此外，如果块元素的首字母不在行首（如由于双向重新排序），则浏览器不需要创建伪元素。 2.1 如何确定首字母首字母必须出现在第一格式化行内。 如下所示，将b标签改为display: inline-block;，则其不会出现在第一格式化行内，所以首字母无效果。 12&lt;p&gt;“&lt;b style=\"display: inline-block;\"&gt;Lorem&lt;/b&gt;” ipsum dolor sit amet, consectetur adipisicing elit. Dignissimos hic vero reprehenderit sunt temporibus? Doloribus consequatur quo illo porro quae recusandae autem eos. Corrupti itaque alias nam eius animi illum.&lt;/p&gt; 目前，::first-letter只可用于块级元素，未来可能会允许应用到更多的display类型中。 伪元素的虚拟标签应当紧跟在首字母之前，哪怕这个首字母是在子孙元素，这一点和::first-line类似。 如下例，首字母首字母在子孙元素中，首字母的并没有加粗，因为伪元素是添加到span标签内部的，所以字重是正常的。 123p &#123; line-height: 1.1 &#125;p::first-letter &#123; font-size: 2em; font-weight: normal &#125;span &#123; font-weight: bold &#125; 1&lt;p&gt;&lt;span&gt;Lorem ipsum&lt;/span&gt; dolor sit amet consectetur adipisicing elit. Magni possimus rerum eaque architecto, adipisci neque odio, recusandae sapiente placeat ullam velit ratione esse aut expedita quae earum. Velit, dignissimos accusamus?&lt;/p&gt; 如果元素有::before或者::after，则::first-letter伪元素也可以应用到其content值中。 如果元素是列表项（即display: list-item），则首字母会应用在标记符号后面。如下图： 如果列表项的显示位置在内部（即list-style-position: inside），浏览器可以选择忽略::first-letter伪元素。 2.2 可以用于::first-letter伪元素的样式::first-line生成的伪元素的行为类似于一个行级元素，还有一些其他限制。主要有以下样式可以应用于其上： 所有的字体属性 color和opacity属性 所有的背景属性 可以应用于行级元素的排版属性 文字装饰属性 可以用于行级元素的行布局属性 margin和padding属性 border和box-shadow 其他一些规范中特别指定可以应用的属性 同样，浏览器厂商有可能额外应用其他属性。 第二类：突出显示伪元素突出显示伪元素表示文档中特定状态的部分，通常采用不同的样式展示该状态。如页面内容的选中。 突出显示伪元素不需要在元素树中有体现，并且可以任意跨越元素边界而不考虑其嵌套结构。 突出显示伪元素主要有以下几类： ::selection与::inactive-selection 这两个伪元素表示用户在文档中选取的内容。::selection表示有效的选择，相反，::inactive-selection表示无效的选择（如当窗口无效，无法相应选中事件时） 如下图所示，我们可以定义页面中选中内容的样式，输入框中的内容也可以。 请原谅我也无法触发::inactive-selection。大家知道它是干啥的就行了。 ::spelling-error ::spelling-error表示浏览器识别为拼写错误的文本部分。暂无实现。 ::grammar-error ::grammar-error表示浏览器识别为语法错误的文本部分。暂无实现。 ::spelling-error和::grammar-error暂时均无实现。一方面，不同的语言的语法与拼写较为复杂。另一方面，::spelling-error和::grammar-error还可能会导致用户隐私的泄露，如用户名和地址等。所以浏览器实现必须避免读取这类突出显示内容的样式。 可以应用到突出显示类伪元素的样式对于突出显示类伪元素，我们只可以应用不影响布局的属性。如下： color background-color cursor caret-color caret-color text-decoration及其相关属性 text-shadow stroke-color/fill-color/stroke-width 草案中对这里可以应用的属性还有待确认，所以会存在一定的增减。现阶段，也只有color和background得到了支持。 第三类：存在于元素树中的伪元素：树中伪元素这类伪元素会一直存在于元素树中，它们汇集成源元素的任何属性。 1. 内容生成伪元素：::before/::after当::before/::after伪元素的content属性不为&#39;none&#39;时，这两类伪元素就会生成一个元素，作为源元素的子元素，可以和DOM树中的元素一样定义样式。 ::before是在源元素的实际内容前添加伪元素。::after是在源元素的实际内容后添加伪元素。 正如上文提到的，与常规的元素一样，::before和::after两个伪元素可以包含::first-line和::first-letter。 2. 列表项标记伪元素：::marker::markder可以用于定义列表项标记的样式。 如下，我们可以分开定义列表项及其内容的颜色。 12345&lt;ul&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt; 123456li&#123; color: red;&#125;li::marker &#123; color:green;&#125; 该伪元素暂时只有safari支持，尝试的话请使用safari。可以用于该伪元素的属性也有限，包括所有字体样式、color以及text-combine-upright，有待以后扩充。 3. 输入框占位伪元素：::placeholder::placeholder表示输入框内占位提示文字。可以定义其样式。 如： 123::placeholder &#123; color: blue;&#125; 所有可以应用到::first-line伪元素的样式都可以用于::placeholder上。可以参考上面的内容。 注意还有一个:placeholder-shown伪类，它主要用于定义显示了占位文字的元元素本身的样式，而不是占位文字的样式。 总结本文列举了CSS Pseudo-Elements Module Level 4中的所有伪元素类型。 首先，详细介绍了排版类伪元素，这一类大家的使用场景较多，支持度也较好。 其次，介绍了突出显示类伪元素，主要可以用于选中样式的修改，其他的尚未得到支持。 最后，介绍了树中伪元素，包括::before/::after/::marker/::placeholder 虽然有些伪元素没有得到支持，或者可以应用的属性优先，但是CSS工作中正在进行一定的扩展。有兴趣的同学们可以持续关注。 CSS Pseudo-Elements Module Level 4：https://www.w3.org/TR/2019/WD-css-pseudo-4-20190225/#window-interface。","categories":[],"tags":[]},{"title":"CSS的“层”峦“叠”翠","slug":"CSS的“层”峦“叠”翠","date":"2019-01-18T09:59:47.000Z","updated":"2019-02-25T03:12:57.910Z","comments":true,"path":"2019/01/18/CSS的“层”峦“叠”翠/","link":"","permalink":"http://verymuch.com/2019/01/18/CSS的“层”峦“叠”翠/","excerpt":"前言提起，z-index大家脑海里可能会立刻浮现这样的知识点：“z-index的值大小控制元素在Z轴上显示的层级，z-index越大显示的层级越高（也就是在最上层，离观察者越近），没有指定的按照出现顺序堆叠，此外z-index不能跨父元素比较。 z-index的使用似乎就是这么简单，对吧？ 我们先看如下例1： 12&lt;div class=\"box box1\"&gt;DIV#1，z-index为2&lt;/div&gt;&lt;div class=\"box box2\"&gt;DIV#2，z-index为auto&lt;/div&gt; HTML中有如下两个元素，DIV#1的z-index为2，DIV#2向右向上偏移。问：它们谁会显示在上面？ 点击 CSS的“层”峦“叠”翠 - 示例1 - 用法导引 进行编辑 (@verymuch) on CodePen. 如上所示，z-index为2的元素并没有显示在第二个元素上面。这似乎很奇怪，那到底是为什么呢？ 如果你也对此存在困扰，那就和我一起往下看吧。笔者将逐步引导大家深入理解z-index的用法。","text":"前言提起，z-index大家脑海里可能会立刻浮现这样的知识点：“z-index的值大小控制元素在Z轴上显示的层级，z-index越大显示的层级越高（也就是在最上层，离观察者越近），没有指定的按照出现顺序堆叠，此外z-index不能跨父元素比较。 z-index的使用似乎就是这么简单，对吧？ 我们先看如下例1： 12&lt;div class=\"box box1\"&gt;DIV#1，z-index为2&lt;/div&gt;&lt;div class=\"box box2\"&gt;DIV#2，z-index为auto&lt;/div&gt; HTML中有如下两个元素，DIV#1的z-index为2，DIV#2向右向上偏移。问：它们谁会显示在上面？ 点击 CSS的“层”峦“叠”翠 - 示例1 - 用法导引 进行编辑 (@verymuch) on CodePen. 如上所示，z-index为2的元素并没有显示在第二个元素上面。这似乎很奇怪，那到底是为什么呢？ 如果你也对此存在困扰，那就和我一起往下看吧。笔者将逐步引导大家深入理解z-index的用法。 一、没有使用z-index时，元素如何堆叠？首先，我们先了解下默认情况下，元素的堆叠，即在没有使用z-index时，元素是如何堆叠的。 如果没有给任何元素指定z-index，则元素按照如下顺序进行堆叠（由下到上，由远及近）。 根元素的背景和边框 非定位的后代块元素，按照在HTML中的出现顺序进行堆叠 定位的后代块元素，按照在HTML中的出现顺序进行堆叠 注：定位的元素即为position的值不是static的元素 点击 CSS的“层”峦“叠”翠 - 示例2 - 无z-index时的默认堆叠 进行编辑 (@verymuch) on CodePen. 如上例2所示，定位的元素（DIV#1、DIV#2、DIV#3与DIV#4）按照出现的顺序堆叠。非定位的元素（DIV#5与DIV#6）虽然出现在后面，但是会被定位的元素遮盖，不过它们本身是按照出现顺序堆叠的。 注意，当使用order属性改变flex元素子元素的出现顺序时，对于堆叠规则也有同样的影响。 如下例3所示，当将DIV#2的order改为-1后，它出现的位置为第一个，其堆叠顺序也被DIV#1所遮盖。 点击 CSS的“层”峦“叠”翠 - 示例3 - flex中order对出现顺序的影响 进行编辑 (@verymuch) on CodePen. 二、浮动块默认如何堆叠如果存在浮动块，浮动块的堆叠顺序会介于无定位元素和定位元素之间。即： 根元素的背景和边框 非定位的后代块元素，按照在HTML中的出现顺序进行堆叠 浮动块 定位的后代块元素，按照在HTML中的出现顺序进行堆叠 我们稍微修改下示例2中的代码，将DIV#1和DIV#3改为浮动元素。可以看到如下例4所示，浮动元素的堆叠顺序高于非定位元素，低于定位元素。 点击 CSS的“层”峦“叠”翠 - 示例4 - 浮动块的堆叠 进行编辑 (@verymuch) on CodePen. 此外，还有一点小改动，不知道你有没有注意到，我们将非定位元素中的文本内容改为了左对齐，但其内容并没有被浮动元素覆盖。这其实是浮动元素的标准效果——环绕效果。这一行为也可以列为堆叠顺序之一。顺序如下： 根元素的背景和边框 非定位的后代块元素，按照在HTML中的出现顺序进行堆叠 浮动块 非定位元素的后代行内元素 定位的后代块元素，按照在HTML中的出现顺序进行堆叠 为了让大家清晰的理解上面所说的非定位元素的后代行内元素。大家可以看下例5。DIV#1为浮动元素，所以其层级高于在其后出现的DIV#2。此时DIV#1向右偏移，可以看见DIV#2中的行内文字元素(可以为纯文字节点)层级高于DIV#1。 点击 CSS的“层”峦“叠”翠 - 示例5 - 非定位元素的后代行内元素 进行编辑 (@verymuch) on CodePen. 三、使用z-index自定义堆叠顺序以上是CSS中对于各类元素的默认排序，那我们能否自定义排序呢？答案显然是肯定的。使用z-index可以自定义堆叠顺序。 z-index的值可以为整数（正数、负数、0均可）。使用方法很简单。 需要注意以下三点： 未指定z-index，默认为auto 如果z-index相同，则按照默认规则比较 z-index只能用于定位了的元素(暂时这么说，下文会追加解释)。这也解释了本文开头的例1为什么不生效了。因为z-index对普通元素没有效果。 如下例6，我们修改了例2中元素的z-index。 我们会发现DIV#5和DIV#6并不受z-index的影响。主要体现在两个方面，首先DIV#5的z-index大于DIV#6，但是显示却低于#DIV#6；其次是DIV#5的z-index小于DIV#4，但是仍显示在其上面。 而对于定位的元素，z-index对其有影响，堆叠顺序与数字大小符合。 点击 CSS的“层”峦“叠”翠 - 示例6 - 使用z-index自定义堆叠顺序 进行编辑 (@verymuch) on CodePen. 好了，相信通过上述内容，大家对于z-index应该有了一定的了解，但是以上仅仅是基本知识，关于堆叠远远没有这么简单。 想要彻底了解z-index，我们还要了解一下CSS堆叠的一个重要概念————堆叠上下文。 四、堆叠上下文堆叠上下文是HTML中的三维概念，它抽象出了一个z轴，z轴垂直于显示器，指向用户（假设用户面朝显示区域）。 在前面的内容中，之所以有些元素的渲染顺序会受到z-index影响，是因为它们都因为某种原因产生了一个堆叠上下文，而不仅仅是上文提到的定位的元素。 那么到底什么情况下会产生堆叠上下文呢？其实堆叠上下文的生成主要受到元素的属性所影响。 如果任何一个元素满足一下条件之一，就会生成一个堆叠上下文。 文档的根元素（HTML）默认为一个堆叠上下文 position值为”absolute”或”relative”，且z-index指定了除了auto以外值的元素 position值为”fixed”或”sticky” 弹性布局的子元素，且z-index指定了除了auto以外值的元素 opacity的值小于的元素 mix-blend-mode的值不是normal的元素 以下属性值不为”none”的元素 transform filter perspective clip-path mask / mask-image / mask-border isolation值为”isolate”的元素 -webkit-overflow-scrolling值为”touch”的元素 will-change指定了除初始值以外的任何属性的元素 contain值为”layout”/“paint”及含义其中之一的组合值的元素 如上所述，有11种情况会生成堆叠上下文，对于堆叠上下文可以通过z-index指定其堆叠的顺序（注意这里不是上面说的只对定位元素生效了）。 对于堆叠上下文我们需要知道以下几点： 在每个堆叠上下文内部，子元素的堆叠规则遵循上面所讲的基本规则。 堆叠上下文可以包含在其他堆叠上下文内部，它们会创建一个堆叠上下文层级结构。 堆叠上下文的层级结构与HTML的元素不同，因为对于没有创建堆叠上下文的元素会被父元素同化。堆叠上下文的层级只包括创建了堆叠上下文的元素。 堆叠上下文独立于其兄弟元素，在处理自身内部堆叠时，只考虑其后代元素。内部堆叠完成后，将当前堆叠上下文当成一个整体，考虑在父堆叠上下文中的堆叠顺序。通俗的说，子堆叠上下文的z-index值只在父堆叠上下文中有意义。 注意，第四条和文章开头提到的“z-index不能跨父元素比较”是不等价的，因为其限制了必须是堆叠上下文。 针对这几点，我们看一下例7。大家可以先看一下是否理解。然后我们再讲解一下。 点击 CSS的“层”峦“叠”翠 - 示例7 - 存在多级堆叠上下文时，元素的堆叠 进行编辑 (@verymuch) on CodePen. 示例7中，堆叠上下文的层级结构如下： root DIV#1 DIV#2 DIV#4 DIV#5 DIV#6 DIV#3 DIV#8 其中DIV#4, DIV#5, DIV#6是DIV#2的子元素，可见其堆叠顺序被限制在DIV#2中，z-index的值只在DIV#2内部有效，然后DIV#2又作为一个整体与DIV#1，DIV#3按照上述规则进行堆叠。 DIV#7被根元素同化，DIV#8与DIV#1, DIV#2, DIV#3按照上述规则进行堆叠。在其三之上。 其实有个小方法能够帮助大家更好地判断如何堆叠，那就是把堆叠上下文的层级结构类比为版本号。如下： root DIV#1 (V3) DIV#2 (V2) DIV#4 (V2.1) DIV#5 (V2.3) DIV#6 (V2.4) DIV#3 (V1) DIV#8 (V4) 如上，类比成版本号之后，我们就能很方便的判断出谁上谁下啦。 五、注意事项1. z-index: 0与z-index: auto并不相同。通常情况下，相邻的两个元素，如果其z-index值分别为0和auto，看上去没什么区别的。如下例8所示。 DIV#1的z-index值为0，其堆叠顺序并没有高于DIV#2，而是和出现顺序相同。 点击 CSS的“层”峦“叠”翠 - 示例8 - zindex: 0 和 auto 的区别 进行编辑 (@verymuch) on CodePen. 但是实际上，这两种情况并不相同。上面提到，当元素“position值为”absolute”或”relative”，且z-index指定了除了auto以外值”时，元素会产生一个堆叠上下文，虽然元素本身堆叠顺序没有影响，但是其子元素的堆叠顺序会有影响。如下例9所示。 因为DIV#1的z-index值不为auto，其产生了堆叠上下文，所以其子元素被限制在其内部，低于DIV#2(如果z-index是auto的话，DIV#3会高与DIV#2)。 点击 CSS的“层”峦“叠”翠 - 示例9 - zindex: 0 和 auto 的区别（2） 进行编辑 (@verymuch) on CodePen. 2. 不要滥用z-index，将堆叠上下文的层级结构打平笔者之所以这样建议，是因为当堆叠上下文的层级结构比较复杂时，简单的修改某个元素的z-index或者其他属性，会导致一些无法预知的影响。 如下例时所示，DIV#2是DIV#1的子元素，DIV#4是DIV#3的子元素，DIV#1和DIV#3不是堆叠上下文，则DIV#2与DIV#4的堆叠顺序与它们的z-index值对应。 点击 CSS的“层”峦“叠”翠 - 示例10 - zindex造成的影响 进行编辑 (@verymuch) on CodePen. 但如果我们在某些时候需要调整DIV#3的z-index，如将其调整成z-index: 4;，那么结果就完全不一样了。如下例11所示，DIV#4高于DIV#2了。 See the Pen CSS的“层”峦“叠”翠 - 示例11 - zindex造成的影响（2） by verymuch (@verymuch) on CodePen. 所以笔者建议，大家一定要慎用，基于对堆叠上下文的理解基础上，把握好页面中堆叠上下文的层级结构，尽量保持比较浅的层级结构，最好能与HTML层级结构一致，保证自己能够时刻知道如何进行修改与调整。 总结以上，笔者从元素的默认堆叠顺序，讲到了堆叠上下文的生成。对上述内容了解之后，就能够很好地应对开发中所遇到的层级问题了。不过还是建议大家在开发前，提前规划好z-index的使用。避免最后自己无法掌控。 参考文献 深入理解CSS中的层叠上下文和层叠顺序 Understanding CSS z-index","categories":[],"tags":[]},{"title":"ES模块基础用法及常见使用问题","slug":"ES-Module-And-Questions","date":"2019-01-06T11:18:47.000Z","updated":"2019-01-07T03:35:36.815Z","comments":true,"path":"2019/01/06/ES-Module-And-Questions/","link":"","permalink":"http://verymuch.com/2019/01/06/ES-Module-And-Questions/","excerpt":"ES6中引入了模块（Modules）的概念，相信大家都已经挺熟悉的了，在日常的工作中应该也都有使用。 本文会简单介绍一下ES模块的优点、基本用法以及常见问题。 着重介绍3个使用ES模块的常见问题： 如何在浏览器中下快速使用export/import? 如何在Node下快速使用export/import? 当心，不要修改export输出的对象，尽管你能改","text":"ES6中引入了模块（Modules）的概念，相信大家都已经挺熟悉的了，在日常的工作中应该也都有使用。 本文会简单介绍一下ES模块的优点、基本用法以及常见问题。 着重介绍3个使用ES模块的常见问题： 如何在浏览器中下快速使用export/import? 如何在Node下快速使用export/import? 当心，不要修改export输出的对象，尽管你能改 一、ES模块的优点ES模块的引入主要有以下几个优点： 可以将代码分割成功能独立的更小的文件。 有助于消除命名冲突。 不再需要对象作为命名空间（比如Math对象），不会污染全局变量。 ES6 模块在编译时就能确定模块的依赖关系，以及输入和输出的变量，从而可以进行静态优化。 二、ES模块的基本用法模块功能中主要有以下几个关键词：export、import、as、default、*。 export用于规定输出模块的对外接口 import用于输入模块提供的接口 as用于重命名输出和输入接口 default用于指定模块输出的默认接口 *表示输入模块的所有接口。 2.1 export2.1.1 常规用法export输出规定模块的对外接口，有三种常规用法： 12345678910111213141516171819// 用法1：直接输出一个变量\b声明、函数声明或者类声明export var m = 1;export function m() &#123;&#125;;export class M &#123;&#125;;// 用法2：输出内容为大括号包裹的一组变量，// 注意不要被迷惑，export不能直接输出常规的对象，下面会给出错误示例。var m1 = 1;var m2 = 2;export &#123;m1, m2&#125;;// 用法3：输出指定变量，并重命名，则外部引入时得到的是as后的名称。var n = 1;export &#123;n as m&#125;;// 用法4：使用default输出默认接口，default后可跟值或变量export default 1;var m = 1export default m; 2.1.2 错误用法需要注意的是，在使用export时会经常出现以下错误用法。如下代码所示： 123456789101112// 用法1export 1;export &#123;m: '1'&#125;;// 用法2var m = 1;export m;// 用法3function foo() &#123; export default 'bar' // SyntaxError&#125; 其中错误用法1和用法2相同，export必须输出一个接口，不能输出一个值（哪怕是对象也不行）或者一个已赋值的变量，已赋值的变量对应的也是一个值。上述常规用法中，export default后之所以可以直接跟值是因为default为输出的接口。 错误用法3是因为export只能出现在模块的顶层作用域，不能存在块级作用域中。如果出现在块级作用域的话，就没法做静态优化了，这违背ES6中模块的设计初衷了。 2.2 importimport命令用于引入模块提供的接口，有以下几种常见用法： 1234567891011121314// 用法1：仅执行 my_module 模块，不输入任何值（可能没啥用，但是是合法的）import 'my_module';// 用法2：输入 my_module 的默认接口, 默认接口重命名为 mimport m from 'my_module';// 用法3：输入 my_module 的 m 接口import &#123; m &#125; from 'my_module';// 用法4：输入 my_module 的 m 接口，使用as重命名m接口import &#123; m as my_m&#125; from 'my_module';// 用法5：导入所有接口import * as all from 'my_module'; 需要注意的是，如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。如下两种均不会多次执行。 1234567// 用法1：重复引入 my_module，只执行一次import 'my_module';import 'my_module';// 用法2：多次引入不同的接口，只执行一次import &#123; m1 &#125; from 'my_module';import &#123; m2 &#125; from 'my_module'; 此外，import命令输入的变量都是只读的，加载后不能修改接口。 12import &#123; m &#125; from 'my_module';m = 1; // SyntaxError: \"m\" is read-only 如果m是一个对象，改写m的属性是可以的。但是笔者不建议这么做，具体内容第三部分会详细说。 错误用法需要注意的是，import也必须在顶级作用域内，并且其中不能使用表达式和变量。其常见的错误用法示例如下： 12345678910111213// 用法1：不能使用表达式import &#123; 'm' + '1' &#125; from 'my_module';// 用法2：不能使用变量let module = 'my_module';import &#123; m &#125; from module;// 用法3：不能用于条件表达式if (x === 1) &#123; import &#123; m &#125; from 'module1';&#125; else &#123; import &#123; m &#125; from 'module2';&#125; 三、常见的使用问题3.1 如何在浏览器中下快速使用import?各大浏览器已经开始逐步支持ES模块了，如果我们想在浏览器中使用模块，可以在script标签上添加一个type=&quot;module&quot;的属性来表示这个文件是以module的方式来运行的。如下： 1234567891011// myModule.jsexport default &#123; name: 'my-module'&#125;// script脚本引入&lt;script type=\"module\"&gt; import myModule from './myModule.js' console.log(myModule.name) // my-module&lt;/script&gt; 不过，由于ES的模块功能还没有完全支持，在不支持的浏览器下，我们需要一些回退方案，可以通过nomodule属性来指定某脚本为回退方案。如下，在支持的浏览器中进行提示。 1234567&lt;script type=\"module\"&gt; import myModule from './myModule.js'&lt;/script&gt;&lt;script nomodule&gt; alert('你的浏览器不支持ES模块，请先升级！')&lt;/script&gt; 如上，当浏览器支持type=module时，会忽略带有nomodule的script；如果不支持，则忽略带有type=module的脚本，执行带有nomodule的脚本。 在使用type=module引入模块时还有一点需要注意的，module的文件默认为defer，也就是说该文件不会阻塞页面的渲染，会在页面加载完成后按顺序执行。 3.2 如何在Node下快速使用export/import?相信大家都遇到过如下错误： 当我们直接在node下执行包含ES模块的的代码时，就会看到如上报错，这是因为Node还没有原生支持ES模块。但有的时候我们又想在Node下使用，那么该如何做呢？ 下面介绍两种快捷的方法，一种是Node原生支持的，一种需要借助Babel进行编译。 3.2.1 Node原生支持Node从9.0版本开始支持ES模块，可以在flag模式下使用ES模块，不过这还处于试验阶段（Stability: 1 - Experimental）。其用法也比较简单，执行脚本或者启动时加上--experimental-modules即可。不过这一用法要求import/export的文件后缀名必须为*.mjs。 123456node --experimental-modules test-my-module.mjs// test-my-module.mjsimport myModule from './myModule.mjs'console.log(myModule.name) // my-module 这是Node原生支持的方法，但是对文件的后缀名有限制，但是现阶段，我们在项目中的代码应该还是以.js为后缀居多，所以大多数情况下我们还是会通过编译使用ES模块。 下面我们就介绍下如何快速编译并使用ES模块。 3.2.2 借助babel-node执行包含ES模块代码的文件平时我们可能会借助构建工具对ES模块，可能是借助Webpack/Rollup等构建工具进行编译，这些工具配置起来都相对繁琐。 有时，我们只想简单的执行某些代码，而其中又包含ES模块代码，就会发生问题，因为node默认不支持。这时候如果进行一堆配置来使其支持的话，又太过麻烦。 下面我给大家介绍一种看起来更加快捷的方法。 安装babel-cli和babel-preset-env，并将其保存为开发依赖。 在根目录创建.babelrc文件，在其中添加如下配置。 123&#123; \"presets\": [\"env\"]&#125; 通过./node_modules/.bin/babel-node index.js或npx babel-node index.js执行脚本。其中babel-node为babel-cli自带。 怎么样，是不是相当快捷了，而且近乎于0配置。 3.3 当心，不要修改export输出的对象，尽管你能改前面有提到如果export输出的接口是一个对象，那么是可以修改这个对象的属性的。 而我的建议是，尽管你能改，也不要修改。 大家可能都会有这样一个常规的用法，即在编写某个组件时，可能会存在包含基础配置的代码，我们姑且称其为options.js，其输出一堆配置文件。 12345678// options.jsexport default &#123; // 默认样式 style: &#123; color: 'green', fontSize: 14, &#125;&#125; 如果你没有类似需求，你可以想象下，你现在要把EChart的某个图表抽象成自己代码库里的组件，那么这时候应该就有一大堆基础配置文件了。 既然称其为基础配置，那么言外之意就是，根据组件的用法不同，会一定程度上对配置进行修改。比如我们会在引入后将颜色改为红色。 123456// use-options.jsimport options from \"./options.js\";console.log(options); // &#123; style: &#123; color: 'green', fontSize: 14 &#125; &#125;options.style.color = \"red\"; 这时候就需要格外注意了，如果我们直接对输入的默认配置对象进行修改，就可能会导致一些bug。 因为export输出的值是动态绑定的，如果我们修改了其中的值，就会导致其他地方再次引入该值时会发生变化，此时的默认配置就不是我们所设想的默认配置了。如上例，我们再次引入基础配置后，就会发现颜色的默认值已经变成红色了。 12345// use-options-again.jsimport useOptions from \"./use-options.jsimport options from \"./options.js\";console.log(options); // &#123; style: &#123; color: 'red', fontSize: 14 &#125; &#125; 所以，笔者建议，当我们有需求对输入的对象接口进行改变时，可以先对其进行深度复制，然后在进行修改，这样就不会导致上述所说的问题了。如下所示： 1234567// use-options.jsimport _ from \"./lodash.js\";import options from \"./options.js\";const myOptions = _.cloneDeep(options);console.log(myOptions); // &#123; style: &#123; color: 'green', fontSize: 14 &#125; &#125;myOptions.style.color = \"red\"; 四、总结本文只是简单点的介绍了下ES模块的基本用法，还有一些用法，如import和export的结合使用等，这些大家可以结合MDN或者其他网站进行了解。本文主要是介绍了以下笔者及身边的同事在使用ES模块时会存在的一些疑问，希望对大家有一点帮助。 参考内容 Export | MDN Import | MDN 7 Different Ways to Use ES Modules Today! Import, Export, Babel, and Node","categories":[],"tags":[]},{"title":"浏览器缓存策略之扫盲篇","slug":"web-browser-cache-strategy","date":"2018-10-09T07:45:32.000Z","updated":"2018-10-15T03:22:18.115Z","comments":true,"path":"2018/10/09/web-browser-cache-strategy/","link":"","permalink":"http://verymuch.com/2018/10/09/web-browser-cache-strategy/","excerpt":"前言众所周知，在Web开发中，缓存很重要、很有用。但同时其也很复杂。 本文将从以下5个方面全面地介绍下缓存相关的内容。 缓存的判断策略 必知必会的缓存基础 各类缓存的优缺点 缓存的最佳实践 小试牛刀，看看你掌握了没有？","text":"前言众所周知，在Web开发中，缓存很重要、很有用。但同时其也很复杂。 本文将从以下5个方面全面地介绍下缓存相关的内容。 缓存的判断策略 必知必会的缓存基础 各类缓存的优缺点 缓存的最佳实践 小试牛刀，看看你掌握了没有？ 一、缓存的判断策略浏览器对于所请求资源的缓存处理有一套完整的机制，主要包含以下三个策略：存储策略、过期策略、协商策略。 其中，存储策略发生在收到请求响应后，用于决定是否缓存相应资源；过期策略发生在请求前，用于判断缓存是否过期；协商策略发生在请求中，用于判断缓存资源是否更新。 浏览器在应用缓存策略时，具体的判断流程如下： 上图中的缓存判断流程是浏览器在应用缓存时完整的判断流程。但是在浏览器中访问资源的方式不同也会导致判断流程的不同。判断流程会根据不同方式跳过一些流程。 浏览器下访问资源的方式主要有以下7种： (新标签)地址栏回车 链接跳转 前进、后退 从收藏栏打开链接 (window.open)新开窗口 刷新（Command + R / F5） 强制刷新（Command + Shift + R / Ctrl + F5） 使用这7种方式访问资源时，应用缓存的策略会有一些不同。如下图所示。通过上述7种方式访问资源，会从不同的缓存应用判断步骤开始。此处不做验证，相信大家看了后面的内容，能够自行验证的。 需要注意的是，Chrome中在当前地址栏，不改变内容，直接回车，等同于刷新当前页，而在Firefox下与其他在地址栏回车一样。这一点比较特殊，需要适当区分下。 本文配有测试脚本，代码在github上。下文会按照测试脚本进行述说，使用说明见下载链接。验证上述内容，可以执行node cache-ETag+max-age.js，会同时开启ETag和max-age，然后触发相应的动作，通过Network面板和node日志即可验证，此处篇幅有限先不赘述。 此外，这里提一个概念，webkit资源分为主资源和派生资源。主资源是地址栏输入的URL请求返回的资源，派生资源是主资源中所引用的JS、CSS、图片等资源。 在Chrome下刷新时，只有主资源的缓存应用方式如上图所示，派生资源的缓存应用方式与新标签打开类似，会判断缓存是否过期。强缓存生效时的区别在于新标签打开为from disk cache，而当前页刷新派生资源是from memory cache。 而在Firefox下，当前页面刷新，所有资源都会如上图所示。下文也会利用Chrome的这一特点在当前页刷新，派生资源会使用缓存进行测试。不然每次都需要打开新标签较为繁琐。 二、必知必会的缓存基础HTTP中与缓存有关的字段主要有以下10个，如下表所示。为明确表示其功能及用法，下表中分别区分了存储策略、过期策略、协商策略、请求头、响应头。 Key 描述 存储策略 过期策略 协商策略 请求头 响应头 Expires 指定缓存的过期时间，值为某一时刻（绝对时间）。在指定时刻后过期 ✓ ✓ ✓ Cache-Control 指定缓存机制 ✓ ✓ ✓ ✓ Pragma 指定缓存机制(http1.0字段) ✓ Last-Modified 资源最后修改时间 乄 ✓ ✓ If-Modified-Since 缓存协商校验字段，为上次请求收到的Last-Modified的值。处理方式见下文。 ✓ ✓ If-Unmodified-Since 缓存协商校验字段，为上次请求收到的Last-Modified的值。处理方式与If-Modified-Since相反，见下文。 ✓ ✓ ETag 请求资源的唯一标识字符串 ✓ ✓ If-Match 缓存协商校验字段，请求资源的唯一标识字符串，为上次请求收到的ETag的值。处理方式见下文。 ✓ ✓ If-None-Match 缓存协商校验字段，请求资源的唯一标识字符串，为上次请求收到的ETag的值。处理方式与If-Match相反，见下文。 ✓ ✓ 注：乄表示半对，Last-Modified之所以是半对，是因为有可能会触发启发式缓存，也会缓存文件。具体见下文。 缓存又分为强缓存和弱缓存（又称为协商缓存）。其中强缓存包括Expires和Cache-Control，主要是在过期策略生效时应用的缓存。弱缓存包括Last-Modified和ETag，是在协商策略后应用的缓存。强弱缓存之间的主要区别在于获取资源时是否会发送请求。 2.1 Expires如上所述，Expires指定缓存的过期时间，为绝对时间，即某一时刻。参考本地时间进行比对，在指定时刻后过期。RFC 2616建议最大值不要超过1年。 Expire头字段是响应头字段，格式如下：Expires: Sat Oct 20 2018 00:00:00 GMT+0800 (CST)。 可以尝试以下步骤进行验证： \b执行node cache-Expires.js，该脚本会给请求的资源设定Expires，值为：”2018-10-20 00:00:00”。 访问地址http://localhost:1030/，开启Network Tab，查看avatar.jpg图片，Expires值如下所示。 再次刷新会看到该资源已经被缓存，size栏显示为(from memory cache)。此时修改本地时间，将时间修改为“2018-10-15 00:00:00”，再刷新，会发现缓存仍然有效。 如果将本地时间修改为“2018-10-25 00:00:00”，再刷新，会发现图片不再使用缓存，而是重新获取了，因为本地时间超过了设定值。 2.2 Cache-ControlCache-Control用于指定资源的缓存机制，可以同时在请求头和响应头中设定，涉及上述三个策略中的两个策略：存储策略、过期策略。 Cache-Control的语法如下：Cache-Control: cache-directive[,cache-directive]。cache-directive为缓存指令，大小写不敏感，共有12个与HTTP缓存标准相关，如下表所示。其中请求指令7种，响应指令9种。Cache-Control可以设置多个缓存指令，以逗号,分隔。 Key 描述 存储策略 过期策略 请求字段 响应字段 可缓存性相关 public 资源在客户端和代理服务器缓存 ✓ ✓ private 资源仅在在客户端缓存，\b代理服务器不缓存 ✓ ✓ no-cache 资源被缓存，但立即过期，下次访问时强制向服务器验证资源有效性。相当于max-age:0,must-revalidate ✓ ✓ ✓ ✓ 过期相关 max-age=&lt;seconds&gt; 在请求头中：指出客户端不接受有效时间大于指定时间的缓存。 在响应头中：规定资源的最大新鲜时间，指定时间后过期，单位为秒。 ✓ ✓ ✓ ✓ s-maxage=&lt;seconds&gt; 同上，但只对代理服务器生效，如果是private缓存，会忽略该字段。会覆盖max-age或Expires头字段 ✓ ✓ ✓ max-stale=&lt;seconds&gt; 指定时间内, 即使缓存过时, 资源依然有效 ✓ ✓ min-fresh=&lt;seconds&gt; 缓存的资源至少要保持指定时间的新鲜期 ✓ ✓ 验证与重载相关 must-revalidate 使用缓存资源之前，必须先验证状态，并且过期资源不应该再使用。 ✓ ✓ proxy-revalidate 同上，但只对代理服务器生效，如果是private缓存，会忽略该字段。 ✓ ✓ 其他 no-store 请求和响应都不缓存 ✓ ✓ ✓ only-if-cached 仅返回已经缓存的资源，不再向服务器获取新的内容。若无缓存则返回504 ✓ no-transform 强制要求代理服务器不要对资源进行转换, 禁止代理服务器对 Content-Encoding, Content-Range, Content-Type字段的修改(因此代理的gzip压缩将不被允许) ✓ ✓ 2.3.1 cache-directive大小写不敏感如上，cache-directive指令大小写不敏感，所以在设置Cache-Control时，指令可以不区分大小写。不过建议统一使用小写。验证如下： 执行node cache-directive-case-insensitive.js，会服务端会将max-age写成大写，如下Cache-Control: MAX-AGE=86400。 再次请求浏览器会发现缓存同样会生效。 2.3.2 在请求头中的max-agemax-age在请求头中的主要应用为max-age=0表示不使用缓存。Chrome和Firefox浏览器下的刷新操作（Command+ R / F5）均是在请求头上添加了max-age=0\u001d指令，表示不使用强缓存，但允许协商缓存（在介绍了协商缓存的Last-Modified和ETag之后，可以自行验证下这一点）。\b 刷新时Cache-Control为max-age=0验证如下： 单独访问图片资源http://localhost:1030/avatar.jpg，开启Network 刷新，可在响应头中看到上述内容。如下图所示。（Firefox下相同，不单独验证，主要最开始提到的主资源和派生资源在两个浏览器中表现形式的不同）。 此外，经验证，Chrome和\bFirefox均对max-age&gt;0的情况支持不好。 在Chrome下，通过Modify Headers插件（Chrome和Firefox下均有类似插件）给请求添加max-age=7200。 \b执行node cache-max-age.js，访问http://localhost:1030，先强刷保证资源更新。 打开NetWork，查看avatar.jpg，刷新，会发现，资源访问仍然走的是缓存。如果按照规范的定义应该是不生效。 2.3.3 max-age与ExpiresCache-Control中的max-age指令用于指定缓存过期的相对时间。\b资源达到指定时间后过期。该功能与Expires类似。但其优先级高于Expires，如果同时设置max-age和Expires，max-age生效，忽略Expires。验证如下： 执行node cache-max-age+Expires.js，会同时设置Cache-Control: max-age=86400 / Expires: Mon Oct 20 2018 00:00:00 GMT+0800 (CST)，如下所示。 刷新，\b然后再把本地时间改成当前时间延后2小时(不超过20号)，会发现缓存生效。\b(以下两步不再附截图，与上述示例类似)。 如果将时间改为两天后（假设20号离现在大于两天，否则结果相反），会发现缓存不再生效，因为超出了max-age的限制。 相反，可以再试一下，max-age的有效时间大于Expires的情况，会发现依然是max-age生效。 2.3.4 no-cache和no-store还有一点需要注意的是，no-cache并不是指不缓存文件，no-store才是指不缓存文件。no-cache仅仅是表明跳过强缓存，强制进入协商策略。 2.3 Pragmahttp1.0字段, 通常设置为Pragma:no-cache, 作用与Cache-Control:no-cache相同。当在浏览器进行强刷（Comand + Shift + R / Ctrl + F5）或在NetWork面板内勾选禁用缓存（Disable Caches）时，会自动带上Pragma:no-cache和Cache-Control:no-cache，并且不会带上协商策略中所涉及的信息（下面介绍的If-Modified-Since/If-None-Match）。这是不会使用任何缓存，重新获取资源。如下图所示。 2.4 Last-Modified/If-Modified-Since/If-Unmodified-SinceLast-Modified用于标记请求资源的最后一次修改时间。语法格式为：Last-Modified: &lt;day-name&gt;，&lt;day&gt; &lt;month&gt; &lt;year&gt; &lt;hour&gt;:&lt;minute&gt;:&lt;second&gt; GMT，即GMT(格林尼治标准时间)。可用 new Date().toGMTString()获取当前GMT时间。由于Last-Modified只能精确到秒，因此不适合在一秒内多次改变的资源。 如果Expires，Cache-Control: max-age，或 Cache-Control:s-maxage都没有在响应头中出现，并且设置了Last-Modified时，那么浏览器默认会采用一个启发式的算法，即启发式缓存。通常会取响应头的Date_value - Last-Modified_value值的10%作为缓存时间。验证如下： 执行node cache-Last-Modified.js，服务器会获取资源的最后修改时间，设置为Last-Modified的值。访问localhost:1030，查看avatar.jpg，如下图所示： 刷新浏览器，会发现图片会从缓存获取。 通过启发式缓存的公司可以计算出缓存的时间，修改本地时间超过缓存时间后，再刷新，会发现缓存失效。 2.4.1 If-Modified-Since返回的资源带有Last-Modified标识时，再次请求该资源，浏览器会自动带上If-Modified-Since，值为返回的Last-Modified值。请求到达服务器后，服务器进行判断，如果从上次更新后没有再更新，则返回304。如果更新了则重新返回。验证如下： 执行node cache-Last-Modified.js，服务器会获取资源的最后修改时间，设置为Last-Modified的值。如下图所示，并且注意看一下资源的大小。 \b刷新页面，再次查看NetWork。会发现请求头中带上了If-Modified-Since。如果服务器判断资源未改变，则返回304，此外由于服务器返回304，资源会从缓存获取，所以资源大小也减少了，如下所示。 修改index.html文件的内容，再次刷新。会发现返回变成200，html内容更新了，并且返回了新的\bLast-Modified的值，资源大小也相应地改变了。 304请求也可以触发存储策略，如文章开头的流程判断图所示，可自行验证，返回时添加相应header即可。 注意，If-Modified-Since只能用于GET、HEAD请求。 2.4.2 If-Unmodified-SinceIf-Unmodified-Since表示资源未修改则正常执行更新，否则返回412(Precondition Failed)状态码的响应。主要有如下两种场景。 用于不安全的请求中从而是请求具备条件性（如POST或者其他不安全的方法），如请求更新wiki文档，文档未修改时才执行更新。 与If-Range字段同时使用时，可以用来保证新的片段请求来自一个未修改的文档。 2.5 ETag/If-Match/If-None-MatchETag是请求资源在服务器的唯一标识，浏览器可以根据ETag值缓存数据。在再次请求时通过If-None-Match携带上次的ETag值，如果值不变，则返回304，如果改变你则返回新的内容。 需要注意的是，ETag和If-None-Match的值均为双引号包裹的。 验证步骤与Last-Modified相似。执行node cache-ETag.js即可。此处不再详述。 If-Match判断逻辑逻辑与If-None-Match相反。 最后，ETag的优先级高于Last-Modified。当ETag和Last-Modified，ETag优先级更高\b，但不会忽略Last-Modified，需要服务端实现。验证如下，其中服务端判断优先级： 执行node cache-ETag+Last-Modified.js。服务端会在资源的响应头中，同时设置ETag和Last-Modified。如下图： 刷新浏览器，会发现index.html请求时304。查看node日志，会看到ETag生效。如下： 三、缓存的优缺点好了，通过长长的第二部分，我们\b简单介绍了一下HTTP Cache的基础知识。下面我再汇总一下各类缓存之间的优缺点吧。如下表所示： 缓存头部 优点 缺点 Expires 1. HTTP 1.0 产物，可以在HTTP 1.0和1.1中使用。 2. 简单易用，通过绝对时间标识失效时间。 1. 时间为服务器返回的时间，如果本地时间与服务器时间不一致，则可能会出现问题。（如上述我们通过修改本地时间是缓存失效。） 2. 存在版本问题，在资源过期之前如果\b对资源进行修改，客户端都是无法获知的。 Cache-Control 1. \bHTTP 1.1的内容，以相对时间标识失效时间，解决了Expires服务器和客户端相对时间的问题。 2. 支持的指令较多，可以根据需要进行相应的配置。 1. HTTP 1.1 才有的内容，不适用于HTTP 1.0 。 2. 与Expires类似，存在版本问题，在资源过期之前如果\b对资源进行修改，客户端都是无法获知的。 Last-Modified 1. 不存在版本问题，每次都会跟服务器进行校验，符合则304不返回资源，不符合则重新返回资源。 1. 以时刻作为标识，精确到秒，无法识别一秒内进行多次修改的情况。 2. 只要资源\b被修改，无论内容是否发生实质性的变化，都会将该资源返回客户端。 ETag 1. 不存在版本问题，每次都会跟服务器进行校验，符合则304不返回资源，不符合则重新返回资源。 2. \b可以更加精确的判断资源是否被修改。 3. 可以识别一秒内多次修改的情况。 1. 计算ETag\b值会对性能造成一定消耗。 2. 分布式服务器存储的情况下，需要保证计算ETag的算法一致。如果不一致，会导致资源在不同服务器上验证不通过。 四、最佳实践从上面各类缓存的优缺点可以看出，每一种缓存都不是完美的。所以建议像下面这样做： 不要缓存HTML，避免缓存后用户无法及时获取到更新内容。 使用Cache-Control和ETag来控制HTML中所使用的静态资源的缓存。一般是将Cache-Control的max-age设成一个比较大的值，然后用ETag进行验证。 使用签名或者版本来区分静态资源。\b这样静态资源会生成不同的资源访问链接，不会产生修改之后无法感知的情况。 还有两个本文没有介绍的内容，但是不建议大家使用： 使用\bHTML的meta标签来指定缓存行为 使用查询字符串来避免缓存。因为缓存有一些已知的问题，使用查询字符串会导致有些代理服务器不缓存资源。 五、小试牛刀，看看你掌握了没有？看了这么多内容，是时候来看看成果了。那么一起看下下面的问题吧。 如果首次访问localhost:1030时，页面中 avatar.png 响应头信息如下： 123456HTTP/1.1 200 OKCache-Control: no-cacheContent-Type: image/pngLast-Modified: Tue, 16 Oct 2018 11:42:28 GMTAccept-Ranges: bytesDate: Tue, 16 Oct 2018 15:57:21 GMT 问题1：请问当刷新该页面后，avatar.png如何二次加载？ 问题2：如果将上述信息中的Cache-Control设置为 private，那么结果又会如何呢？ 大家先回忆下上面的内容，思考一下。 试题来源：彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法。在此致谢。 好了公布答案。 问题1：会带着If-Modified-Since和服务端进行验证。未改变返回304，改变返回200。 问题2：Cache-Control设置为 private，这时候会触发启发式缓存，则再次刷新时，avatar.png命中强缓存，从缓存中换取。 总结好了，文章到此结束，希望能对大家有帮助。 致谢感谢《深入浅出Vue.js》作者刘博文对本文提出的宝贵建议。 参考链接 MDN | Cache-Control 彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法 由memoryCache和diskCache产生的浏览器缓存机制的思考 A Web Developer’s Guide to Browser Caching 浏览器缓存机制剖析 HTTP 缓存 Are Your Cache-Control Directives Doing What They Are Supposed to Do? Hypertext Transfer Protocol","categories":[],"tags":[]},{"title":"从撒狗粮带你了解WoT连接场景","slug":"从撒狗粮带你了解WoT连接场景","date":"2018-08-29T02:56:56.000Z","updated":"2018-09-20T07:23:56.514Z","comments":true,"path":"2018/08/29/从撒狗粮带你了解WoT连接场景/","link":"","permalink":"http://verymuch.com/2018/08/29/从撒狗粮带你了解WoT连接场景/","excerpt":"歪马是一名IT男，30岁，单身，之前每年的情人节、七夕节、圣诞节…可以说是没少被“撒狗粮”。这不，歪马今年决定要改变这一现状。而故事就是从这里开始的。 为了避免跑题，笔者表示要强势切入，下面我们先简单介绍下物联网和万维物联网。 一、物联网和万维物联网在最近几年里，物联网（Internet of Things，简称IoT）已经成为了在技术和商业上最有前途、最激动人心的发展领域之一。相信大家对于物联网已经或多或少有些了解。大家也一定使用过类似的产品，如可以远程实时查看录像、同步进行语音通话的360智能摄像机；可以远程控制家用电器开关的智能插座；可以智能检测心率和睡眠的智能手表以及其他一系列智能产品。 物联网是一个物理对象系统，其中的电子设备通过各种各样的网络接口进行通信，从而可以被发现、监控、控制交互，最终可以连接到更大的网络。上面所提到的几种产品即可以认为是其中的电子设备。 万维物联网（Web of Things，简称WoT）是物联网的一种实现方式，它主要致力于建立一种通用的语言，从而让不同厂商的智能产品具有彼此实现互相操作的可能。","text":"歪马是一名IT男，30岁，单身，之前每年的情人节、七夕节、圣诞节…可以说是没少被“撒狗粮”。这不，歪马今年决定要改变这一现状。而故事就是从这里开始的。 为了避免跑题，笔者表示要强势切入，下面我们先简单介绍下物联网和万维物联网。 一、物联网和万维物联网在最近几年里，物联网（Internet of Things，简称IoT）已经成为了在技术和商业上最有前途、最激动人心的发展领域之一。相信大家对于物联网已经或多或少有些了解。大家也一定使用过类似的产品，如可以远程实时查看录像、同步进行语音通话的360智能摄像机；可以远程控制家用电器开关的智能插座；可以智能检测心率和睡眠的智能手表以及其他一系列智能产品。 物联网是一个物理对象系统，其中的电子设备通过各种各样的网络接口进行通信，从而可以被发现、监控、控制交互，最终可以连接到更大的网络。上面所提到的几种产品即可以认为是其中的电子设备。 万维物联网（Web of Things，简称WoT）是物联网的一种实现方式，它主要致力于建立一种通用的语言，从而让不同厂商的智能产品具有彼此实现互相操作的可能。 Web比较适合用来建立这样一种通用的语言，它具备以下4个优点： 更容易编程：万维网协议可以很容易地用来读写设备数据，而且特别简单易用，比复杂的物联网协议学起来更快。 更加开放和可扩展：万维网标准如此流行的原因即因为它们是完全开放和免费的。使用它们能够确保数据可以被快速、方便地跨系统转移，可扩展性更高。 能够快速简单部署、维护与集成。 安全和隐私机制使用的更加广泛。 好了，关于\b物联网和万维物联网的基本介绍就到这里了，本文将主要以一种生动有趣的方式着重介绍下WoT的6种连接场景。 二、WoT的连接场景故事继续，为了改变每年都被别人“撒狗粮”情况，歪马决定改变现状。歪马从小比较喜欢小动物，尤其是聪明温顺的狗狗，这回歪马决定养一只狗狗陪伴自己。这样每次被“撒狗粮”时，可以真真切切的撒回去（不管你觉不觉得这逻辑可爱，笔者觉得挺可爱的）。 歪马养了一只短腿小柯基，并为其起名为大屁，因为柯基一扭一扭的屁股甚是可爱。下面我将带着歪马和大屁一起先介绍下WoT的第一种连接场景。 2.1 场景1：通过Web服务进行设备的控制第一个要说的连接场景是通过Web服务进行设备的控制。 身为IT男的歪马和我们大家一样常常从早忙到晚，不能按时回家，这可苦了他的爱犬大屁，因为大屁经常是吃了上顿没下顿。但歪马又不能不限量地给大屁留狗粮，因为这有可能导致大屁进食过量，健康产生问题。 为了解决大屁吃的既准时又不会过量的问题，歪马花费了不少精力，专门开发了一套基于微信的程序，这样无论身在地球上哪个角落，只要能上网，就不会饿着大屁了。 歪马给大屁注册了一个微信号，需要喂食时，歪马会给大屁发送一条“@大屁 过来吃饭啦”的消息。家中的电脑收到后，就会启动一个扬声器。扬声器中会播放歪马呼唤大屁进食的录音，这样大屁听到声音后就会跑过来，坐在狗粮盆前面等着。此时，一个马达启动，打开粮箱上的活门，里面的狗粮会顺着管子落到大屁的盆里。并且在程序内可以设定每次投放的狗粮量，这样也能保证大屁不会变成一条肥狗啦。 说了这么多，大家可能很懵？故事还不错，但这和IoT/WoT有啥关系呢？又该如何理解这一场景呢？ 现在让我们一起来抽象下。 首先，我们考虑下在歪马家里用于喂狗的这个装置包括哪些东西，我们将其想象成一个整体——自动喂狗装置。 自动化喂狗装置组成部分： 电脑：具有Web服务器功能，可以连接到互联网，可以监听事件，用于接受指令。 \b扬声器：用于播放歪马呼唤大屁进食的录音。 狗粮倾倒装置：启动后可以漏出狗粮，并且可以定量投放，\b投放完毕后关闭。 好了，如上，已经有了一个自动化喂狗装置。这个喂狗装置具有Web服务器功能，能够直接连接到互联网，歪马可以通过连接到互联网的设备（如手机或电脑设备上的浏览器或原生应用）向喂狗装置发送命令，喂狗装置收到后就可以自动喂狗啦。 这一场景就是WoT的第一种连接场景：一个具有Web服务器功能的电子设备可以直接连接到互联网，这时，我们可以通过手机或电脑设备上的浏览器或原生应用，借助互联网（如蜂窝网，运营商网络）对\b电子设备进行控制。 连接场景图示如下： 2.2 场景2：通过本地Web服务进行设备的控制上面的连接场景应该很容易理解。下面我们再考虑下\b下面这个场景： 作为IT男的歪马非常喜爱足球，每逢世界杯比赛时，总免不了全神贯注地观看比赛直播。他为自己在卧室里准备了一个大大的液晶电视，这样每当有球赛的时候就能舒舒服服地观看比赛了。如果看比赛的时候，大屁饿了，他又不想错过直播去给大屁倒狗粮，那么很简单他可以打开电脑或者拿出手机，和在公司上班时一样，远程投放狗粮。 但是，\b事情总会有例外，正值世界杯比赛的某个周末，歪马所在小区的网络故障，没法正常使用了。那么大家觉得歪马的喂狗装置还能不能用呢？ 答案当然是肯定的，作为程序员的歪马深知代码鲁棒性的重要性。所以他设计这套系统已经考虑到这种情况了。在没有联网的情况下，也可以支持本地局域网运行，所以只要家里还有电，喂狗装置和他的手机/电脑处于同一个本地网络，那么他依然可以通过手机/电脑进行喂狗装置的控制。这也就是我们所要介绍的第二种连接场景：一个具有Web服务器功能的电子设备，在没有连接到互联网的情况下，我们可以使用手机或者电脑，通过本地网络对电子设备进行控制。 连接场景图示如下： 2.3 场景3：使用蓝牙遥控器进行设备的控制有点时候拿出手机/电脑再进行控制多少有些麻烦，相对而言我们使用的电视遥控器反而更加简单。但是电视之类的遥控器，因为是红外设备，需要对准，而歪马又不能保证能够随时对准喂狗装置的所在。 于是歪马想到了一个点子，他给喂狗装置添加了蓝牙设备，并且使用蓝牙设备制作了一款遥控器，这样只要两个蓝牙设备配对后，在房间内的任意位置（一定范围内）都可以进行设备的控制了。 怎么样，歪马是不是很厉害，他上面所做的这一改变就是\bWoT的第三种连接场景：如果设备存在某种限制不能连接到互联网，那么其可以通过蓝牙等设备进行连接，这样即可通过遥控器对设备进行控制。（当然，红外设备也是可以的，下面我们要介绍的场景与其类似）。 连接场景图示如下： 2.4 场景4：使用感应器进行设备的控制解决了大屁吃饭的问题后，\b还有一个同样重要的问题，那就是喝水的问题。 夏天天气热，狗狗又非常怕热，歪马每天上班都会给大屁倒满满一盆的水，但是回家之后，总会被喝的精光。换个能盛更多水的大盆又怕夏天容易滋生细菌。 为了解决大屁喝水的问题，歪马想到了一个好点子，\b他买了一个水位感应器安装在了水盆内，当大屁把水喝的精光时，水位感应器感应到没有水后，会向水箱发送一个没水的信号，水箱中的控制代理接收到信号后，会打开水箱自动向水盆注入3/4的水。如此一来，歪马只要定期向水箱中添加纯净水就行了，大屁也能放心地喝水啦。 使用感应器进行设备的控制即为WoT的第四种连接场景：利用感应器探测到某一条件到达指定值时，\b设备检测到这一变化后，可以做出相应的动作。 连接场景图示如下： 2.5 场景5：使用网关进行中转场景4中的智能水箱中使用的控制代理属于比较旧的设备，而感应器有时候又不是那么灵敏，可能要等水没有一段时间后才会加水。 于是歪马在想，如果也能够远程进行水箱的控制就好了。由于\b水箱的控制代理和感应器没法直接连接到互联网，于是他在本地网络和互联网之间加入了网关，通过网关来进行中转。这样即使是感应器这样的设备也也能够通过网关连接到互联网，能够实时将水箱中的剩余水量上报到服务器中。歪马可以直接远程查看，当歪马远程喂食的时候\b，如果发现水盆中水量不多时，可以直接定量加满即可。 上面这种使用网关进行中转的方式即为WoT的第五种连接场景：如果存在不能直接连接到互联网的设备或者使用其他协议的设备时，可以通过在本地网络和互联网之间添加网关，借助网关来进行中转。本地设备有状态发生变化时，可以通过网关转换后进行上报。远程有新的指令达到时，也可以通过网关转换后下达给指定设备。 连接场景图示如下： 2.6 场景6：使用云来管理设备机会总是会降临到有准备的人头上。 虽然歪马从来没有想过为大屁开发的这款智能喂狗装置会给自己带来什么。但这款喂狗装置被商界人士得知后，有人联系歪马，想要进行投资量产。歪马当然欣然接受了合作。于是和合作公司开始讨论喂狗装置如何量产，还有哪些功能需要优化。 其中就有这样一个问题，如果设备被量产的话，不可能每个人的喂狗装置都和自己的控制设备直接连接，这时候就需要有一个云服务器来进行云端存储。每个人的喂狗装置通过用户自己的账号，连接到云端，喂狗装置的各部件会实时将自身的状态同步到云端。用户打开控制设备后，会同步各部件的状态。用户可以通过控制设备下发指令，指令通过云端进行中转，然后下发到喂狗装置。这样做还有一个好处，如果喂狗装置出现临时断线等情况时，控制设备所发送的指令也会在云端临时存储，在装置接入后继续下达指令。 上面这种情况即为WoT的第六种连接场景：云端就绪的设备直接连接到云端，其自身的状态会在云端做个镜像，这个镜像会充当一个代理，用于接收远程控制设备的指令。 连接场景图示如下： 三、多场景共存上面分别介绍了WoT的6种独立连接场景，\b其实这些连接场景是可以共存的，汇总到一起后如下图所示： 好了，WoT的连接场景介绍完毕了。最后问一句\b，你觉得歪马这狗粮撒的如何？ 致谢感谢奇舞团小伙伴李冬杰对本文的审校与意见。 参考文献 英国IT男因工作繁忙写程序远程喂狗 WoT技术架构（草案） [书]从物联到万联","categories":[],"tags":[{"name":"WoT","slug":"WoT","permalink":"http://verymuch.com/tags/WoT/"}]},{"title":"W3C标准导读之【标准化过程】","slug":"W3C标准导读之标准化过程","date":"2018-08-19T13:40:37.000Z","updated":"2018-08-27T13:07:01.950Z","comments":true,"path":"2018/08/19/W3C标准导读之标准化过程/","link":"","permalink":"http://verymuch.com/2018/08/19/W3C标准导读之标准化过程/","excerpt":"本文作者：高峰，360奇舞团前端工程师，W3C性能工作组成员，同时参与WOT工作组的学习。 一、引言W3C的标准很多，你看或不看，它都在那，有增无减。既然如此，那我们为什么要读标准呢？笔者认为可能有以下4点原因：","text":"本文作者：高峰，360奇舞团前端工程师，W3C性能工作组成员，同时参与WOT工作组的学习。 一、引言W3C的标准很多，你看或不看，它都在那，有增无减。既然如此，那我们为什么要读标准呢？笔者认为可能有以下4点原因： 有一颗贡献标准的心，想要通过自己的努力为标准作出贡献； 对知识内容有执着的追求，想通过标准来彻底了解某些知识点； 熟悉标准已经成为我们应聘时的加分项甚至是基本项，我们不得不学； 当然，我们还可以通过学习W3C标准来提升英语阅读能力以及写作缜密性。 或许你阅读标准的理由不是上面之一，但我们总归是要开始读标准了，不是吗？开始之前，我们准确地了解下W3C是什么。 万维网联盟（World Wide Web Consortium，以下简称W3C）创建于1994年，是Web技术领域最具权威和影响力的国际中立性技术标准机构。它的使命是开发促进万维网发展、确保万维网互操作性的通用协议，从而尽展万维网的全部潜能。 W3C一共有36个工作组（截止至2018年8月21日，本文书写时间），已经制定了200多个标准。如此多的工作组是如何有序而又保证质量地完成如此多的标准制定的呢？正所谓没有规矩不成方圆，如此庞大的工作必然需要一个准则，所以W3C制定了流程文档1。该文档描述了W3C的组织结构以及为完成W3C自身使命而履行的职责和职能相关的流程。 流程文档的主要受众是标准制定相关成员，但是其中也有一部分内容有助于作为读者的我们理清阅读的思路，笔者即将这一部分提取出来，以供大家阅读。 那么，我们先从简单了解Web技术标准化的过程概览开始吧。 二、Web技术标准化过程概览通常情况下，W3C标准的标准化过程包括以下几步： 首先，有人开始对某个特定的话题产生兴趣。 当这个特定话题的关注度越来越高时，W3C主任会宣布为一个或多个兴趣组以及工作组开发提案章程。W3C成员审查提案章程。 当W3C内部有人支持在某个被关注的主题上投入资源时，W3C主任会批准成立工作组，该小组正式开始工作。 工作组章程包含了每个小组期望的可交付成果，工作组会按照这一期望建立标准和指南。 这些标准和指南需要经过反复的修订和审核，要接受W3C成员和大众的审核，且要满足实现和互操作性方面的要求。 最后，顾问委员会审查成熟的技术报告，如果通过则发布为标准 上述是标准产生的一个简要过程，具体的过程包括标准化过程中所涉及的组以及标准所经历的版本（或成熟度等级）下面会详细介绍。我们先从标准化过程中所涉及的组开始。 三、W3C中的组上面的标准化流程概览中提到了很多参与者，下面我们来具体介绍下，W3C标准制作过程中所涉及的各个组，主要包括以下5个。 顾问委员会 顾问委员会（Advisory Committee，简称AC）由来自各个成员组织2的代表组成，每个组织一个代表（参见AC列表3）。 他们主要负责以下工作： 在每次的顾问委员会会议上审查W3C的计划; 审查W3C主任（W3C Director）给出的正式提案，包括章程提案、提案标准以及提案的流程文档。 推选董事会（Advisory Board）成员而非董事会主席 推选技术架构组的大多数参与者 董事会 董事会（Advisory Board，简称AB）创建于1998年3月，它会就战略、管理、法律事务、流程和冲突解决等问题向团队提供持续指导。也通过记录顾问委员会会议之间提出的问题，征求成员们对此类问题的意见以及提出解决这些问题的行动，为成员们提供服务。 与顾问委员会的主要不同在于董事会在W3C内没有决策权，它的作用是仅限于咨询。 技术架构组 技术架构组（Technical Architecture Group，简称TAG）创建于2001年2月，主要任务是管理Web架构，可以分为以下三个方面： 建立Web架构原则相关共识，并形成文档，在必要的时候对这些原则进行解释和阐明。 解决涉及TAG的通用Web架构问题; 帮助协调W3C内外部跨技术架构的开发。 工作组 工作组（Working Group）是某一Web技术的具体制定者，通常会产生一系列的可交付成果（例如标准跟踪技术报告、软件、测试套件以及其他组可交付成果的审查）。 兴趣组 兴趣小组的主要目标是将有意评估潜在Web技术和策略的人员聚集在一起，便于他们交流想法。 四、技术报告的成熟度等级说完标准化过程中所涉及的组，我们再来了解一下标准所经历的版本，用流程文档中的话说是技术报告的成熟度等级。技术报告即为上述提到的工作组所产生的标准或指南等，可以在技术报告页4查看已发布的技术报告。 W3C的技术报告的成熟度划分为如下6个等级。 工作草案（Working Draft，简称WD） 工作草案是W3C发布的文档，供W3C成员，公众和其他技术组织审查。大多数工作草案都旨在推进成为标准，如果不再想推进成标准，则应当发布为工作组笔记。 值得一提的是，工作组草案不一定代表整个工作组的共识，并且也不代表W3C已经认可，因为现阶段W3C或其成员仅是同意其在某个通用技术领域成立工作组。 候选标准（Candidate Recommendation，简称CR） 如果工作草案满足了对应工作组的技术要求或者没有再进行实质性的修改（#如何区分实质性的改动，见下文#），并且已经通过广泛的审查（工作草案中提到的审查，加粗部分），则可以发布成为候选标准。发布为候选标准则意味着： 告诉广大社区，是时候进行最后的审查了 收集实现方案 由顾问委员会开始正式审查，这时这一标准可能有三个结果：推荐为W3C标准、返回工作组继续完善或者废弃。 注：候选标准已经有望成为标准，这一阶段如果再有改动，需要给出改动的原因。 提案标准（Proposed Recommendation，简称PR） 提案标准表示该文档已经被W3C主任所接受并认为其质量足以成为正式的W3C标准。进入这一阶段后会给顾问委员会设定一个具体的审查截止日期。这一阶段不能再有实质性的改动了，如果有的话只能再发布一个新的工作草案和候选标准。 正式标准（W3C Recommendation，简称REC） W3C正式标准是一份规范、一套指南或要求，已达成广泛的共识，并且获得了W3C成员和主任的认可。W3C会推荐其作为Web标准进行实施。 虽然经过了重重的努力和审查才形成了每一份标准，但是人无完人，标准也可能会有一定的缺陷。随着科技的进步，正式的标准有可能会演变成以下4种： 修订标准：工作组可能会对标准进行编辑或者其他细微的改动，W3C会发布一个新的修订版本。 编辑标准：该标准添加了不包含新特性的实质性改动时，并且该标准已经不属于现有的活跃工作组，由W3C团队完成整个制作过程。 过时标准：当一个标准缺乏足够的市场相关性来推进其实施，但其本身没有本质的问题需要被废弃时，就会变成一个过时标准。如果过时标准重新获得了足够的市场相关性，W3C可以将其恢复到推荐状态。 被取代的标准：当一个标准被W3C推荐用一个更新后的版本取代时，该标准则变为被取代的标准。 废弃标准（Rescinded Recommendation） 废弃标准是W3C不再认可、同时认为其不太可能再恢复到标准状态的标准。 工作组/兴趣组笔记（Working Group Note/Interest Group Note，简称笔记） 工作组/兴趣组笔记主要是为了记录有用但不会成为标准的文档，或者是没能成为标准时所要放弃的工作。 此外，工作组和兴趣小组可能还会提供“编辑草案”。需要知道的是，编辑草案没有任何官方声明，没有在组内达成共识，也没有W3C的认可。这一版本会因为小组成员的讨论而持续变动。 如何区分实质性改动和编辑性改动？前面提到了实质性改以及与其对应的编辑性改动，那么如何区分一个改动究竟是哪种改动呢？ 标准的改动可以分为以下四类。其中前两类是编辑性改动，后两类是实质性改动。 无文字内容改动：包括修复损坏的链接、样式文件或无效标记。 不影响一致性的改动：实现者不会将其理解成架构、互操作性要求或者实现方案更改的改动。 可能影响一致性的改动 符合要求的数据、处理器或者其他代理在新版本中不再符合要求。 不符合要求的数据、处理器或者其他代理在新版本中符合要求。 清除了规范中含糊不清的或不明确的部分。 新特性：添加了一个新功能或者元素等。 五、完整的开发流程上面介绍完了标准化过程中所涉及的组、标准所经历的版本，相信大家从中已经能对标准的开发流程有一定的了解了。下面我们再图文并茂地完整地梳理一遍标准的开发流程。 一份技术报告推进成标准的过程，主要遵循下面这些步骤，可以结合下图查看： 发布初版工作草案 发布0个及以上的修订版工作草案 发布候选标准 发布提案标准 发布W3C标准 可能会发布的编辑标准和修订标准 上面提到正式的标准也会存在一定的变动，对已有标准进行编辑所遵循的过程可以参见下图黑色加粗部分。 从图中可以看出，如果改动不是实质性改动，则直接发布一个修订版本。如果是实质性改动，但没有增加新特性，则可以直接发布一个新的候选标准。如果是新的特性则需要从工作草案阶段进行整个开发流程。 总结至此介绍完了关于W3C标准的标准化流程，本文谨代表笔者对于万维网联盟流程文档的理解，加之流程文档也会不断地进行更新，所以如本文与流程文档有冲突，请以文档为主。 文内链接 https://www.w3.org/2018/Process-20180201/#tag-participation https://www.w3.org/Consortium/Member/List https://www.w3.org/Member/ACList https://www.w3.org/TR/ 参考链接 万维网联盟流程文档","categories":[],"tags":[]},{"title":"CSS性能优化的8个技巧","slug":"CSS性能优化的8个技巧","date":"2018-07-22T15:49:10.000Z","updated":"2018-08-13T10:50:43.241Z","comments":true,"path":"2018/07/22/CSS性能优化的8个技巧/","link":"","permalink":"http://verymuch.com/2018/07/22/CSS性能优化的8个技巧/","excerpt":"本文作者：高峰，360奇舞团前端工程师，W3C性能工作组成员，同时参与WOT工作组的学习。 我们都知道对于网站来说，性能至关重要，CSS作为页面渲染和内容展现的重要环节，影响着用户对整个网站的第一体验。因此，与其相关的性能优化是不容忽视的。 对于性能优化我们常常在项目完成时才去考虑，经常被推迟到项目的末期，甚至到暴露出严重的性能问题时才进行性能优化，相信大多数人对此深有体会。 笔者认为，为了更多地避免这一情况，首先要重视起性能优化相关的工作，将其贯穿到整个产品设计与开发中。其次，就是了解性能相关的内容，在项目开发过程中，自然而然地进行性能优化。最后，也是最最重要的，那就是从现在开始实施优化。 推荐大家阅读下奇舞周刊之前推的《嗨，送你一张Web性能优化地图》1这篇文章，能够帮助大家对性能优化需要做的事以及需要考虑的问题形成一个整体的概念。 本文将会详细介绍CSS性能优化相关的技巧，笔者将它们分为实践型和建议型两类，共8个小技巧。实践型技巧能够快速地应用在项目中，能够很好地提升性能，也是笔者经常使用的，建议大家尽快在项目中实践。建议型技巧中，有的可能对性能影响并不显著，有的平时大家也并不会那么用，所以笔者不会着重讲述，读者们可以根据自身情况了解一下即可。","text":"本文作者：高峰，360奇舞团前端工程师，W3C性能工作组成员，同时参与WOT工作组的学习。 我们都知道对于网站来说，性能至关重要，CSS作为页面渲染和内容展现的重要环节，影响着用户对整个网站的第一体验。因此，与其相关的性能优化是不容忽视的。 对于性能优化我们常常在项目完成时才去考虑，经常被推迟到项目的末期，甚至到暴露出严重的性能问题时才进行性能优化，相信大多数人对此深有体会。 笔者认为，为了更多地避免这一情况，首先要重视起性能优化相关的工作，将其贯穿到整个产品设计与开发中。其次，就是了解性能相关的内容，在项目开发过程中，自然而然地进行性能优化。最后，也是最最重要的，那就是从现在开始实施优化。 推荐大家阅读下奇舞周刊之前推的《嗨，送你一张Web性能优化地图》1这篇文章，能够帮助大家对性能优化需要做的事以及需要考虑的问题形成一个整体的概念。 本文将会详细介绍CSS性能优化相关的技巧，笔者将它们分为实践型和建议型两类，共8个小技巧。实践型技巧能够快速地应用在项目中，能够很好地提升性能，也是笔者经常使用的，建议大家尽快在项目中实践。建议型技巧中，有的可能对性能影响并不显著，有的平时大家也并不会那么用，所以笔者不会着重讲述，读者们可以根据自身情况了解一下即可。 在正式开始之前，需要大家对于浏览器的工作原理2有些一定的了解，需要的小伙伴可以先简单了解下。 下面我们开始介绍实践型的4个优化技巧，先从首屏关键CSS开始。 1. 内联首屏关键CSS（Critical CSS）性能优化中有一个重要的指标——首次有效绘制（First Meaningful Paint，简称FMP）即指页面的首要内容（primary content）出现在屏幕上的时间。这一指标影响用户看到页面前所需等待的时间，而内联首屏关键CSS（即Critical CSS，可以称之为首屏关键CSS）能减少这一时间。 大家应该都习惯于通过link标签引用外部CSS文件。但需要知道的是，将CSS直接内联到HTML文档中能使CSS更快速地下载。而使用外部CSS文件时，需要在HTML文档下载完成后才知道所要引用的CSS文件，然后才下载它们。所以说，内联CSS能够使浏览器开始页面渲染的时间提前，因为在HTML下载完成之后就能渲染了。 既然内联CSS能够使页面渲染的开始时间提前，那么是否可以内联所有的CSS呢？答案显然是否定的，这种方式并不适用于内联较大的CSS文件。因为初始拥塞窗口3存在限制（TCP相关概念，通常是 14.6kB，压缩后大小），如果内联CSS后的文件超出了这一限制，系统就需要在服务器和浏览器之间进行更多次的往返，这样并不能提前页面渲染时间。因此，我们应当只将渲染首屏内容所需的关键CSS内联到HTML中。 既然已经知道内联首屏关键CSS能够优化性能了，那下一步就是如何确定首屏关键CSS了。显然，我们不需要手动确定哪些内容是首屏关键CSS。Github上有一个项目Critical CSS4，可以将属于首屏的关键样式提取出来，大家可以看一下该项目，结合自己的构建工具进行使用。当然为了保证正确，大家最好再亲自确认下提取出的内容是否有缺失。 不过内联CSS有一个缺点，内联之后的CSS不会进行缓存，每次都会重新下载。不过如上所说，如果我们将内联后的文件大小控制在了14.6kb以内，这似乎并不是什么大问题。 如上，我们已经介绍了为什么要内联关键CSS以及如何内联，那么剩下的CSS我们怎么处理好呢？建议使用外部CSS引入剩余CSS，这样能够启用缓存，除此之外还可以异步加载它们。 2. 异步加载CSSCSS会阻塞渲染，在CSS文件请求、下载、解析完成之前，浏览器将不会渲染任何已处理的内容。有时，这种阻塞是必须的，因为我们并不希望在所需的CSS加载之前，浏览器就开始渲染页面。那么将首屏关键CSS内联后，剩余的CSS内容的阻塞渲染就不是必需的了，可以使用外部CSS，并且异步加载。 那么如何实现CSS的异步加载呢？有以下四种方式可以实现浏览器异步加载CSS。 第一种方式是使用JavaScript动态创建样式表link元素，并插入到DOM中。 123456// 创建link标签const myCSS = document.createElement( \"link\" );myCSS.rel = \"stylesheet\";myCSS.href = \"mystyles.css\";// 插入到header的最后位置document.head.insertBefore( myCSS, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling ); 第二种方式是将link元素的media属性设置为用户浏览器不匹配的媒体类型（或媒体查询），如media=&quot;print&quot;，甚至可以是完全不存在的类型media=&quot;noexist&quot;。对浏览器来说，如果样式表不适用于当前媒体类型，其优先级会被放低，会在不阻塞页面渲染的情况下再进行下载。 当然，这么做\b只是为了实现CSS的异步加载，\b别忘了在文件加载完成之后，将media的值设为screen或all，从而让浏览器开始解析CSS。 1&lt;link rel=\"stylesheet\" href=\"mystyles.css\" media=\"noexist\" onload=\"this.media='all'\"&gt; 与第二种方式相似，我们还可以通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel改回去。 1&lt;link rel=\"alternate stylesheet\" href=\"mystyles.css\" onload=\"this.rel='stylesheet'\"&gt; 上述的三种方法都较为古老。现在，rel=”preload”5这一Web标准指出了如何异步加载资源，包括CSS类资源。 1&lt;link rel=\"preload\" href=\"mystyles.css\" as=\"style\" onload=\"this.rel='stylesheet'\"&gt; 注意，as是必须的。忽略as属性，或者错误的as属性会使preload等同于XHR请求，浏览器不知道加载的是什么内容，因此此类资源加载优先级会非常低。as的可选值可以参考上述标准文档。 看起来，rel=&quot;preload&quot;\u001d的用法和上面两种没什么区别，都是通过更改某些属性，使得浏览器异步加载CSS文件但不解析，直到加载完成并将修改还原，然后开始解析。 但是它们之间其实有一个很重要的不同点，那就是使用preload，比使用不匹配的media方法能够更早地开始加载CSS。所以尽管这一标准的支持度还不完善，仍建议优先使用该方法。 该标准现在已经是候选标准，相信浏览器会逐渐支持该标准。\b在各浏览器的支持度如下图所示。 从上图可以看出这一方法\b在现在的浏览器中支持度不算乐观，不过我们可以通过loadCSS6进行polyfill，所以支持不支持，这都不是事儿。 3. 文件压缩性能优化时有一个最容易想到，也最常使用的方法，那就是文件压缩，这一方案往往效果显著。 文件的大小会直接影响浏览器的加载速度，这一点在网络较差时表现地尤为明显。相信大家都早已习惯对CSS进行压缩，现在的构建工具，如webpack、gulp/grunt、rollup等也都支持CSS压缩功能。压缩后的文件能够明显减小，可以大大降低了浏览器的加载时间。 4. 去除无用CSS虽然文件压缩能够降低文件大小。但CSS文件压缩通常只会去除无用的空格，这样就限制了CSS文件的压缩比例。那是否还有其他手段来精简CSS呢？答案显然是肯定的，如果压缩后的文件仍然超出了预期的大小，我们可以试着找到并删除代码中无用的CSS。 一般情况下，会存在这两种无用的CSS代码：一种是不同元素或者其他情况下的重复代码，一种是整个页面内没有生效的CSS代码。对于前者，在编写的代码时候，我们应该尽可能地提取公共类，减少重复。对于后者，在不同开发者进行代码维护的过程中，总会产生不再使用的CSS的代码，当然一个人编写时也有可能出现这一问题。而这些无用的CSS代码不仅会增加浏览器的下载量，还会增加浏览器的解析时间，这对性能来说是很大的消耗。所以我们需要找到并去除这些无用代码。 当然，如果手动删除这些无用CSS是很低效的。我们可以借助Uncss7库来进行。Uncss可以用来移除样式表中的无用CSS，并且支持多文件和JavaScript注入的CSS。 前面已经说完了实践型的4个优化技巧，下面我们介绍下建议型的4个技巧。 1. 有选择地使用选择器大多数朋友应该都知道CSS选择器的匹配是从右向左进行的，这一策略导致了不同种类的选择器之间的性能也存在差异。相比于#markdown-content-h3，显然使用#markdown .content h3时，浏览器生成渲染树（render-tree）所要花费的时间更多。因为后者需要先找到DOM中的所有h3元素，再过滤掉祖先元素不是.content的，最后过滤掉.content的祖先不是#markdown的。试想，如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高。 不过现代浏览器在这一方面做了很多优化，不同选择器的性能差别并不明显，甚至可以说差别甚微。此外不同选择器在不同浏览器中的性能表现8也不完全统一，在编写CSS的时候无法兼顾每种浏览器。鉴于这两点原因，我们在使用选择器时，只需要记住以下几点，其他的可以全凭喜好。 保持简单，不要使用嵌套过多过于复杂的选择器。 通配符和属性选择器效率最低，需要匹配的元素最多，尽量避免使用。 不要使用类选择器和ID选择器修饰元素标签，如h3#markdown-content，这样多此一举，还会降低效率。 不要为了追求速度而放弃可读性与可维护性。 如果大家对于上面这几点还存在疑问，笔者建议大家选择以下几种CSS方法论之一（BEM9，OOCSS10，SUIT11，SMACSS12，ITCSS13，Enduring CSS14等）作为CSS编写规范。使用统一的方法论能够帮助大家形成统一的风格，减少命名冲突，也能避免上述的问题，总之好处多多，如果你还没有使用，就赶快用起来吧。 Tips：为什么CSS选择器是从右向左匹配的？CSS中更多的选择器是不会匹配的，所以在考虑性能问题时，需要考虑的是如何在选择器不匹配时提升效率。从右向左匹配就是为了达成这一目的的，通过这一策略能够使得CSS选择器在不匹配的时候效率更高。这样想来，在匹配时多耗费一些性能也能够想的通了。 2. 减少使用昂贵的属性在浏览器绘制屏幕时，所有需要浏览器进行操作或计算的属性相对而言都需要花费更大的代价。当页面发生重绘时，它们会降低浏览器的渲染性能。所以在编写CSS时，我们应该尽量减少使用昂贵属性，如box-shadow/border-radius/filter/透明度/:nth-child等。 当然，并不是让大家不要使用这些属性，因为这些应该都是我们经常使用的属性。之所以提这一点，是让大家对此有一个了解。当有两种方案可以选择的时候，可以优先选择没有昂贵属性或昂贵属性更少的方案，如果每次都这样的选择，网站的性能会在不知不觉中得到一定的提升。 3. 优化重排与重绘在网站的使用过程中，某些操作会导致样式的改变，这时浏览器需要检测这些改变并重新渲染，其中有些操作所耗费的性能更多。我们都知道，当FPS为60时，用户使用网站时才会感到流畅。这也就是说，我们需要在16.67ms内完成每次渲染相关的所有操作，所以我们要尽量减少耗费更多的操作。 3.1 减少重排重排会导致浏览器重新计算整个文档，重新构建渲染树，这一过程会降低浏览器的渲染速度。如下所示，有很多操作会触发重排，我们应该避免频繁触发这些操作。 改变font-size和font-family 改变元素的内外边距 通过JS改变CSS类 通过JS获取DOM元素的位置相关属性（如width/height/left等） CSS伪类激活 滚动滚动条或者改变窗口大小 此外，我们还可以通过CSS Trigger15查询哪些属性会触发重排与重绘。 值得一提的是，某些CSS属性具有更好的重排性能。如使用Flex时，比使用inline-block和float时重排更快，所以在布局时可以优先考虑Flex。 3.2 避免不必要的重绘当元素的外观（如color，background，visibility等属性）发生改变时，会触发重绘。在网站的使用过程中，重绘是无法避免的。不过，浏览器对此做了优化，它会将多次的重排、重绘操作合并为一次执行。不过我们仍需要避免不必要的重绘，如页面滚动时触发的hover事件，可以在滚动的时候禁用hover事件，这样页面在滚动时会更加流畅。 此外，我们编写的CSS中动画相关的代码越来越多，我们已经习惯于使用动画来提升用户体验。我们在编写动画时，也应当参考上述内容，减少重绘重排的触发。除此之外我们还可以通过硬件加速16和will-change17来提升动画性能，本文不对此展开详细介绍，感兴趣的小伙伴可以点击链接进行查看。 最后需要注意的是，用户的设备可能并没有想象中的那么好，至少不会有我们的开发机器那么好。我们可以借助Chrome的开发者工具进行CPU降速，然后再进行相关的测试，降速方法如下图所示。 如果需要在移动端访问的，最好将速度限制更低，因为移动端的性能往往更差。 4. 不要使用@import最后提一下，不要使用@import引入CSS，相信大家也很少使用。 不建议使用@import主要有以下两点原因。 首先，使用@import引入CSS会影响浏览器的并行下载。使用@import引用的CSS文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。这就导致浏览器无法并行下载所需的样式文件。 其次，多个@import会导致下载顺序紊乱。在IE中，@import会引发资源文件的下载顺序被打乱，即排列在@import后面的js文件先于@import下载，并且打乱甚至破坏@import自身的并行下载。 所以不要使用这一方法，使用link标签就行了。 总结至此，我们介绍完了CSS性能优化的4个实践型技巧和4个建议型技巧，在了解这些技巧之后，CSS的性能优化从现在就可以开始了。不要犹豫了，尽快开始吧。 致谢特别感谢@anjia(安佳)、@刘宇晨、@hxl(黄小璐)、@刘观宇的辛苦审校，感谢你们对于文章结构和内容提出的宝贵建议。 文内链接 https://mp.weixin.qq.com/s/C2Zx3KPNPkgj-aHnOY43Iw https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/ https://tylercipriani.com/blog/2016/09/25/the-14kb-in-the-tcp-initial-window/ https://github.com/filamentgroup/criticalCSS https://www.w3.org/TR/preload/ https://github.com/filamentgroup/loadCSS/tree/v2.0.1#loadcss https://github.com/uncss/uncss https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/#h-H1_1 https://en.bem.info/methodology/quick-start/ http://oocss.org/ https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md https://smacss.com/ https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/ http://ecss.io/ https://csstriggers.com/ https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/ https://drafts.csswg.org/css-will-change/ 参考文章 Efficiently Rendering CSS How to write CSS for a great performance web application CSS performance revisited: selectors, bloat and expensive styles Avoiding Unnecessary Paints Five CSS Performance Tools to Speed up Your Website How and Why You Should Inline Your Critical CSS Render blocking css Modern Asynchronous CSS Loading Preload","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://verymuch.com/tags/CSS/"}]},{"title":"如何清除行内元素之间的HTML空白","slug":"如何清除行内元素之间的HTML空白","date":"2018-05-23T10:00:48.000Z","updated":"2018-11-12T00:36:45.214Z","comments":true,"path":"2018/05/23/如何清除行内元素之间的HTML空白/","link":"","permalink":"http://verymuch.com/2018/05/23/如何清除行内元素之间的HTML空白/","excerpt":".Resolve { width: 90%; border: 1px solid #dd4b39; color: white; } .Resolve span { display:inline-block; width: 50%; } .Resolve span:first-child { height: 40px; background: #37b8ea; } .Resolve span:last-child { height: 30px; background: #5cb767; } /* 解决方案2 */ .Resolve2 { font-size: 0; } .Resolve2 span { font-size: 14px; } /* 解决方案3 */ .Resolve3 span:last-child { margin-left: -0.333333em; } /* 解决方案4 */ .Resolve4 { letter-spacing: -0.333333em; } .Resolve4 span { letter-spacing: 0; } 前言相信大家应该都遇到过下面这个问题：“HTML源码中行内元素之间的空白显示在了屏幕上”。可能大家都有自己的小技巧来消除这些意料之外的空白。但是方法有很多，有时候不能满足于一种方法，不同的方法适合于不同的场景。就像我之前一直用的方法，今天总结了之后才发现还有更好的方法。废话不多说，接下来我给大家总结一下消除行内元素HTML源码空白的小技巧。 下文中以一个div中的两个span标签为例。我们将两个div内的两个span设为display:inline-block;width:50%;，会发现两个span元素并没有在同一行，这就是源码中的空白导致的。 示例图与代码如下： 左侧行内元素 右侧行内元素","text":".Resolve { width: 90%; border: 1px solid #dd4b39; color: white; } .Resolve span { display:inline-block; width: 50%; } .Resolve span:first-child { height: 40px; background: #37b8ea; } .Resolve span:last-child { height: 30px; background: #5cb767; } /* 解决方案2 */ .Resolve2 { font-size: 0; } .Resolve2 span { font-size: 14px; } /* 解决方案3 */ .Resolve3 span:last-child { margin-left: -0.333333em; } /* 解决方案4 */ .Resolve4 { letter-spacing: -0.333333em; } .Resolve4 span { letter-spacing: 0; } 前言相信大家应该都遇到过下面这个问题：“HTML源码中行内元素之间的空白显示在了屏幕上”。可能大家都有自己的小技巧来消除这些意料之外的空白。但是方法有很多，有时候不能满足于一种方法，不同的方法适合于不同的场景。就像我之前一直用的方法，今天总结了之后才发现还有更好的方法。废话不多说，接下来我给大家总结一下消除行内元素HTML源码空白的小技巧。 下文中以一个div中的两个span标签为例。我们将两个div内的两个span设为display:inline-block;width:50%;，会发现两个span元素并没有在同一行，这就是源码中的空白导致的。 示例图与代码如下： 左侧行内元素 右侧行内元素 HTML： 1234&lt;div class=\"Resolve\"&gt; &lt;span&gt;左侧行内元素&lt;/span&gt; &lt;span&gt;右侧行内元素&lt;/span&gt;&lt;/div&gt; CSS： 1234567891011121314151617.Resolve &#123; width: 90%; border: 1px solid #dd4b39; color: white;&#125;.Resolve span &#123; display:inline-block; width: 50%;&#125;.Resolve span:first-child &#123; height: 40px; background: #37b8ea;&#125;.Resolve span:last-child &#123; height: 30px; background: #5cb767;&#125; 解决方案1：源码中直接就写成一行相信大家看到这个解决方案的时候，会想这不是废话嘛。有时候我们就是为了代码的美观，才将两个span标签分两行显示的，写在一行根本就没解决问题好不好？ 不过，我觉得这并不是废话，之所以将其列为一种解决方案，是防止有的人不知道是什么原因导致的空白的显示。知道了这个原因，如果两个行内元素的横向宽度(此处指代码宽度)不大，写在一行也算是最快最直接的解决方法。 示例图与代码如下： 左侧行内元素右侧行内元素 HTML： 123&lt;div class=\"Resolve Resolve1\"&gt; &lt;span&gt;左侧行内元素&lt;/span&gt;&lt;span&gt;右侧行内元素&lt;/span&gt;&lt;/div&gt; 解决方案2：font-size: 0; （笔者一直使用的方法）问题中span标签之间的空白是因为换行符/Tab制表符/空格等产生的间隔，并且据笔者测试，得出这个距离是字体大小的1/3倍（请先记住这个值）。那么既然空格和字体大小font-size相关。那么也可以通过字体大小来消除这个空隙。 在父级元素上设置font-size: 0;，然后再在内部的span设置需要的字体大小即可。 示例图与代码如下： 左侧行内元素 右侧行内元素 HTML： 1234&lt;div class=\"Resolve Resolve2\"&gt; &lt;span&gt;左侧行内元素&lt;/span&gt; &lt;span&gt;右侧行内元素&lt;/span&gt;&lt;/div&gt; CSS： 123456.Resolve2 &#123; font-size: 0;&#125;.Resolve2 span &#123; font-size: 14px;&#125; 这种情况在内部的行内元素字体大小比较统一时，处理起来较为方便，但如果包含的行内元素中存在多种字体大小，需要一一指定，较为繁琐。不过往往这种时候内部的多种字体大小也是单独指定。可以根据具体场景决定是否使用该方案。 解决方案3：margin-left设为负值如果行内元素为块级行内元素，则可以使用margin属性来抵消空白。在【解决方案2】中有提到行内元素之间的距离是字体大小的1/3倍。所以我们只需要将第二个span元素的margin-left设置为-0.333333em即可。 示例图与代码如下： 左侧行内元素 右侧行内元素 HTML： 1234&lt;div class=\"Resolve Resolve3\"&gt; &lt;span&gt;左侧行内元素&lt;/span&gt; &lt;span&gt;右侧行内元素&lt;/span&gt;&lt;/div&gt; CSS： 123.Resolve3 span:last-child &#123; margin-left: -0.333333em;&#125; 不过从上面可以看出，最右边还会存在一点点的白边误差。这是由于margin-left的计算精度导致的。所以为避免效果误差，不建议使用该方法。 解决方案4：letter-spacing消除文字间距离同方案2、方案3，我们还可以通过letter-spacing改变行内元素之间空隙的大小，将letter-spacing设为-0.333333em即可。但是与font-size一样，改变letter-spacing时会改变内部子元素的间隙，需要在子元素内手动进行矫正。 示例图与代码如下： 左侧行内元素 右侧行内元素 HTML： 1234&lt;div class=\"Resolve Resolve4\"&gt; &lt;span&gt;左侧行内元素&lt;/span&gt; &lt;span&gt;右侧行内元素&lt;/span&gt;&lt;/div&gt; CSS： 123456.Resolve4 &#123; letter-spacing: -0.333333em;&#125;.Resolve4 span &#123; letter-spacing: 0;&#125; 解决方案5：HTML注释（推荐使用）除了调整css样式之外，我们可以使用html注释来抵消空格，这种情况下不用额外进行css处理。此外笔者觉得还有一个好处，可以加上文字注释，告知为什么会加入注释。 推荐使用该方式，能够有效保持代码整齐，并且不用额外添加css样式。 示例图与代码如下： 左侧行内元素右侧行内元素 HTML： 1234&lt;div class=\"Resolve Resolve5\"&gt; &lt;span&gt;左侧行内元素&lt;/span&gt;&lt;!-- 消除行内元素换行导致的空白--&gt;&lt;span&gt;右侧行内元素&lt;/span&gt;&lt;/div&gt; 总结以上就是消除行内元素间HTML空白的5种方案，虽然这些方案都不是很理想，但是有时候在特定的情况下，我们往往需要其中之一作为解决方案。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://verymuch.com/tags/CSS/"}]},{"title":"如何建立数据库索引","slug":"如何建立数据库索引","date":"2018-05-15T10:14:58.000Z","updated":"2019-06-17T01:07:31.449Z","comments":true,"path":"2018/05/15/如何建立数据库索引/","link":"","permalink":"http://verymuch.com/2018/05/15/如何建立数据库索引/","excerpt":"1. 简介建立索引的目标是为了使数据库应用程序可以更快地查找数据。 索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。 创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。 实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。 虽然索引能够大大提升查询速录，但过多的使用索引将会造成滥用。因为索引也会有它的缺点：索引会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。","text":"1. 简介建立索引的目标是为了使数据库应用程序可以更快地查找数据。 索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。 创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。 实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。 虽然索引能够大大提升查询速录，但过多的使用索引将会造成滥用。因为索引也会有它的缺点：索引会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。 2. 索引的种类 普通索引：最近本的索引，没有任何限制 唯一索引：索引列的值必须唯一，但允许空值。如果为组合索引，则列值的组合必须唯一 主键：主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL） 全文索引：用于在一篇文章中，检索文本信息的。全文索引可以在VARCHAR或者TEXT类型的列上创建。 3. 索引的创建 使用SQL CREATE INDEX语法可以创建索引。 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定length。其余类型不能指定length。 column_name规定需要索引的列，允许使用重复的值 注意：同一组字段的唯一索引，包括同一组字段普通索引的功能，无需重复创建。 1234567891011// 普通索引 - 单列索引CREATE INDEX index_name ON table_name (column_name(length))// 普通索引 - 组合索引CREATE INDEX index_name ON table_name (column_name1(length),column_name1(length))// 唯一索引 - 单列索引CREATE UNIQUE INDEX indexName ON mytable(column_name(length)) // 唯一索引 - 单列索引CREATE UNIQUE INDEX index_name ON table_name (column_name1(length),column_name1(length)) 使用修改表结构ALTER语句添加索引 1234567891011121314151617// 普通索引 - 单列索引ALTER TABLE table_name ADD INDEX index_name(column_name)// 普通索引 - 组合索引ALTER TABLE table_name ADD INDEX index_name(column_name1,column_name2)// 唯一索引 - 单列索引ALTER TABLE table_name ADD UNIQUE index_name(column_name)// 唯一索引 - 组合索引ALTER TABLE table_name ADD UNIQUE index_name(column_name1,column_name2)// 主键ALTER TABLE table_name ADD PRIMARY KEY (column_name)// 全文索引ALTER TABLE table_name ADD FULLTEXT index_name(column_list) 创建表的时候直接指定 12345678910111213// 普通索引 - 单列/组合索引CREATE TABLE table_name( ID INT NOT NULL, ... INDEX index_name (index_name(length),...) );// 唯一索引 - 单列/组合索引CREATE TABLE table_name( ID INT NOT NULL, ... UNIQUE index_name (index_name(length),...) ); 4. 索引的删除 DROP语句可以用于删除普通索引和唯一索引 1DROP INDEX index_name ON table_name; ALTER 语句删除 1234ALTER TABLE table_name DROP INDEX index_name;// 删除主键时只需指定PRIMARY KEY，但在删除索引时，你必须知道索引名。ALTER TABLE table_name DROP PRIMARY KEY; 5. 显示索引信息1SHOW INDEX FROM table_name; 6. 查看查询语句使用的INDEX在SELECT语句之前加上DESC能够显示查询语句最终使用的索引。 1DESC SELECT ... 参考链接 MySQL 索引 MySQL索引原理及慢查询优化 MySQL索引背后的数据结构及算法原理","categories":[],"tags":[]},{"title":"跳出forEach","slug":"跳出forEach","date":"2018-02-09T01:39:23.000Z","updated":"2018-12-10T03:43:01.737Z","comments":true,"path":"2018/02/09/跳出forEach/","link":"","permalink":"http://verymuch.com/2018/02/09/跳出forEach/","excerpt":"使用for...in遍历对象时，会遍历原型链上的可枚举属性，这可能会导致一些意想不到的问题。所以你一定收到过这样的建议，使用数组的forEach来代替for...in循环。","text":"使用for...in遍历对象时，会遍历原型链上的可枚举属性，这可能会导致一些意想不到的问题。所以你一定收到过这样的建议，使用数组的forEach来代替for...in循环。 一、常规试错在使用for...in的时候，在适当的时机终止循环是很常用的功能。那么问题来了，当我们有此需求时，我们可能会像下面这么做。 或许我们会尝试如下代码： 1234[1, 2, 3, 4, 5].forEach(function(v) &#123; console.log(v); //期望只输出1,2 if (v === 2) return false;&#125;); 但是，运行之后你会发现，其实return false并没有起作用。 然后又尝试了下面这个方法： 1234[1, 2, 3, 4, 5].forEach(function(v) &#123; console.log(v); //期望只输出1,2 if (v === 2) break;&#125;); 发现仍然不行，并且得到了如下的错误提示： 1Uncaught SyntaxError: Illegal break statement at Array.forEach (&lt;anonymous&gt;) 其实，\bMDN上有说明： There is no way to stop or break a forEach() loop other than by throwing an exception. If you need such behavior, the forEach() method is the wrong tool. 在forEach()方法中除了抛出异常以外，无法终止或者跳出循环。如果你需要该操作，那说明你用错了方法。 好吧，看来在forEach中确实不能终止或者跳出循环，那么为什么呢？ 二、为什么不行？首先我们先想一下第一种方法为啥不行。 其实forEach类似等价于如下的方法： 1234567const arr = [1, 2, 3, 4, 5];for (let i = 0; i &lt; arr.length; i++) &#123; const ret = (function(element) &#123; console.log(element); if (element === 2) return false; &#125;)(arr[i])&#125; 这样就很好理解了，我们在内部使用的return只是相当于将结果输出到ret变量中，并不能跳出循环。 至于第二种方法的报错，是因为break不允许出现在函数体内。 现在我们也知道了为啥在forEach不能跳出或者终止了。那么在遇到开始所说的使用场景时，有没有方法能跳出forEach呢？ 当然是有的，下面给大家总结了5个变通之法。 三、跳出forEach的5个变通之法1. 重回for…in上面提到我们是因为某些原因才推荐使用forEach来代替for...in的。但是如果有break的需求，而你又不知道其他方法时，可以重拾for...in。 2. throw法前面提到了，在forEach()方法中除了抛出异常以外，无法终止或者跳出循环。那么就看看如何使用\bthrow来跳出循环。 12345678910var BreakErr = &#123;&#125;;try &#123; [1, 2, 3, 4, 5].forEach(function(v) &#123; console.log(v); //只输出1,2 if (v === 2) throw BreakErr; &#125;);&#125; catch (e) &#123; if (e !== BreakErr) throw e;&#125; 这样其实也挺好的，如果循环遍历中的操作比较复杂，可以通过try...catch捕获\b异常。这样的话，跳出循环的错误就需要特别区开，避免不会干扰代码抛出的其他错误。 3. 空跑循环第3种方法是空跑循环。 在外层加一个标识，在特定\b情况下改变此标识的值，然后通过if语句判断，空跑后续的循环，如下： 12345678910111213var breakFlag = false;[1, 2, 3, 4, 5].forEach(function(v) &#123; if (breakFlag === true) &#123; return false; &#125; if (v === 2) &#123; breakFlag = true &#125; console.log(v) //只输出1,2&#125;) 这个方法比较简单也比较容易想到，但是该方法在外层加了一个变量，这样会污染外层的环境。所以我们\b可以使用forEach的第二个参数context来替代外层变量，把标识放在context里，这样就避免污染外层环境了。 12345678910[1, 2, 3, 4, 5].forEach(function(v) &#123; if (this.breakFlag === true) &#123; return false; &#125; if (v === 2) &#123; this.breakFlag = true &#125; console.log(v) //只输出1,2&#125;, &#123;&#125;); // 这里指定context 需要注意的是，forEach的第二个参数context，只有在使用非箭头函数时有效，因为箭头函数，无法改变context的指向。如果不注意的话，会污染了父级上下文。 1234567891011[1, 2, 3, 4, 5].forEach((v) =&gt; &#123; if (this.breakFlag === true) &#123; return false; &#125; if (v === 2) &#123; console.log(this) // 运行会发现，结果并不是&#123;test: 'test'&#125; this.breakFlag = true &#125; console.log(v) //只输出1,2&#125;, &#123;test: 'test'&#125;); 当然，上述这种方法\b会有一些不必要的运行，\b因为会空跑整个循环，显得不太优雅。 4. 神奇改数组大法下面出场的这位选手，稍微有点技术含量，笔者还是问了大佬才知道的，一定是我太过愚钝了。 所以你可以先别急着往下看解释，先看看你能理解不。 1234567var array = [1, 2, 3, 4, 5];array.forEach(function(item, index) &#123; if (item === 2) &#123; array = array.concat(array.splice(index, array.length - index)); &#125; console.log(item); //只输出1,2&#125;); 其实，这种方法相当于在item === 2的时候，改变了原数组引用的值，因为原数组改变了，则forEach进行到第二项就没了，但是该方法又机智地用concat后的新数组赋值给了array，所以array的值看上去并没有变，不信你可以试一下。 5. 最应该使用的every/some在需要break的场景下，我们可以使用every或者some，也比较推荐这种方式。 every和some的用法如下，它们会根据返回值来判断是否继续迭代，能够完美满足我们的需求。every在碰到return false的时候，中止循环。some在碰到return ture的时候，中止循环。 两者的代码分别如下： 123456789var a = [1, 2, 3, 4, 5]a.every(function(item, index, arry) &#123; console.log(item); //输出：1,2 if (item === 2) &#123; return false &#125; else &#123; return true &#125;&#125;) 123456789var a = [1, 2, 3, 4, 5]a.some(function(item, index, arry) &#123; console.log(item); //输出：1,2 if (item === 2) &#123; return true &#125; else &#123; return false &#125;&#125;) 总结本文给大家总结了5种在forEach中跳出循环的变通之法，其实这些方法在网上都能很容易地找到，笔者只是把在遇到该问题时的想法和解决方案进行了一下总结。希望能够对大家有帮助。 参考内容 https://medium.com/@tiboprea/3-things-you-didnt-know-about-the-foreach-loop-in-js-ff02cec465b1 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach http://jser.me/2014/04/02/%E5%A6%82%E4%BD%95%E5%9C%A8Array.forEach%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%87%8Cbreak.html","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://verymuch.com/tags/Javascript/"}]},{"title":"Node路径解析浅析","slug":"Node路径解析浅析","date":"2018-01-10T09:08:05.000Z","updated":"2019-05-29T07:08:30.202Z","comments":true,"path":"2018/01/10/Node路径解析浅析/","link":"","permalink":"http://verymuch.com/2018/01/10/Node路径解析浅析/","excerpt":"1. 疑惑这两天看了下之前项目里的webpack配置，想将之前的alias命名统一起来，遂在alias命名前统一使用_开头，这样在项目中看到这样的引用一眼就能知道是通过别名查找的。如下图所示，css目录在fesrc目录下，webpack配置所在目录与fesrc平级，在配置中如果使用相对路径，应该使用_css: path.resolve(&#39;../fesrc/css&#39;)，但是试一下就会发现这么做webpack无法找到指定目录。相反如下图用法，使用_css: path.resolve(&#39;./fesrc/css&#39;)则能够找到。因此，我猜想可能是相对于运行该文件的目录，就了解并总结了一下相关的内容。","text":"1. 疑惑这两天看了下之前项目里的webpack配置，想将之前的alias命名统一起来，遂在alias命名前统一使用_开头，这样在项目中看到这样的引用一眼就能知道是通过别名查找的。如下图所示，css目录在fesrc目录下，webpack配置所在目录与fesrc平级，在配置中如果使用相对路径，应该使用_css: path.resolve(&#39;../fesrc/css&#39;)，但是试一下就会发现这么做webpack无法找到指定目录。相反如下图用法，使用_css: path.resolve(&#39;./fesrc/css&#39;)则能够找到。因此，我猜想可能是相对于运行该文件的目录，就了解并总结了一下相关的内容。 2. 五类路径__dirname、__filename、process.cwd()、./、../Node中的文件路径大概有__dirname、__filename、process.cwd()、./或者../五类，前三个都是绝对路径，为了便于比较，我们将通过path.resolve(&#39;./&#39;)将./和../转换为绝对路径。 先看一个简单的例子。 假设有以下文件结构： 12345test-path├── js│ └── test.js└── lib └── common.js 在test.js下编写一下代码： 123456var path = require('path');console.log(__dirname);console.log(__filename);console.log(process.cwd());console.log(path.resolve('./')); 在js目录下运行node test.js会输出以下内容： 1234/Users/verymuch/devspace/test-path/js/Users/verymuch/devspace/test-path/js/test.js/Users/verymuch/devspace/test-path/js/Users/verymuch/devspace/test-path/js 而在test-path目录下，执行node js/test.js会输出以下内容： 1234/Users/verymuch/devspace/test-path/js/Users/verymuch/devspace/test-path/js/test.js/Users/verymuch/devspace/test-path/Users/verymuch/devspace/test-path 由上述内容，我们可以先做出以下假设： __dirname: 总是返回被执行的js所在文件夹的绝对路径 __filename: 总是返回被执行的js的绝对路径 process.cwd(): 总是返回运行node命令时所在的文件夹的绝对路径 ./: 似乎与process.cwd()一样。 值得注意的是，在require(&#39;../lib/common&#39;)里使用相对路径似乎并没有问题，参考下例，将’js/test.js’ 里的代码改成： 123456789var fs = require('fs');var common = require('../lib/common');console.log('require is OK!');fs.readFile('../lib/common.js', function (err, data) &#123; if (err) return console.log(err); console.log(data.toString());&#125;); 在js目录下运行node test.js，会发现并没有问题。但是在test-path目录下运行node js/test.js，就会报错，运行结果如下： 123456require is OK!&#123; Error: ENOENT: no such file or directory, open '../lib/common.js' errno: -2, code: 'ENOENT', syscall: 'open', path: '../lib/common.js' &#125; 按照上面暂定的理论，在test-path下运行时，../lib/common.js会被转成/Users/verymuch/devspace/lib/common.js，显然，这个路径是不存在的，但是从运行结果可以看出require(&#39;../lib/common&#39;)并没有问题，只是readFile报错了。 因此关于./正确的结论是： 在require()中使用是跟__dirname的效果相同，相对于文件所在目录，不会因为启动脚本的目录不一样而改变 在其他情况下跟process.cwd()效果相同，相对于启动脚本所在目录。 3. 总结鉴于相对路径(./, ../)的特殊，建议只在require()中使用相对路径的写法，其他地方一律使用绝对路径，如下： 1234// 当前目录下path.resolve(__dirname, './lib/common.js');// 相邻目录下path.resolve(__dirname, '../lib/common.js'); 4. 参考链接 浅析 NodeJs 的几种文件路径","categories":[],"tags":[{"name":"沉淀","slug":"沉淀","permalink":"http://verymuch.com/tags/沉淀/"}]},{"title":"Data URL简介与使用","slug":"Data-URL简介与使用","date":"2017-12-14T00:34:41.000Z","updated":"2019-05-29T07:23:50.531Z","comments":true,"path":"2017/12/14/Data-URL简介与使用/","link":"","permalink":"http://verymuch.com/2017/12/14/Data-URL简介与使用/","excerpt":"相信大家在前端开发的过程中，都应该处理过图片，其中有一项就是我们会在loader中将小的图片转为base64。那么这个base64是什么呢？我们为什么要将其转为base64呢？ 其实这是格式的图片，我们可以称为Data URL，下面让我们一起来简单了解下。 1. 简介Data URL，是以data:模式为前缀的URL，允许内容的创建者将较小的文件嵌入到文档中。与常规的URL使用场合类似，下面会具体介绍可以将Data URL用在哪些地方。 Data URL由data:前缀、MIME类型（表明数据类型）、base64标志位（如果是文本，则可选）以及数据本身四部分组成。 语法格式如下： 1data:[&lt;mediatype&gt;][;base64],data mediatype是一个MIME（Multipurpose Internet Mail Extension）类型字符串，如image/jpeg表示一个JPEG图片文件。如果省略，默认值为text/plain;charset=US-ASCII。","text":"相信大家在前端开发的过程中，都应该处理过图片，其中有一项就是我们会在loader中将小的图片转为base64。那么这个base64是什么呢？我们为什么要将其转为base64呢？ 其实这是格式的图片，我们可以称为Data URL，下面让我们一起来简单了解下。 1. 简介Data URL，是以data:模式为前缀的URL，允许内容的创建者将较小的文件嵌入到文档中。与常规的URL使用场合类似，下面会具体介绍可以将Data URL用在哪些地方。 Data URL由data:前缀、MIME类型（表明数据类型）、base64标志位（如果是文本，则可选）以及数据本身四部分组成。 语法格式如下： 1data:[&lt;mediatype&gt;][;base64],data mediatype是一个MIME（Multipurpose Internet Mail Extension）类型字符串，如image/jpeg表示一个JPEG图片文件。如果省略，默认值为text/plain;charset=US-ASCII。 2. Data URL的优缺点 Data URL的优势 和传统的外部资源引用，Data URL有着以下优势： 当访问外部资源很麻烦或受限时，可以将外部资源转为Data URL引用(这个比较鸡肋) 当图片是在服务器端用程序动态生成，每个访问用户显示的都不同时，这是需要返回一个可用的URL（场景较少） 当图片的体积太小，占用一个HTTP会话不是很值得时（雪碧图可以出场了） Data URL的缺点 虽然Data URL允许使用者将文件嵌入到文档中，这在某些场景下较为合适，但是Data URL也有一些缺点： 体积更大：Base64编码的数据体积通常是原数据的体积4/3，也就是Data URL形式的图片会比二进制格式的图片体积大1/3 不会缓存：Data URL形式的图片不会被浏览器缓存，这意味着每次访问这样的页面时都被下载一次。这是一个使用效率方面的问题——尤其当这个图片被整个网站大量使用的时候。 3. 如何获取base64编码 Linux/Mac OS X下可以使用uuencode命令 1uuencode -m &lt;源文件&gt; &lt;转码后标识&gt; 如执行uuencode -m hello-base64 hello，会得到如下结果： 123begin-base64 644 helloaGVsbG8gYmFzZTY0 // 此处为base64编码，对应文本内容为 'hello base64'==== 使用原生Web API编码/解码 Javascript中有两个函数负责编码和解码base64字符串，分别是atob和btoa。 atob(): 负责解码已经使用base64编码了的字符串。 btoa(): 将二进制字符串转为base64编码的ASCII字符串。 两者都只针对Data URL中的data进行处理。 12btoa('hello base64') // \"aGVsbG8gYmFzZTY0\"atob('aGVsbG8gYmFzZTY0') // \"hello base64\" Canvas的toDataURL方法 Canvas提供了toDataURL方法，用于获取canvas绘制内容，将其转为base64格式。 如下所示，文本框中的内容即为canvas中绘制内容的base64格式。 var canvas = document.getElementById('testCanvas'); if (canvas.getContext) { var ctx = canvas.getContext('2d'); // 设置字体 ctx.font = \"Bold 20px Arial\"; // 设置对齐方式 ctx.textAlign = \"left\"; // 设置填充颜色 ctx.fillStyle = \"#0f0\"; // 设置字体内容，以及在画布上的位置 ctx.fillText(\"hello base64\", 10, 30); // 描边颜色 ctx.strokeStyle = \"#0f0\"; // 绘制空心字 ctx.strokeText(\"hello base64\", 10, 80); // 获取 Data URL document.getElementById('testCanvas-content').value = canvas.toDataURL(); } Html: 12&lt;canvas id=\"testCanvas\" width=\"200\" height=\"100\"&gt;&lt;/canvas&gt;&lt;textarea id=\"testCanvas-content\"&gt;&lt;/textarea&gt; JS: 123456789101112131415161718var canvas = document.getElementById('testCanvas');if (canvas.getContext) &#123; var ctx = canvas.getContext('2d'); // 设置字体 ctx.font = \"Bold 20px Arial\"; // 设置对齐方式 ctx.textAlign = \"left\"; // 设置填充颜色 ctx.fillStyle = \"#0f0\"; // 设置字体内容，以及在画布上的位置 ctx.fillText(\"hello base64\", 10, 30); // 描边颜色 ctx.strokeStyle = \"#0f0\"; // 绘制空心字 ctx.strokeText(\"hello base64\", 10, 80); // 获取 Data URL document.getElementById('testCanvas-content').value = canvas.toDataURL();&#125; 使用FileReader API的readAsDataURL方法 FileReader API提供的readAsDataURL方法能够返回一个基于base64编码的Data URL。 如下所示，选择文件后返回Data URL。 注意，别选大的文件，选个小的试试就行，LOL。 var reader = new FileReader() reader.onload = function(e) { var textarea = document.getElementById('testReadAsDataURL-content'); textarea.value = reader.result } document.getElementById('testReadAsDataURL').onchange = function(e) { var file = e.target.files[0] reader.readAsDataURL(file) } Html: 1234&lt;div class=\"demo-area\"&gt; &lt;input type=\"file\" id=\"testReadAsDataURL\"&gt; &lt;textarea id=\"testReadAsDataURL-content\"&gt;&lt;/textarea&gt;&lt;/div&gt; JS: 123456789var reader = new FileReader()reader.onload = function(e) &#123; var textarea = document.getElementById('testReadAsDataURL-content'); textarea.value = reader.result&#125;document.getElementById('testReadAsDataURL').onchange = function(e) &#123; var file = e.target.files[0] reader.readAsDataURL(file)&#125; 4. Data URL能用在何处呢？最开始已经说了Data URL，是以data:模式为前缀的URL，使用场合与常规URL相同，即常规URL能够使用的场合，Data URL也可以使用。如：浏览器地址栏、link中引入css文件、script中引入js文件、img src中引入图片、video中引入视频、iframe中引入网页、css background url引入背景。 在浏览器地址栏中使用Data URL 在浏览器地址栏中使用Data URL，打开上述canvas中绘制的内容 注意：chrome 从56开始将Data URL标记为“不安全”，从60开始屏蔽从页面打开的 Data URI 网址，可以右键新标签打开。详情 document.getElementById('setDataURLInHref').href = document.getElementById('testCanvas-content').value Html: 1&lt;a href=\"base64内容\" target=\"_blank\" id=\"setDataURLInHref\"&gt;&lt;/a&gt; 在script/img/video/iframe等标签的src属性内使用Data URL 以在script中使用Data URL为例： 点击加入script标签 var scriptDataURL = `data:text/javascript;base64,YWxlcnQoJ+WcqHNjcmlwdOS4reS9v+eUqERhdGEgVVJMJykK` // 对应文本为：alert('在script中使用Data URL') $('#setDataURLInScriptBtn').click(function() { $('').attr('src', scriptDataURL).appendTo($('body')) }) JS: 12345var scriptDataURL = `data:text/javascript;base64,YWxlcnQoJ+WcqHNjcmlwdOS4reS9v+eUqERhdGEgVVJMJykK`// 对应文本为：alert('在script中使用Data URL')$('#setDataURLInScriptBtn').click(function() &#123; $('&lt;script&gt;').attr('src', scriptDataURL).appendTo($('body'))&#125;) 在&lt;link&gt;标签的href中使用Data URL 点击将文字的颜色设为红色 var linkDataURL = `data:text/css;base64,I3NldERhdGFVUkxJbkxpbmtCdG57Y29sb3I6IHJlZDt9Cg==` // 对应内容为：setDataURLInLinkBtn{color: red;} $('#setDataURLInLinkBtn').click(function() { $('').attr('href', linkDataURL).appendTo($('head')) }) JS: 12345var linkDataURL = `data:text/css;base64,I3NldERhdGFVUkxJbkxpbmtCdG57Y29sb3I6IHJlZDt9Cg==`// 对应内容为：setDataURLInLinkBtn&#123;color: red;&#125;$('#setDataURLInLinkBtn').click(function() &#123; $('&lt;link rel=\"stylesheet\" type =\"text/css\"&gt;').attr('href', linkDataURL).appendTo($('head'))&#125;) 在css样式background的url中使用Data URL const bgDataURL = $('#testCanvas-content')[0].value $('#setDataURLInBG').css('background-image', `url(${bgDataURL})`) JS: 12const bgDataURL = $('#testCanvas-content')[0].value$('#setDataURLInBG').css('background-image', `url($&#123;bgDataURL&#125;)`) 5. 参考链接 MDN Data URLs","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"http://verymuch.com/tags/Web/"}]},{"title":"escape、encodeURI和encodeURIComponent的区别与使用","slug":"escape、encodeURI和encodeURIComponent的区别与使用","date":"2017-12-12T14:51:18.000Z","updated":"2019-05-29T07:08:26.270Z","comments":true,"path":"2017/12/12/escape、encodeURI和encodeURIComponent的区别与使用/","link":"","permalink":"http://verymuch.com/2017/12/12/escape、encodeURI和encodeURIComponent的区别与使用/","excerpt":"1. escapeescape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。编码之后的效果是%XX或者%uXXXX这种形式。其 ASCII字母、数字、@*/+，这几个字符不会被编码，其余的都会。 注意，当需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。 在实际工作中使用较少，可以先了解功能，待有需求时再使用。 2. encodeURI 和 encodeURIComponent对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。 它们都是编码URL，唯一区别就是编码的字符范围： encodeURI方法不会对下列字符编码ASCII字母、数字、~!@#$&amp;*()=:/,;?+&#39; encodeURIComponent方法不会对下列字符编码ASCII字母、数字、~!*()&#39; 由此可见encodeURIComponent比encodeURI编码范围更大。如，encodeURIComponent会把http://编码 http%3A%2F%2F而encodeURI却不会。","text":"1. escapeescape是对字符串(string)进行编码(而另外两种是对URL)，作用是让它们在所有电脑上可读。编码之后的效果是%XX或者%uXXXX这种形式。其 ASCII字母、数字、@*/+，这几个字符不会被编码，其余的都会。 注意，当需要对URL编码时，请忘记这个方法，这个方法是针对字符串使用的，不适用于URL。 在实际工作中使用较少，可以先了解功能，待有需求时再使用。 2. encodeURI 和 encodeURIComponent对URL编码是常见的事，所以这两个方法应该是实际中要特别注意的。 它们都是编码URL，唯一区别就是编码的字符范围： encodeURI方法不会对下列字符编码ASCII字母、数字、~!@#$&amp;*()=:/,;?+&#39; encodeURIComponent方法不会对下列字符编码ASCII字母、数字、~!*()&#39; 由此可见encodeURIComponent比encodeURI编码范围更大。如，encodeURIComponent会把http://编码 http%3A%2F%2F而encodeURI却不会。 3. 总结：适用场合三个方法的区别从上面已经能够看出，但是说实话，估计具体哪些字符会被编码没人能记得住，所以化简为繁，只要记住三种方法的使用场合就行了。 如果只是编码字符串，不和URL有半毛钱关系，那么用escape。 如果你需要编码整个URL，然后需要使用这个URL，那么用encodeURI。 比如encodeURI(&quot;http://www.cnblogs.com/season-huang/some other thing&quot;); 编码后会变为&quot;http://www.cnblogs.com/season-huang/some%20other%20thing&quot;; 其中，空格被编码成了%20。但是如果你用了encodeURIComponent，那么结果变为 &quot;http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2Fsome%20other%20thing&quot; 看到了区别吗，连/都被编码了，整个URL已经没法用了。 当你需要编码URL中的参数（如rdurl）的时候，那么encodeURIComponent是最好方法。 12345var param = \"http://www.cnblogs.com/season-huang/\"; //param为参数param = encodeURIComponent(param);var url = \"http://www.cnblogs.com?next=\" + param;console.log(url) // \"http://www.cnblogs.com?next=http%3A%2F%2Fwww.cnblogs.com%2Fseason-huang%2F\" 从上例可以看出，参数中的/被编码了，如果用encodeURI肯定要出问题，因为后面的/是需要编码的。","categories":[],"tags":[{"name":"沉淀","slug":"沉淀","permalink":"http://verymuch.com/tags/沉淀/"}]},{"title":"跟扎克伯格学习提高工作效率","slug":"跟扎克伯格学习提高工作效率","date":"2017-02-11T03:44:27.000Z","updated":"2019-06-17T01:06:49.601Z","comments":true,"path":"2017/02/11/跟扎克伯格学习提高工作效率/","link":"","permalink":"http://verymuch.com/2017/02/11/跟扎克伯格学习提高工作效率/","excerpt":"前言 几天前看到了这样一篇文章《鸡年上班的第一天，扎克伯格的26张PPT帮助你提高工作效率，把握“鸡”会》。然后不知道扎克伯格的童靴，我相信做技术的应该都知道的。","text":"前言 几天前看到了这样一篇文章《鸡年上班的第一天，扎克伯格的26张PPT帮助你提高工作效率，把握“鸡”会》。然后不知道扎克伯格的童靴，我相信做技术的应该都知道的。 文章开篇就对扎克伯格进行了介绍——全球最年轻亿万富豪宝座的Facebook创始人马克·扎克伯格。当然这样的标题能够够吸引人查看，因为我们相信优秀的人都是值得学习。不过对于我，我觉得只要是优秀的习惯不管是在谁的身上都是值得学习的。 只看了几页简单的文字PPT，我就不得不佩服，成功人士的经验确实是非常值得学习的。他们或多或少都有一些自己的“成功秘诀”，有一些习惯也许会适合于迷茫中的你和我。 文中给出了26张PPT，之前也没有太认真研究，今天就一边看，一边附上自己的想法，激励自己。 1. 时间常有，时间在于优先。 每天的时间都是固定的，所以我们要把时间用来做有意义的事情。每个人对于有意义的事都有一个定义，但是不管如何在每个人的心里，想要做的事情都会有一个先后顺序或者说重要程度。所以不管是每天的任务还是长期的计划，充分利用自己的时间，并且不能避重就轻，要先完成重要的事情。 马克的第一页PPT中也给出了对比，可能你想做的事情时享受生活，但是你要有享受生活的能力。所以你需要去实现自我，去努力工作，而工作和娱乐相比，则工作是你更应该去做的并且有意义的事情，虽然娱乐来的更舒服，要知道舒适使人丧失斗志，要打破自己的舒适区，挑战自己，成就更好的自己。 2. 每天都会很充实：只需要计划4-5小时用来工作就好 每天都会过的很足，用这句话来说，是想说，不管你一天干什么，你都会过足24小时，只是不同的人的不同的24小时带来的感觉并不相同而已。 当然，这么说并是让大家自己想怎么过就怎么过。而是想说，一天的时间很短，有很多有意的事情需要我们去做，不要把时间都花在工作上。每天真正花在工作上的时间有4-5小时就很好了。 一方面，花费远超于这些的时间在工作上，可能效率并不好，而且会使人疲惫；另一方面，把太多的时间花在工作上，将没有时间让你来做其他有意义的事情，而其他事情也会帮助你更好地工作，如锻炼来的一个健康的身体，学习来的更好的个人能力等等。 所以要合理安排工作时间，把握好自己的时间，过足自己的每一天。 3. 跟着状态走 状态这个东西特别。有的时候你会一点都不在状态，有的时候又非常在状态，就跟打了鸡血似的，天天能忙活12个小时。所以在状态的时候，就可以多干点活；不然的话就好好休息，这样才能更快的调整好自己的状态。 4. 重视自己的时间，并使其值得重视 “你的时间值1000美元/小时，你得行动起来！” 是的，你的时间是有价值的，要认清自己时间的价值，不要去荒废自己的时间，重视起自己的时间。 我要对自己说：“你的时间也要小一百一小时呢，你要重视起来，你每浪费一个小时就浪费100大洋，重视起来吧，好好利用自己的时间，还能够提升自己，加油!” 5. 一次专注一个任务 不要一次进行多个任务，这只会消耗我们的注意力。保持专注，一心易用，这样才能够提高效率。 当自己想要转移注意力的时候一定要严厉地提醒自己。 6. 养成并适应习惯 养成良好的工作习惯，并持之以恒，你的身体会适应的。 是的，不管是生活上的习惯还是工作上的习惯或者说是学习上的习惯，只要是坚持成为习惯了，一切做起来都不再会那么困难。就想之前每天陪媳妇早睡早起觉得很难，但是慢慢调整之后就适应了，也能体会到规律作息的好处。每天早上能够多出两个小时的个人时间，可以用来学习、整理与安排等。 所以养成一个良好的工作习惯，坚持下去，你会越来越好的。 7. 当限定时间做某件事情时，我们往往更加专注并且有效率 我想大家都切身经历过，当一件事情没有最后时限时，我们可能一拖再拖，一直没有紧迫感，而不去完成它。而当这件事情有着最后期限时，我们往往会更加优先、更加专注、更加有效率地完成它。 所以日常生活里，自己安排的事情可能并没有给自己设定期限，那么试一试给自己要做的事情设置个时间限制，去看看自己是不是能够更好更快的完成。 8. 进入工作状态的最佳方式就是工作 进入工作状态最好的方式就是工作，可以先从简单的工作任务开始，由此进入工作状态，然后再按照重要程度、优先级，来完成自己的工作安排。 9. 做完事情，要胜于完美收工 迭代工作，期待完美收工会令人窒息：“做完事情，要胜于完美收工” Facebook 办公室墙壁上贴的箴言。动手做，胜过任何完美的想象。 大多数都有着这样一个缺点，觉得有些事情需要自己去做，但更多的是只是口头说说，纸上写写却并没有真正去做。这就是人的惰性。想到要做的事情，就立马执行起来，如果优先级不够，就先记录下来，然后在需要做的时间去做。不要嘴上说说，让自己动起来。 10. 凡事有个度 凡事要有个度，工作时间越长并不意味着效率越高。要把握好这个度，劳逸结合，才能让自己的续航能力更强。so 该工作的时候好好工作，该休息的时候也要好好休息，该锻炼的时候更要好好锻炼。 11. 分类工作（执行类和思考类），提高效率 工作的时候，将工作清除的分为两类：执行类和思考类。这样在思考的时候能够更好地思考，在执行的时候能够更快的执行，从而提高自己的工作效率。因为思考和执行的过程如果被打断，需要付出更多的时间。 12. 有会议今早安排 有会议就尽早安排，用于准备会议的时间往往都浪费掉了。这个我还没有经验，不过想想是很有道理的。每次周会的下午往往都是浪费了的。 13. 创造不间断工作时间 把会议和沟通 (邮件或电话) 结合，创造不间断工作时间：一个小会，也会毁了一个下午，因为它会把下午撕成两个较小的时间段，以至于啥也干不成。PS：当看到一个程序员冥思苦想时，不要过去打扰，甚至一句问候都是多余的。 对自己说：不要自己碎片化自己的时间，集中注意力。 14. 一天保持相同的工作环境 一整天保持相同的工作环境。在项目/客户之间切换，会效率低。 还没有跟客户对接过的我好像并不懂。 15. 工作—放松—工作=高效(番茄工作法) 番茄工作法是弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。 使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，然后在纸上画一个X短暂休息一下（5分钟就行），每4个番茄时段多休息一会儿。 对自己说：“利用已有的方法论，提高自己的效率”！ 16. 分割任务 把不切实际的任务分割成合理的小任务，只要每天都完成小任务，你就会越来越接近那个大目标了。 和年度目标细化成执行清单一样，朝着目标一步一步，一点一点地去完成目标的一部分，你会发现完成一个大目标是那么容易。 不要觉得一件事情很难就不去做了，知难行易，也许只是你觉得它很难，但是真正做起来就回变得简单。 17. 确认优先级 从来没有两个任务会有相同的优先级，总会有个更重要，仔细考虑待办事情列表。 每次专注于一个任务，而且要挑选重要的任务来做，不要避重就轻。 18. 一定要完成那件影响最大的事情 必须清楚白天必须完成的那件事，是什么。请确认好事情的优先级，一定要完成影响最大的那件事情。 19. 拆分任务 把任务按时间分段，就能感觉它快被搞定了。 长得任务总是让人感觉很难完成，但是分成一个个的小阶段去完成，你会发现事情变的简单很多。 20. 擅用他人的力量 授权并擅用他人的力量。—君子善假于物(人)也，如果某件事其他人也可以做到八成，那就给他做！ 虽然我还没到这一步，但是要提前有这种意识。 21. 好汉不提当年勇 把昨天翻过去，只考虑今天和明天。昨天的全垒打赢不了今天的比赛。—好汉不提当年勇。 22. 给事情设限 给所有事情都设定一个期限。不要让工作无期限地进行下去。 23. 针对时间紧或有压力的任务，设置结束时间 针对时间紧或有压力的任务，设置结束时间，万事皆可终结 24. 好记性胜过烂笔头 多记，多做笔记。 好记性胜于烂笔头，记笔记能够加深对知识的印象。 25. 记下让你分散注意力的点子 进入高效状态后，记下任何分散你注意力的东西比如Google搜索词、灵光乍现的想法、新点子等等。如果你把它们记下来，它就不会再蹦来蹦去了。 26. 劳逸结合","categories":[{"name":"GROWING_SPACE","slug":"GROWING-SPACE","permalink":"http://verymuch.com/categories/GROWING-SPACE/"}],"tags":[{"name":"有感","slug":"有感","permalink":"http://verymuch.com/tags/有感/"},{"name":"工作效率","slug":"工作效率","permalink":"http://verymuch.com/tags/工作效率/"},{"name":"他人经验总结","slug":"他人经验总结","permalink":"http://verymuch.com/tags/他人经验总结/"}]},{"title":"如何踏踏实实走在变优秀的路上","slug":"如何踏踏实实走在变优秀的路上","date":"2017-01-23T07:52:56.000Z","updated":"2019-06-17T01:06:32.500Z","comments":true,"path":"2017/01/23/如何踏踏实实走在变优秀的路上/","link":"","permalink":"http://verymuch.com/2017/01/23/如何踏踏实实走在变优秀的路上/","excerpt":"前言 几天前，从简七上第一次读到了一哥们的励志贴——《从负债、发福、失业的深渊中爬出，这一年，我完成了7项年度计划》。读后感觉自己相较于这样一位努力去改变自己仅仅一年的朋友都有着如此之大的差距，看来自己真的很欠缺，应该立刻马上开始努力，加倍努力，自己还有很大的提升空间。","text":"前言 几天前，从简七上第一次读到了一哥们的励志贴——《从负债、发福、失业的深渊中爬出，这一年，我完成了7项年度计划》。读后感觉自己相较于这样一位努力去改变自己仅仅一年的朋友都有着如此之大的差距，看来自己真的很欠缺，应该立刻马上开始努力，加倍努力，自己还有很大的提升空间。 本着向更优秀的人学习的原则，我准备相应地去完善一下自己的计划。今天的工作内容并不多，所以我开始着手完善自己的计划，开始之前忍不住又将这篇帖子又看了一下。看完之后，反倒感受没有第一次那么强烈，还从中获取到了一丝颇为得意的成就感。这一丝成就感来源于我对自己的肯定与信心。虽然我没能用更好的方式变得优秀，但是我已经有意识要让自己变得更加优秀，而且我也有信心自己能够变得越来越优秀，同时自己已经在摸索这样一条变得优秀的道路。 只是自行摸索总是缓慢的，想要更好更快地前进则需要借鉴他人的宝贵经验。 比如，我已经意识到自己需要制定一个年度计划(我的年度成长计划)。但是具体落实的过程中，却完全是细节的内容，没有一个大的目标列表或者是梦想清单。这样做的坏处就是，我在努力去改变、学习的过程中，缺少了一个直观的、通俗的最终目标。或许一年以后，我完整地完成自己定下的所有小目标，但却会发现难以衡量自己有没有变成想要的样子，所以我需要一个抽象的最终目标——年度目标。 再者，在我的每日好习惯一项内容中，在具体的生活、学习和工作习惯中，并没能够很好地区分习惯和具体的工作内容，有一些习惯可能是每天需要做的事情，太过于具体。从励志哥(特指上文励志贴的作者)文中的梦想执行清单中，我认识到其实有些任务放在执行清单这一内容中会变得更加清晰，能够更好地约束自己。 虽然相比较起来，我做的并不够好，但我也是值得夸赞一下的。 当然，读完励志哥的帖子后，我还是觉得自己存在可以改善的地方。我准备从以下几点进行改善： 制定梦想清单和执行计划 践行柳比歇夫时间管理法 写成功日记 牢记“72小时法则” 学习理财之道 舍得投资自己 劳逸结合——奖励机制 制定梦想清单和执行计划 前面的废话(前言)中也说了，有个大的目标，再将大目标分成多个小目标来实现，不断努力去实现小目标，最终去实现大目标。重要的是，大目标是不可缺少的，这样在多个小目标实现后，才能去对比自己是否完成了大的目标，而这决定了能否享受到成功的喜悦。 相对应的，只有雄心壮志的大目标，而没有脚踏实地的小细节，也没法走向成功。需要根据自己的目标，制定一个适合自己的执行清单，严格地按照自己的设定去执行，才能一步一步走向成功。 所以我要重新制定自己的年度计划，更名为《我的第一个五年计划》，为自己列一个五年梦想清单、年度梦想清单，并在每一年具体地制定出年度梦想的执行清单（原本的2017年度计划，就让它作为我不断进步的见证而存在吧，哈哈哈~！）。 不求自己能够一步到位，但希望自己能够在接下来的一年里能够不断完善，慢慢积累，朝着目标，不断地进步。 践行柳比歇夫时间管理法 一直以来，自己都存在过这样的问题——总是懊恼自己知识的匮乏，悔悟自己没有努力，想去努力时却又叹息自己的时间不够，没时间做这个，没时间做那个。 看了励志哥的帖子后，才发现其实自己的时间是被怪兽偷走了，而这个怪兽就是我们自己，我们在不知不觉间放纵了自己，流失了时间，点点之间，稍纵即逝。想要去努力，就必须先“杀死”偷走时间的怪兽，改变我们放纵的习惯，学会约束自己，调整自己，抓住自己的时间，提高时间利用率。 看到文中介绍的柳比歇夫时间管理法，我也认识到了它的好处。 柳比歇夫是前苏联的一位学术大拿，他一生做过太多有成就的事，他既是昆虫学家、哲学家，还是数学家。26岁的时候，他发明了自己的时间管理法，并在此后的56年中，不遗余力地将其践行至工作和生活中。 某励志贴 这种方法最大的好处在于： (1) 它能让我清晰地知道一天的时间都花在了哪儿。 (2) 它能让我们进而去思考，有哪些时间是不必要的浪费，可以利用起来，去做自己想做的事？ (3) 它让我们意识到每一个微不足道的碎片时间的可贵，这些微不足道的片段经过长年的累积，就会成为一笔可观的时间财富，被存进改变人生的一万小时里面。 我计划从以下几步践行柳比歇夫时间管理法： 事无巨细地记录自己每个事件的时间花销； 统计分析，进行周调整、月小结、年度总结，根据自己的目标不断调整； 改进、优化对时间的利用率，充分将碎片时间利用起来。 下面是结合柳比歇夫时间管理制作的个人日常记录表。 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 工作 时间-事件-时长详细记录 06:00-07:00 07:00-08:00 08:00-09:00 09:00-10:00 10:00-11:00 11:00-12:00 12:00-13:00 13:00-14:00 14:00-15:00 15:00-16:00 16:00-17:00 17:00-18:00 18:00-19:00 19:00-20:00 20:00-21:00 21:00-22:00 22:00-23:00 时间使用汇总与分析 汇总 分析 成功日记 每日感想 结合柳比歇夫时间管理法，在之后的个人管理：培养良好的生活、学习和工作习惯中，我要做出以下调整。 首先需要每日用心审视自己是否做到了好习惯的坚持，不断调整与完善优秀的个人习惯，改掉坏习惯。 其次，每天要提前做好合理的计划，让每天的生活有计划的进行，并严格践行时间管理方案，提高计划的完成效率，提高生活的可控性。 然后，做好每日总结和反思，虽然一次的反思与总结并不能让自己突飞猛进，但是要养成这样的习惯，如此才能更快的进步。 最后，记录成功日记(下面细说~！)，提高自己的自信心。 写成功日记 就在刚刚已经提到了成功日记，为什么我要写成功日记呢？ 因为严格来说我是一个不够自信，有点自卑的人。看了励志哥文中提到的小狗钱钱中的“成功日记”的事例，我觉得对我也有一定的帮助。 我也希望能通过对自己的不断激励，培养出更成功更自信的自己，这样才能够更有把握面对未来的挑战。 通过坚持记录生活中让自己开心或者有成就感的小事，如果以后再遇到不开心的事，或难题，翻出来看看，想想自己曾经做过那么多开心的、有成就感的事，就会相信自己，能处理好当下遇到的难题。 成功日记结合柳比歇夫时间管理一起记录，通过日积月累的成长，目标能够提升自己时间管理能力的同时也能够提升自信心，加油！！！ 牢记“72小时法则” 经常会在努力了一段时间后就会拖延症复发，一拖再拖，把好不容易开始培养的好习惯抛之脑后。 一方面因为没有足够吸引自己的目标促使自己不断努力，不断坚持。 另一方面，还是有目标，但没有具体的实施措施，所以难以持之以恒。 最后，有时候想做的事情拖了久了就不知道该如何做了，甚至就忘记不做了。 前面两点通过合理的梦想清单、梦想执行清单、每日计划能够慢慢的养成。而最后一点则需要不断地努力去克服，以后要养成一个好习惯，想要做的事情就立马去做，做好具体的日程安排，约束自己按时完成。 学习理财之道 只靠每个月的固定工资是难以实现财富自由。所以开始了解一些理财知识，争取在工资之外也能够有收入。虽然一时间说实现财务自由有点困难，但是如果能够很好地理财，能够给自己更多的物质保障，也能够有更多的安全感。 当然，理财是一门大学问，不是说去理财就能够很好地理财的。现阶段我首先要做的是要学习理财相关的知识，了解入门之道，慢慢地培养自己的理财意识。同时，要给自己制定好理财目标。 现在对于理财还很不了解，那么就先从励志文中提到的理财读物——《小狗钱钱》开始吧。 舍得投资自己 可能说理财投资，对于现在的自己还太过迷茫，并不知道该如何投资，如何理财？但是，现在正当年，我有着最好的选择，投资自己也是一种投资。而且最好的投资就是投资自己。 经常会有这样的情景。吃穿用度时，花钱大手大脚；而到学习提升，购买书本，参加培训时，花钱却犹豫再三。一方面是因为觉得可能花钱买了书或者参加了培训，自己也不会用心对待。另一方面就只是舍不得，舍不得去花钱投资自己。或许现在对自己的投资看不到汇报，但以后一定会受用终身。 让自己多学习一项技能多，会让自己变得越来越优秀，而这是一个良性循环，爱好之间的良性给养，会不断积累，逐渐让自己变得更加优秀！虽然我并没有深刻地感受到这一好处，但是我能认识到这一理论的可行性，所以努力践行之。在需要的时候舍得投资自己，让自己有效率的变优秀！ 劳逸结合——奖励机制 当然，突然从不完全甚至是不克制变到完全克制是很难坚持的。可能短短几天时间能够坚持下来，但是长久以来却并不是那么好坚持的。 这时候，一方面需要劳逸结合，具体实施到我自己身上可以采取奖励机制。如达成某目标后，偶尔可以放纵自己，允许自己做什么或者买什么。再具体点就是，如果我能在一个月内用吉他简单地弹首曲子，我就给自己买一把吉他。就像驴和胡萝卜的故事一样，用一个目光所及的奖励去激励自己，能够更好地促使自己完成任务。如果想要获得奖励，就必须努力前进。 另一方面是需要有人监督。此刻就需要我的贤内助(弱弱地@下我老婆)登场了。希望在接下来的时间里能和老婆一起互相监督，一起努力在变得更加优秀的道路上越走越好！ 最后的最后 最后的最后，希望自己说了那么多，一定要记住。","categories":[{"name":"GROWING_SPACE","slug":"GROWING-SPACE","permalink":"http://verymuch.com/categories/GROWING-SPACE/"}],"tags":[{"name":"有感","slug":"有感","permalink":"http://verymuch.com/tags/有感/"}]},{"title":"个人管理：培养良好的生活、学习和工作习惯","slug":"个人管理：培养良好的生活、学习和工作习惯","date":"2017-01-07T13:40:48.000Z","updated":"2017-01-10T13:40:48.000Z","comments":false,"path":"2017/01/07/个人管理：培养良好的生活、学习和工作习惯/","link":"","permalink":"http://verymuch.com/2017/01/07/个人管理：培养良好的生活、学习和工作习惯/","excerpt":"良好的生活、学习和工作习惯 良好的生活、学习和工作习惯 一. 良好的生活习惯 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 3. 养成良好的健身习惯，每天至少运动半小时 二. 良好的学习习惯 1. 充分利用空档时间学习，哪怕只有五分钟 2. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) 3. 专注地进行学习，提高学习的效率 4. 有机会就去解锁一项新技能 5. 要学会反思与总结 6. 做过的事，学过的知识，要牢牢的让它变成自己的东西 三. 良好的工作习惯 1. 提前做好工作计划，有计划的进行 2. 专注地进行工作，提高工作的效率","text":"良好的生活、学习和工作习惯 良好的生活、学习和工作习惯 一. 良好的生活习惯 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 3. 养成良好的健身习惯，每天至少运动半小时 二. 良好的学习习惯 1. 充分利用空档时间学习，哪怕只有五分钟 2. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) 3. 专注地进行学习，提高学习的效率 4. 有机会就去解锁一项新技能 5. 要学会反思与总结 6. 做过的事，学过的知识，要牢牢的让它变成自己的东西 三. 良好的工作习惯 1. 提前做好工作计划，有计划的进行 2. 专注地进行工作，提高工作的效率 2017.03.09 Thur. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 单词5个； 预习玉文分享的内容； 工作 开发机环境跑通； 上线代码； 时间-事件-时长详细记录 08:00-09:00 07:50-09:10（80分钟）起床、洗漱、做饭、吃饭（中间看了有十分钟书）； 09:00-10:00 09:10-09:40（30分钟）骑车上班； 09:40-09:50（10分钟）记录昨日时间和今日时间； 09:50-10:00（10分钟）昨日总结； 10:00-11:00 11:00-12:00 12:00-13:00 13:00-14:00 14:00-15:00 15:00-16:00 16:00-17:00 17:00-18:00 18:00-19:00 19:00-20:00 20:00-21:00 21:00-22:00 22:00-23:00 时间使用汇总与分析 汇总 分析 成功日记 每日感想 2017.03.08 Wed. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 （完成）英语单词5个； （完成）英语学习； webpack继续学习； 学习ES6 Generator函数； 工作 （完成）vim命令整理； （完成）爆米兔上线代码再次分析一遍； （连不上）新开发机环境跑通； （完成）解决pc/移动端映射redirect； （完成）申请ACL权限； （企图上线，但是以失败告终）上线新完成的改动； （完成）添加内存条； 时间-事件-时长详细记录 06:00-07:00 06:10-06:40（30分钟）起床、洗漱； 07:00-08:00 06:40-07:25（45分钟）坐车上班； 07:25-07:35（10分钟）上厕所； 07:35-08:30（55分钟）读英语； 08:00-09:00 08:30-09:10（40分钟）吃早饭、上厕所； 09:00-10:00 09:10-09:30（20分钟）昨日总结与今日安排； 09:30-09:50（20分钟）打印vim命令； 09:50-10:05（15分钟）仔细阅读publish.sh； 10:00-11:00 10:05-10:40（35分钟）新开发机连不上； 11:00-12:00 10:40-11:30（50分钟）pc/移动端映射redirect调整为action调用； 11:30-12:45（75分钟）pc/移动端映射redirect调整为action调用，debug（原本的action还会执行）； 12:00-13:00 12:45-13:10（25分钟）吃午饭； 13:00-14:00 13:10-13:40（30分钟）下楼参与抽奖(3.7)； 13:40-14:25（45分钟）debug（原本的action还会执行），缺少await/sync导致执行的时机问题； 14:00-15:00 14:25-14:55（30分钟）周会； 15:00-16:00 14:55-15:30（35分钟）解决解决pc/移动端映射redirect； 15:30-15:45（15分钟）提交代码； 15:45-16:10（25分钟）趴一会； 16:00-17:00 16:10-16:25（15分钟）申请ACL权限； 16:25-16:35（10分钟）浏览OA申请； 16:35-17:00（25分钟）装内存条、重新申请ACL权限； 17:00-18:00 17:00-17:55（55分钟）企图上线、但是失败了； 18:00-19:00 17:55-19:20（85分钟）打乒乓； 19:00-20:00 19:20-19:50（30分钟）吃晚饭； 20:00-21:00 19:50-21:40（110分钟）等老婆一起回家； 21:00-22:00 21:40-22:30（50分钟）洗澡睡觉（应该看了有20分钟书）； 22:00-23:00 时间使用汇总与分析 汇总 今日总时间为16小时20分钟；生活：5小时；工作：7小时5分钟；学习：1小时15分钟；安排与整理：20分钟；通勤：45分钟；运动：1小时25分钟；杂事：30分钟； 分析 将一些可以用来学习和工作的时间用在了不必要的生活花费上，要合理调整时间安排。 成功日记 1. 睡前看了会书，如果这也算的话。 每日感想 晚上睡觉前利用了短短几分钟的时间学了会习，虽然时间很短，但是会感觉很充实，以后要养成良好地习惯。 debug的能力还是有待提升，面对错误多思考发生错误的可能性。 2017.03.07 Tue. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 （完成）英语单词5个； （完成）英语学习； （完成）webpack了解； （完成）学习PM2； 工作 （上线完成）（上线了但是没有效）baomitu服务号自定义菜单——在线制作； （完成）爆米兔服务上线过程优化（原dev进程，执行testing.js，不编译文件，改为执行development.js）； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床、洗漱、准备早餐； 07:00-08:00 06:45-07:45（60分钟）坐车上班； 08:00-09:00 07:45-08:20（35分钟）学习英语； 08:20-09:00（40分钟）吃早饭、上厕所； 09:00-10:00 09:00-09:15（15分钟）迷糊； 09:15-09:25（10分钟）昨日总结； 10:00-11:00 09:25-10:25（60分钟）爆米兔开发机上线； 10:25-10:45（20分钟）上厕所； 11:00-12:00 10:45-11:50（65分钟）学习PM2，文章一/文章二； 12:00-13:00 11:50-12:15（25分钟）背单词； 12:15-12:35（20分钟）杂事； 12:35-13:10（35分钟）午饭； 13:00-14:00 13:10-14:20（70分钟）午觉； 14:00-15:00 14:20-15:00（40分钟）学习一小时包教会 —— webpack 入门指南； 15:00-16:00 15:00-16:00（60分钟）学习webpack-howto； 16:00-17:00 16:00-16:50（50分钟）学习webpack doc； 17:00-18:00 16:50-17:45（55分钟）小组讨论会； 17:45-17:55（10分钟）下午茶； 18:00-19:00 17:55-19:00（65分钟）学习webpack doc； 19:00-20:00 19:00-19:40（40分钟）坐车回家； 20:00-21:00 19:40-20:55（75分钟）做饭、吃饭、刷锅； 21:00-22:00 20:55-21:45（50分钟）泡脚、洗澡、晾衣服； 21:45-22:00（15分钟）学习webpack四个重要的概念； 22:00-23:00 22:00-22:45（45分钟）学习petehunt webpack演讲； 时间使用汇总与分析 汇总 生活：5小时30分钟；学习：6小时40分钟；工作：1小时55分钟；安排与整理：10分钟；通勤：1小时40分钟；杂事：35分钟； 分析 感觉上在生活上花费了很多的时间，但是只要能够将晚上回家后的时间抽出来好好学习，就能够很好地补充学习时间的不足。 成功日记 1. 学习PM2进程管理工具，对爆米兔服务的上线流程有了深刻的认识，继续加油，对了解到的知识做到深刻理解。 每日感想 今天是3.7女神节，我觉得我一定程度上有点过于依恋媳妇儿了。想着过节，就老早就想着回家，工作的心也有着一点点骚动，这是不对了，要更认真地对待自己的事业，为了自己的明天加油。 2017.03.06 Mon. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 英语单词5个； 英语学习； webpack了解； （完成）promise知识快速回顾； 工作 （完成）申请内存条； （完成）开始制作提示； （上线了但是没有效）baomitu服务号自定义菜单——在线制作； （内存不足，无法进行后续安装）开发机环境安装； （完成）填写飞扬反馈； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床、洗漱； 07:00-08:00 06:45-07:35（50分钟）坐车上班； 08:00-09:00 07:35-09:30（115分钟）吃饭、上厕所、趴会； 09:00-10:00 09:30-09:40（10分钟）申请内存条； 09:40-10:10（30分钟）复习promise； 10:00-11:00 10:10-10:40（30分钟）尝试解决windows rsync问题，未解决； 11:00-12:00 10:40-11:45（65分钟）安装node、升级GCC（进行中）； 12:00-13:00 11:45-12:30（45分钟）学习es6； 12:30-13:10（40分钟）吃午饭； 13:00-14:00 13:10-14:10（60分钟）睡午觉； 14:00-15:00 14:10-15:20（70分钟）学习animation-timing-function之step； 15:00-18:00 15:20-18:40（200分钟）ppt在线制作弹窗设计； 18:00-19:00 18:40-19:25（45分钟）上线爆米兔api； 19:00-20:00 19:25-20:00（35分钟）吃晚饭； 20:00-23:00 20:00-23:00（180分钟）接媳妇、回家、洗澡睡觉； 时间使用汇总与分析 汇总 生活：7小时40分钟；工作：5小时50分钟；学习：2小时25分钟；通勤：50分钟； 分析 工作时间还算正常，但是效率有待提高。 成功日记 1. 相信自己还有提升到余地，你能够做的更好。 每日感想 时间就像海绵里的水，要挤一挤才能有，好好努力，活出更精彩的自己。 2017.03.04-2017.03.05 Sat.-Sun. 每日感想 周六又宅了一天，周日出去疯了一天，以后要利用好周六的时间，这是你努力追赶他人的黄金时间。 2017.03.03 Fri. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）购买收纳凳； （完成）帮瓜瓜去快递，汇通； 学习 英语单词5个； （完成）英语学习； webpack了解； promise知识快速回顾； 工作 填写飞扬反馈； 开始制作提示； 爆米兔上线流程跑通； 完成服务号在线制作菜单功能； vim指令学习； 开发机使用； （完成）测试移动端演播页serviceworker； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床、洗漱； 07:00-08:00 06:45-07:40（55分钟）坐车上班； 07:40-07:50（10分钟）查看信用卡账单； 08:00-09:00 07:50-08:45（55分钟）学习英语； 09:00-10:00 08:45-09:25（40分钟）吃早饭、上厕所； 09:25-09:40（15分钟）浏览基金文章； 09:40-09:55（15分钟）写周报； 10:00-11:00 09:55-10:25（30分钟）H5组周报； 10:25-10:50（25分钟）奇舞团周会； 11:00-12:00 10:50-11:10（20分钟）昨日总结； 11:10-11:15（5分钟）今日安排； 11:15-11:30（15分钟）项目启动； 11:30-11:45（15分钟）上厕所、浏览手机； 11:45-12:00（15分钟）了解service worker； 12:00-13:00 12:00-12:30（30分钟）吃午饭； 12:30-13:00（30分钟）浏览网页、租房信息； 13:00-14:00 13:00-14:00（60分钟）午休； 14:00-15:00 14:00-15:05（65分钟）测试移动端演播页sw； 15:00-16:00 15:05-15:15（10分钟）下午茶； 15:15-15:30（15分钟）重装Git； 15:30-15:40（10分钟）取快递； 15:40-16:05（25分钟）尝试解决windows rsync问题，未解决； 16:00-17:00 16:05-16:20（15分钟）崩溃死机中； 16:20-16:35（15分钟）背单词； 17:00-18:00 16:35-18:45（130分钟）倒腾开发机； 18:00-19:00 19:00-20:00 20:00-21:00 21:00-22:00 22:00-23:00 时间使用汇总与分析 汇总 分析 成功日记 每日感想 2017.03.02 Thur. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成，已收到）发邮件询问党组织关系回执接收情况； （太贵不买了）买鸡毛掸子； （完成）给老婆买个瑜伽球； 学习 英语单词5个； 英语学习； webpack了解； promise知识快速回顾； 工作 （了解了如何进行sftp文件同步）尝试使用开发机； （完成）服务号自定义菜单项调整（20分钟）； （待测试）baomitu服务号自定义菜单——在线制作（50分钟）； （完成）移除对calc、vh、vw的使用（30分钟）； （瓜瓜完成并上线）收藏列表页收藏数和浏览数颠倒； （未完成）开始制作提示； 时间-事件-时长详细记录 07:00-08:00 07:30-09:00（90分钟）起床、洗漱、做早饭、吃早饭； 08:00-09:00 09:00-10:00 09:00-09:35（35分钟）骑车上班； 09:35-09:40（5分钟）开机准备； 09:40-09:45（5分钟）时间记录； 09:45-10:10（25分钟）昨日总结与今日安排； 10:00-11:00 10:10-10:50（40分钟）登陆开发机账号，讨论移动端优化内容； 10:50-11:05（15分钟）罗列优化内容； 11:00-12:00 11:05-11:20（15分钟）移除calc、vh、vw的使用； 11:20-11:40（20分钟）服务号自定义菜单项调整； 11:40-12:05（25分钟）在线制作菜单； 12:00-13:00 12:05-13:05（60分钟）吃午饭，出门买鸡毛掸； 13:00-14:00 13:05-13:25（20分钟）买瑜伽球； 13:25-14:10（45分钟）午休； 14:00-15:00 14:10-15:30（80分钟）baomitu服务号自定义菜单——在线制作（待测试）； 15:00-16:00 15:30-15:45（15分钟）下午茶； 16:00-17:00 15:45-16:25（40分钟）背单词； 17:00-18:00 16:25-18:35（130分钟）爆米兔服务器免密码登陆解决； 18:00-19:00 18:35-19:20（45分钟）打乒乓； 19:00-20:00 19:20-19:50（30分钟）骑车回家； 20:00-23:00 19:50-23:00（190分钟）吃饭、泡脚、刷碗、洗澡； 时间使用汇总与分析 汇总 生活：7小时；学习：40分钟；工作：5小时25分钟；安排与整理：30分钟；通勤：1小时5分钟；运动：45分钟；杂事：5分钟； 分析 晚起会让一天的学习实践大幅减少，以后争取不放松，养成良好的早起习惯，休息日也尽量早起，或者有计划的安排。 成功日记 1. 事无巨细地安排好每日的任务，有条不紊的进行。 每日感想 不能再做愚蠢的事情，当你觉得什么事情不可能发生或者不可能出错时（因为你觉得什么对，一定是系统出了问题），这是往往都是最愚蠢的错误，如自己最不起眼的操作错误。以后遇到问题要淡定处理，这样才能妥善解决问题。不要让自己都觉得自己二。 2017.03.01 Wed. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）京东订单确认并评价； （完成）取现金； （完成）早点回家，并理发； 下午三点发邮件询问党组织关系回执接收情况； 学习 英语单词5个； （完成）英语学习； webpack了解； promise知识快速回顾； 工作 （完成）baomitu api上线； （完成）baomitu服务号自定义菜单——我的PPT； baomitu服务号自定义菜单——在线制作； （完成）微信喜欢列表页，返回按照收藏时间倒序排列； （完成）微信喜欢列表页，未授权逻辑（如未授权，则重新授权）； （完成）跳转链接URL的合成（参数添加）； （完成）action返回参数过滤； （完成）判断是否是移动端，进行相关页面的跳转； （设计完成）在PC端开始制作的提示； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床、洗漱； 07:00-08:00 06:45-07:35（50分钟）坐公交，走路到公司； 08:00-09:00 07:35-08:35（60分钟）学习英语； 08:35-08:45（10分钟）话费充值； 09:00-10:00 08:45-09:20（35分钟）吃早饭、上厕所； 09:20-09:25（5分钟）时间记录； 09:25-10:00（35分钟）前两日总结，今日安排； 10:00-11:00 10:00-10:15（15分钟）京东评价； 10:15-10:30（15分钟）浏览网页； 10:30-11:15（45分钟）爆米兔上线（实则围观瓜瓜上线）； 11:00-12:00 11:15-12:05（50分钟）数据库字段修改（加上wx前缀）、微信喜欢列表按照收藏时间倒序排列、微信喜欢列表action逻辑调整（未授权逻辑）； 12:00-13:00 12:05-12:35（30分钟）解决url参数拼接问题ing； 12:35-13:15（40分钟）吃午饭； 13:00-14:00 13:15-14:15（60分钟）午休； 14:00-15:00 14:15-14:25（10分钟）周会工作总结； 15:00-16:00 14:25-15:35（70分钟）周会； 15:35-15:45（10分钟）下午茶； 15:45-16:00（15分钟）浏览自传播文章链接； 16:00-17:00 16:00-16:50（50分钟）跳转链接URL的合成（添加新的参数）——使用node url模块相关方法； 16:50-17:05（15分钟）model中查询结果字段过滤； 17:00-18:00 17:05-17:15（10分钟）实时进度沟通； 18:00-19:00 17:15-18:35（80分钟）思考点击制作如何提示； 19:00-20:00 18:35-19:20（45分钟）判断是否是移动端，进行相关页面的跳转； 19:20-19:50（30分钟）代码合并上线； 20:00-21:00 19:50-20:15（25分钟）吃晚饭； 20:15-20:45（30分钟）上线测试； 21:00-22:00 20:45-21:20（35分钟）坐车回家； 21:20-21:50（30分钟）理发； 22:00-23:00 21:50-22:50（60分钟）吃吃喝喝、洗洗睡觉； 时间使用汇总与分析 汇总 生活：5小时；学习：1小时15分钟；工作：7小时45分钟；安排与整理：40分钟；通勤：1小时25分钟；杂事：30分钟； 分析 工作时间超过五小时，工作较为饱和，但是可以适当调整一小时用于学习，避免工作疲劳，同时能够多些学习的时间。 成功日记 1. 感觉得到自己的搜索能力在提升，每次进行问题搜索前要提炼出自己想要搜索的关键词，刚开始可能很难，但久而久之就能够快速提炼出关键词了。 每日感想 虽然工作时间较为饱和，工作强度大，但是在这样的情况下才能够学习到更多的知识。趁着年轻，不怕苦不怕累，多学习多实践。为了梦想加油。合理安排自己的工作，不要让自己没事可干，没东西可学。 2017.02.28 Tue. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （回家太晚，要等）理发； 学习 （未完成）英语单词5个； （完成）英语学习； （未进行）webpack学习； 工作 （完成）代码联调–我喜欢的PPT列表； （完成）代码联调–点击收藏PPT（静默授权，添加收藏记录）； baomitu api上线； baomitu服务号自定义菜单； 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）起床、洗漱； 07:00-08:00 06:50-07:45（55分钟）坐车上班； 08:00-09:00 07:45-08:45（60分钟）学习英语； 09:00-10:00 08:45-09:20（35分钟）吃早饭、上厕所； 09:20-09:35（15分钟）杂事； 10:00-11:00 09:35-12:40（185分钟）联调； 11:00-12:00 12:00-13:00 12:40-13:15（35分钟）吃午饭； 13:00-14:00 13:15-14:10（55分钟）午休； 14:00-15:00 14:10-15:45（95分钟）完成喜欢的PPT列表页联调，进行添加到收藏功能联调； 15:00-16:00 15:45-16:20（35分钟）讨论微信收藏逻辑； 16:00-17:00 16:20-17:35（75分钟）添加取消收藏逻辑，修改添加收藏逻辑； 17:00-18:00 17:35-17:40（5分钟）上厕所； 18:00-19:00 19:00-20:00 17:40-20:20（160分钟）和瓜瓜联调代码； 20:00-21:00 20:20-20:45（25分钟）吃晚饭； 21:00-22:00 20:45-21:25（40分钟）坐车回家； 22:00-23:00 21:25-22:30（65分钟）洗澡，泡脚睡觉； 时间使用汇总与分析 汇总 生活：4小时15分钟；工作：9小时10分钟；学习：1小时；通勤：1小时35分钟；杂事：15分钟； 分析 今天工作占的比重较多，没能抽出时间学习，相应的工作较为饱和，强度较大。 成功日记 1. 虽然离牛人还很远，但是还是能够感觉到自己的成长，经过几天的学习，发现自己查文档的能力有了一定的加强，继续努力，你一定会成为你眼中的牛人的。 每日感想 看比自己牛的人debug，真的是一件难得的好事，能够从别人debug的过程中学习到很多自己不知道的技巧，对比别人自己也要相应的加强debug方面的能力。 2017.02.27 Mon. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （回家太晚）理发； 学习 （未完成）英语单词5个； （完成）英语学习； （完成）复习promise； （完成）学习《Javascript Promise迷你书》； 工作 （明天进行）和瓜瓜联调； 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）起床洗漱； 07:00-08:00 06:50-07:40（50分钟）坐车上班； 07:40-07:45（5分钟）开机准备； 08:00-09:00 07:45-08:40（55分钟）学习新概念英语； 08:40-09:20（40分钟）吃早饭、上厕所； 09:00-10:00 09:20-09:45（25分钟）浏览手机； 09:45-09:50（5分钟）今日安排； 09:50-10:00（10分钟）周末总结； 10:00-11:00 10:00-10:10（10分钟）梦想回顾； 11:00-12:00 10:10-11:55（105分钟）复习primise； 11:55-12:00（5分钟）休息五分钟； 12:00-13:00 12:00-12:30（30分钟）复习promise； 12:30-13:00（30分钟）吃午饭； 13:00-14:00 13:00-13:20（20分钟）玩手机； 13:20-14:10（50分钟）午休； 14:00-15:00 14:10-14:35（25分钟）寄送党组织关系接收回执； 15:00-16:00 14:35-15:30（55分钟）学习《Javascript Promise迷你书》； 15:30-15:35（5分钟）下午茶； 16:00-17:00 15:35-16:30（55分钟）学习《Javascript Promise迷你书》； 16:30-16:50（20分钟）下载新概念英语1偶数课MP3； 17:00-18:00 16:50-18:00（70分钟）学习《Javascript Promise迷你书》； 18:00-19:00 18:00-18:20（20分钟）杂事； 19:00-20:00 18:20-19:35（75分钟）打乒乓； 19:35-19:55（20分钟）吃晚饭； 20:00-21:00 19:55-21:10（75分钟）听分享会； 21:00-22:00 21:10-21:50（40分钟）坐车回家； 22:00-23:00 21:50-22:50（60分钟）洗澡、洗内裤、睡觉； 时间使用汇总与分析 汇总 生活：4小时50分钟；学习：7小时25分钟；工作：0；安排：25分钟；通勤：1小时30分钟；运动：1小时15分钟；杂事：1小时10分钟； 分析 时间分配还算合理，利用了工作时间，学习了promise。 成功日记 1. 学习某个内容，要学会深入地去了解，不要半知半会，养成良好的习惯。 每日感想 学习知识要深入学习，了解其本质，不能因为难以理解就放弃，要用心学习。 2017.02.26 Sun. 每日感想 今天是开心的一天，早上起来美美的吃了顿饭，然后陪老婆一起外出，虽然原计划看电影没有进行。但是逛了逛街，吃了火锅，逛了宜家，最后又骑车到了公司旁边的798，买了大鱼盆，逛了南皋菜市场，买了小鱼苗。老婆今天也开开心心的，虽然最后头有点疼，但是还是开心的周末。 没错，这就是开心流水账。哈哈哈哈！ 2017.02.25 Sat. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）煮一锅美味的鱼汤； 健身1小时； 学习 英语单词5个； 英语音标学习； （完成）听完《解忧杂货店》； （完成）吉他练习90分钟； 复习，并深入学习promise； 工作 时间-事件-时长详细记录 06:00-07:00 06:20-06:50（30分钟）起床洗漱； 07:00-08:00 06:50-09:20（150分钟）听完《解忧杂货店》； 08:00-09:00 09:00-10:00 09:20-10:00（40分钟）上厕所、刷碗、洗内裤； 10:00-11:00 10:00-10:30（30分钟）昨日总结，今日安排； 10:30-10:45（15分钟）回顾2017年度梦想清单； 11:00-12:00 10:45-11:40（55分钟）练吉他； 12:00-13:00 11:40-12:40（60分钟）玩手机； 13:00-22:00 鬼知道我都该干了些什么，吃吃喝喝，看视频玩玩闹闹就过去了一天。 时间使用汇总与分析 汇总 分析 成功日记 时光浪费的很成功！！！要认识自己的问题！！！ 每日感想 时光浪费的很成功！！！要认识自己的问题！！！ 2017.02.24 Fri. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 （完成）英语单词5个； （完成）英语音标学习； （完成）ES6——promise一章； thinkjs文档学习； 工作 （完成）微信收藏列表页面制作； （完成）爆米兔静默授权API完成调整，不用再修改： 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）起床，洗漱； 07:00-08:00 06:50-07:35（45分钟）坐车上班； 07:35-07:45（10分钟）开机准备； 08:00-09:00 07:45-08:35（50分钟）学习英语； 08:35-09:10（35分钟）吃早饭，上厕所； 09:00-10:00 09:10-09:45（35分钟）听《解忧杂货店》； 09:45-10:00（15分钟）昨日总结和今日安排； 10:00-11:00 10:00-10:25（25分钟）看ES6； 10:25-11:25（60分钟）周会，吃蛋糕； 11:00-12:00 11:25-12:30（65分钟）学习； 12:00-13:00 12:30-13:00（30分钟）吃午饭； 13:00-14:00 13:00-14:10（70分钟）午休； 14:00-15:00 14:10-14:30（20分钟）背单词； 14:30-14:50（20分钟）查看promise文档； 15:00-16:00 14:50-15:25（35分钟）爆米兔api调整完成，commit； 16:00-17:00 15:25-16:35（70分钟）收藏页面编写； 16:35-17:00（25分钟）党组织关系接收回执； 17:00-18:00 17:00-17:45（45分钟）微信收藏列表页面制作； 18:00-19:00 17:45-18:30（45分钟）整理promise学习资料； 19:00-20:00 18:30-22:30（240分钟）陪老婆坐车回家、吃饭休闲； 20:00-21:00 21:00-22:00 22:00-23:00 时间使用汇总与分析 汇总 生活：7小时15分钟；学习：4小时20分钟；工作：3小时30分钟；安排与整理：15分钟；通勤：45分钟；杂事：10分钟； 分析 每天的时间分配总是不固定的，为了防止突发事件的发生，所以要充分利用好可利用的时间，提高效率，这样才能够完成更多的内容。 成功日记 1. 寻找自己的方法，有意识的去深入学习一件事情，要学习一样事物就要能够做到深入了解。 每日感想 感觉自己还没有能够激励自己，让自己更加投入地去改变自己。对工作、学习都没要充满激情，而是有着一定的懈怠。 想想自己的梦想吧，努力加油才能够实现呢，难道你甘愿平庸一生嘛。燃烧小宇宙吧。 2017.02.23 Thur. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）买丹皮酚； 学习 （完成）英语单词5个； 英语音标学习； （放弃翻译，完成度60%）翻译《Animation in Design Systems》（3天内完成，3/3）； ES6——promise一章； thinkjs文档学习； 工作 （50%）公众号自定义菜单创建； （70%）微信收藏列表页； 时间-事件-时长详细记录 06:00-07:00 07:00-08:00 08:00-09:00 08:00-09:20（80分钟）起床、洗漱、晾衣服、吃饭； 09:00-10:00 09:20-09:55（35分钟）骑车上班； 09:55-10:05（10分钟）开机准备； 10:00-11:00 10:05-10:30（25分钟）昨日总结； 10:30-10:35（5分钟）今日安排； 10:35-10:50（15分钟）上厕所； 11:00-12:00 10:50-11:10（20分钟）听有声书； 11:10-12:20（70分钟）微信收藏列表页； 12:00-13:00 12:20-12:50（30分钟）吃午饭； 13:00-14:00 12:50-13:10（20分钟）出门买药； 13:10-14:10（60分钟）午休； 14:00-15:00 14:10-15:00（50分钟）完成微信收藏列表页action； 15:00-16:00 15:00-15:35（35分钟）讨论微信公众号自定义菜单； 15:35-16:00（25分钟）讨论、发呆、上厕所、下午茶； 16:00-17:00 16:00-16:15（15分钟）关注时事NASA发现七颗类地行星； 17:00-18:00 16:15-17:50（95分钟）微信收藏列表页（action完成，卡在无法实时编译页面）； 18:00-19:00 17:50-18:25（35分钟）背单词； 18:25-18:30（5分钟）上厕所； 19:00-20:00 18:30-19:10（40分钟）翻译； 19:10-19:15（5分钟）看小说； 19:15-19:30（15分钟）杂乱； 19:30-19:50（20分钟）吃晚饭； 20:00-21:00 19:50-20:30（40分钟）骑车回家； 20:30-21:00（30分钟）洗草莓，洗衣服； 21:00-22:00 21:00-21:35（35分钟）泡脚，洗漱； 21:35-21:45（10分钟）放弃翻译（文章内容语句不通，难以翻译）； 22:00-23:00 时间使用汇总与分析 汇总 生活：4小时55分钟；学习：1小时50分钟；工作：4小时10分钟；安排与整理：30分钟；通勤：1小时15分钟；杂事：1小时5分钟； 分析 今天整体的时间只有13小时45分钟；晚起和早睡让一天的时间缩短了很多，还是要继续保持有规律的作息习惯，提高每日学习的时间。 成功日记 感觉今天一事无成，要打起精神干事情，加油。 每日感想 今天状态不佳，工作和学习起来都没有劲，感觉自己还是缺乏动力，要努力想清楚自己想要的是什么，该如何去做，打起精神干事情，才能越干越好。加油吧，小峰峰。 2017.02.22 Wed. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）交房租； （完成）塞两包抽纸在包里； 学习 （完成）英语单词5个； （完成）英语音标学习； （完成）翻译《Animation in Design Systems》（3天内完成，2/3）； （完成）学习thinksjs文档； 工作 （完成）微信授权获取openid完全走通； （完成）微信授权后添加收藏； 微信收藏列表页； 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）起床、洗漱； 07:00-08:00 06:50-07:45（55分钟）坐车上班； 07:45-07:50（5分钟）开机准备； 08:00-09:00 07:50-08:35（45分钟）学习英语； 08:35-09:25（50分钟）吃早饭、上厕所； 09:00-10:00 09:25-09:30（5分钟）今日安排； 09:30-09:55（25分钟）调整代码； 10:00-11:00 09:55-10:10（15分钟）上楼取感冒药； 10:10-10:50（40分钟）微信静默授权完成； 11:00-12:00 10:50-11:30（40分钟）新建收藏表，静默授权后跳转到新增收藏； 11:30-11:45（15分钟）添加到微信收藏表； 11:45-11:55（10分钟）房租转账； 12:00-13:00 11:55-12:25（30分钟）收藏列表时间默认值设定； 12:25-13:00（35分钟）吃午饭； 13:00-14:00 13:00-13:05（5分钟）向瓜瓜汇报工作进度； 13:05-14:10（65分钟）午休； 14:00-15:00 14:10-14:25（15分钟）发呆中； 14:25-14:45（20分钟）开周会； 15:00-16:00 14:45-15:05（20分钟）帮任杰拿电脑； 15:05-15:10（5分钟）吃苹果； 15:10-15:30（20分钟）背单词； 16:00-17:00 15:30-17:00（90分钟）翻译； 17:00-18:00 17:00-17:10（10分钟）冲药，上厕所； 17:10-17:35（25分钟）翻译； 17:35-17:45（10分钟）玩手机； 18:00-19:00 17:45-18:10（25分钟）学习thinkjs； 18:10-19:20（70分钟）打乒乓； 19:00-20:00 19:20-19:50（30分钟）吃晚饭； 20:00-21:00 19:50-20:25（35分钟）坐车回家； 20:25-20:40（15分钟）给老婆捏脚； 20:40-21:05（25分钟）吃夜宵，泡脚； 21:00-22:00 21:05-21:20（15分钟）剪脚趾甲，听《解忧杂货店》； 21:20-22:10（50分钟）洗澡，洗衣服，给老婆吹头发； 22:10-22:35（25分钟）看ES6； 22:00-23:00 时间使用汇总与分析 汇总 生活：5小时55分钟；学习：3小时50分钟；工作：3小时；安排与整理：5分钟；运动：1小时10分钟；通勤：1小时30分钟；杂事：50分钟； 分析 每天工作时间过久，其实工作的效率并不会很高，合理安排工作的时间，抽出时间来运动能够有效提高身体素质。 成功日记 1. 严格按照自己的安排做事情，能够提高事情的完成度，以后也要合理地给自己安排工作。 2. 晚上看了一会ES6，虽然只有短短的25分钟，只看了4页而已，但是如果这么点时间不看书也会很快过去，所以要充分利用间隙时间，打起精神往前冲，加油。 每日感想 今天回家，看到老婆一脸憔悴，真的很心疼，老婆最近好辛苦，我要好好努力，给老婆好的生活，好好爱老婆。 2017.02.21 Tue. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 （完成）英语单词5个； （完成）英语音标学习； （完成）翻译校验； 翻译《Animation in Design Systems》； 工作 （完成）研究fiddler，实现访问本地API； （完成）微信授权获取openid； 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）洗漱； 07:00-08:00 06:50-07:35（45分钟）坐车上班； 07:35-07:45（10分钟）开机准备； 08:00-09:00 07:45-08:40（55分钟）学习英语音标； 09:00-10:00 08:40-09:20（40分钟）吃早饭，上厕所； 09:20-09:50（30分钟）昨日总结； 10:00-11:00 09:50-11:20（90分钟）翻译校验完成《CSS补丁的痛楚》； 11:00-12:00 11:20-11:30（10分钟）上厕所，放松； 11:30-12:10（40分钟）学习fiddler（吃了感冒药犯困中）； 12:00-13:00 12:10-12:40（30分钟）吃午饭； 13:00-14:00 12:40-14:10（90分钟）午休； 14:00-15:00 14:10-15:20（70分钟）跑通api.baomitu.com环境； 15:00-16:00 15:20-16:50（90分钟）折腾微信开发者工具，测试接口； 16:00-17:00 16:50-17:10（20分钟）背单词； 17:00-18:00 17:10-18:10（60分钟）折腾爆米兔接口调试，提交代码； 18:00-19:00 18:10-19:10（60分钟）打乒乓； 19:00-20:00 19:10-19:30（20分钟）接口测试； 19:30-19:55（25分钟）吃晚饭； 20:00-21:00 19:55-20:35（40分钟）坐车回家； 20:35-21:15（40分钟）上厕所，洗澡； 21:00-22:00 21:15-21:25（10分钟）走通反向代理； 21:25-22:15（50分钟）微信静默授权，获取到了openid； 22:15-22:30（15分钟）今日总结； 22:00-23:00 时间使用汇总与分析 汇总 生活：4小时20分钟；学习：3小时25分钟；工作：5小时；安排与整理：30分钟；运动：1小时；杂事：20分钟； 分析 今天在空出了一个小时运动的情况下还能完成工作任务值得鼓励。但是在下午的工作过程中效率并不高，晚上短短1小时解决了下午没能解决的问题。有的时候不能把任务想的太难，其实何容易。一边工作一百年学习，将效率不高的时候用来学习。 成功日记 1. 利用下班后的一小时完成了白天半天没能解决的问题，一方面自己能够坚持完成任务值得鼓励。一方面也要告诉自己不要因难而退。加油，你也会是个技术牛人的。 2. 完成了翻译的校对，重读一遍自己的翻译能够认识到很多翻译的问题 ，对翻译的内容也是一个复习的过程。 每日感想 白天挫败了一天，没想到晚上一个小时就解决了难题，所以有的时候思路要保持清晰，找准自己的思路。多换种思路去思考，会更好地解决问题。 2017.02.20 Mon. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 英语单词5个； （完成）英语音标学习； （完成）翻译一篇短文章（3天内完成，2/3）； 工作 （完成）收藏表设计； （25%）微信获取个人信息； 移动端演播页页面； 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）起床； 07:00-08:00 06:50-07:40（50分钟）坐车上班； 07:40-07:55（15分钟）开机准备； 08:00-09:00 07:55-08:20（25分钟）学习英语英标； 08:20-08:35（15分钟）杂七杂八； 09:00-10:00 08:35-09:10（35分钟）吃早饭，上厕所； 09:10-09:30（20分钟）趴一会； 10:00-11:00 09:30-12:20（170分钟）翻译； 11:00-12:00 12:00-13:00 12:20-12:55（35分钟）午饭； 13:00-14:00 12:55-14:10（75分钟）午休； 14:00-15:00 14:10-15:15（65分钟）微信授权调研，微信收藏表设计； 15:00-16:00 15:15-16:10（55分钟）演播页工作划分； 16:00-17:00 16:10-17:15（65分钟）微信授权（5%）； 17:00-18:00 17:15-17:25（10分钟）看每天运动的人生到底有多赚； 17:25-18:15（50分钟）思考微信授权流程（走爆米兔的服务）； 18:00-19:00 18:15-19:00（45分钟）微信静默授权认证； 19:00-20:00 19:00-19:45（45分钟）打乒乓球； 20:00-21:00 19:45-20:10（25分钟）吃晚饭； 20:10-21:10（60分钟）分享会； 21:00-22:00 21:10-21:20（10分钟）收拾书包回家； 21:20-21:50（30分钟）骑车回家； 22:00-23:00 21:50-22:25（35分钟）洗澡； 22:25-23:05（40分钟）翻译； 时间使用汇总与分析 汇总 生活：4小时20分钟；学习：4小时55分钟；工作：4小时40分钟；通勤：1小时20分钟；运动休闲：45分钟；杂事：50分钟； 分析 今天在生活、学习以及工作三大块上花费的时间比较平均。在早上没有工作状态时，努力让自己进行了英文的翻译，在下午状态良好时进行了工作，晚上坚持完成了没完成的翻译任务。以后继续调整自己。 成功日记 1. 在状态不好的时候，调整自己去做不用太费神的翻译工作，等待调整好后在进行相关工作，调节能力得到了一定的提升。 2. 对工作进行了划分，并给自己做了时间评估，继续保持，提高自己的时间管理能力。 每日感想 晚上骑车的时候和瓜瓜聊了会天，觉得自己不太自信，以后要多给自己一些肯定，并且努力向前。现在每天都有在进步，我也能做的跟他们一样好。给自己定个目标，并且给出时间限制，一定能够实现。 2017.02.18-2017.02.19 Sat.-Sun.周末放假。 2017.02.17 Fri. 给自己一个警告，以后的总结与每日感想必须在当天或者次日早上完成，拖欠后在弥补就失去了效果。 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 英语单词5个； （完成）英语音标学习； （完成）翻译一篇短文章（3天内完成，2/3）； 工作 （50%）移动端演播页页面； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床洗漱； 07:00-08:00 06:45-07:35（50分钟）坐车上班； 07:35-07:40（5分钟）开机准备； 08:00-09:00 07:40-08:25（45分钟）学习英语音标； 08:25-08:45（20分钟）昨日总结与今日总结； 09:00-10:00 08:45-09:25（40分钟）吃早饭，上厕所； 09:25-09:35（10分钟）背单词； 10:00-11:00 09:35-11:45（130分钟）移动端页面； 11:00-12:00 11:45-11:50（5分钟）上厕所； 12:00-13:00 11:50-12:05（15分钟）找素材，左右翻页； 12:05-12:40（35分钟）吃午饭； 13:00-14:00 12:40-14:15（95分钟）午休； 14:00-15:00 14:15-15:35（80分钟）移动端页面，左右翻页提示； 15:00-16:00 15:35-16:05（30分钟）设计稿讨论； 16:00-17:00 16:05-16:20（15分钟）调整进度条样式； 16:20-17:35（75分钟）控制条样式； 17:00-18:00 17:35-17:50（15分钟）吃东西果腹； 18:00-19:00 17:50-18:30（40分钟）个人信息展示； 18:30-19:20（50分钟）翻译； 19:00-20:00 19:20-19:40（20分钟）杂事； 19:40-20:05（25分钟）吃晚饭； 20:00-21:00 21:00-22:00 22:00-23:00 时间使用汇总与分析 汇总 分析 成功日记 每日感想 2017.02.16 Thur. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）还书； 学习 英语单词5个； 英语音标学习； 翻译一篇短文章（3天内完成，1/3）； 工作 （1%）移动端演播页页面（万事开头难，明天加油吧，尴尬）； 时间-事件-时长详细记录 06:00-07:00 07:00-08:00 08:00-09:00 08:00-09:10（70分钟）起床、做早饭、吃早饭； 09:00-10:00 09:10-09:45（35分钟）骑车上班； 09:45-09:55（10分钟）今日安排； 10:00-11:00 09:55-10:10（15分钟）昨日总结； 11:00-12:00 10:10-12:25（135分钟）看项目代码； 12:00-13:00 12:25-12:50（25分钟）吃午饭； 13:00-14:00 12:50-13:10（20分钟）玩手机； 13:10-13:40（30分钟）睡午觉； 13:40-13:50（10分钟）玩手机； 14:00-15:00 13:50-15:35（105分钟）项目懵比中（要加强项目架构的学习）； 15:00-16:00 15:35-16:45（70分钟）thinkjs文档； 16:00-17:00 16:45-17:05（20分钟）大号； 17:00-18:00 17:05-18:05（60分钟）解决项目模板无法指定问题（满满的挫败感），原因是不能跳出当前module，绝对路径只是在当前module目录下的文件； 18:00-19:00 18:05-18:20（15分钟）还书； 18:20-19:10（50分钟）翻译； 19:00-20:00 19:10-19:20（10分钟）看小说，上厕所； 19:20-19:45（25分钟）吃晚饭； 20:00-21:00 19:45-20:20（35分钟）坐车回家； 21:00-22:00 20:20-20:50（30分钟）洗澡； 22:00-23:00 20:50-22:00（70分钟）看视频； 时间使用汇总与分析 汇总 生活：3小时30分钟；学习：无；工作：7小时；安排与整理：25分钟；通勤：1小时10分钟；杂事：1小时55分钟； 分析 今天的学习时间为0。今天起的比较晚，没能利用早起的时间学习，晚上又没有提高警惕，选择了放松。所以没有进行一点学习。或许每天一个小时的学习并不觉得什么，但是如果每天都不学习绝对是一点收获也不会有的，一定要敲响警钟，充分利用学习实践学习。 成功日记 1. 今日很挫败，但是在挫败中也坚持解决了自己开发的开头难问题，也认识到了自己的问题。以后继续加油。 每日感想 今天在项目中遇到了问题，说是问题其实也不是问题，主要是我对项目的整体架构缺乏了解。当需要修改的时候却不知道该如何修改。为了避免出现这样的情况，我要对系统所使用的框架进行更深入的了解，并对系统开发所需的基础知识进行更多的弥补。接下来的时间里，我要付出多于别人的努力才能缩小差距，不要企图安逸，要动起来，你是要挑大梁的人。充分准备，把握机会。 2017.02.15 Wed. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）把祥磊的书拿在显眼的地方，周末送给他； （完成）补充结婚时的礼金单； 学习 （完成）英语单词5个； （完成）英语音标学习； 今日总结； （完成）翻译一篇短文章； 工作 （完成）和瓜瓜讨论如何开展工作； 时间-事件-时长详细记录 06:00-07:00 06:15-06:50（35分钟）起床洗漱； 07:00-08:00 06:50-07:40（50分钟）坐车上班； 07:40-08:20（40分钟）音标学习； 08:00-09:00 08:20-08:40（20分钟）打电话； 08:40-09:10（30分钟）吃早饭、上厕所； 09:00-10:00 09:10-09:25（15分钟）听有声书《小狗钱钱》； 09:25-10:05（40分钟）制作《不靠谱家长 v.s. 普通家长 v.s. 靠谱家长 》； 10:00-11:00 11:00-12:00 10:05-11:55（110分钟）完成翻译短文； 12:00-13:00 11:55-12:20（25分钟）放松眼睛，听有声书《小狗钱钱》； 12:20-13:00（40分钟）吃午饭，啃苹果； 13:00-14:00 13:00-14:05（65分钟）睡午觉； 14:05-14:30（25分钟）翻译校对； 14:00-15:00 14:30-15:45（75分钟）开周会； 15:00-16:00 15:45-16:00（15分钟）杂七杂八； 16:00-17:00 16:00-17:05（65分钟）谷歌设计师的Material Design实践心得 17:00-18:00 17:05-17:20（15分钟）上厕所，买吃的； 17:20-17:40（20分钟）背单词； 17:40-17:55（15分钟）上厕所； 18:00-19:00 17:55-18:25（30分钟）浏览UI中国； 18:25-19:20（55分钟）翻译新文章； 19:00-20:00 19:20-20:00（40分钟）等吃饭、吃饭； 20:00-21:00 20:00-20:50（50分钟）接老婆坐车下班； 21:00-22:00 20:50-21:10（20分钟）准备水果； 21:10-21:30（20分钟）补充结婚时的礼金单； 21:30-21:55（25分钟）翻译； 21:55-22:10（15分钟）洗澡； 22:00-23:00 时间使用汇总与分析 汇总 生活：5小时15分钟；学习：6小时50分钟；工作：1小时55分钟；通勤：1小时40分钟；杂事：15分钟； 分析 今天的时间分配很不合理，工作状态不佳，用来学习和浏览设计网站。以后要好好调整。 成功日记 1. 牢记了72小时法则，在3天内完成了第一篇文章的翻译——CSS通用数据类型 每日感想 今天整个人状态不佳，工作进行的并不好。要继续保持专注，在有限的时间内去做一件事，并且遵循“72小时法则”。 2017.02.14 Tue. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）给爸妈打电话； （完成）晚上问成成小萌结婚的事情； 学习 （完成）英语单词5个； （完成）英语音标学习； 今日总结与明日安排； （完成）02-11总结； 翻译一篇短文章； 工作 （完成）移动端优化原型图重画； （完成）过需求； （完成）调整原型后给小雨发需求邮件； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床、洗漱； 07:00-08:00 06:45-07:35（50分钟）坐车上班； 07:35-07:45（10分钟）开机准备； 08:00-09:00 07:45-08:20（35分钟）学习英语音标； 08:20-08:40（20分钟）上厕所； 08:40-08:45（5分钟）02-11总结； 09:00-10:00 08:45-09:20（35分钟）吃早饭； 09:20-09:30（10分钟）上厕所； 09:30-09:50（20分钟）背单词； 10:00-11:00 09:50-11:25（95分钟）重绘移动端优化原型图； 11:00-12:00 11:25-11:40（15分钟）中途休息，看笑话； 11:40-12:15（35分钟）重绘移动端优化原型图； 12:00-13:00 12:15-12:20（5分钟）上厕所，休息； 12:20-12:45（25分钟）吃午饭； 12:45-12:55（10分钟）查看演说; 12:55-13:05（10分钟）饭后闲聊； 13:00-14:00 13:05-13:25（20分钟）完成重绘移动端优化原型图； 14:00-15:00 13:25-14:35（70分钟）午休； 14:35-15:20（45分钟）和瓜瓜讨论原型、调整原型； 15:00-16:00 15:20-16:00（40分钟）和小雨过需求； 16:00-17:00 16:00-16:45（45分钟）参与debug（360浏览器声享无法登陆-&gt;serviceworker）； 17:00-18:00 16:45-18:00（75分钟）调整原型后给小雨发需求邮件； 18:00-19:00 18:00-18:15（15分钟）上厕所，休息； 18:15-18:40（25分钟）参与debug（360浏览器声享无法登陆-&gt;serviceworker）； 19:00-20:00 18:40-19:20（40分钟）坐车回家； 20:00-21:00 19:20-21:20（120分钟）回家帮老婆做饭、吃饭； 21:00-22:00 21:20-21:50（30分钟）刷碗； 22:00-23:00 21:50-22:10（20分钟）洗澡； 22:10-22:30（20分钟）总结； 时间使用汇总与分析 汇总 生活：6小时5分钟；学习：55分钟；工作：6小时30分钟；安排与整理：5+？；通勤：1小时30分钟；杂事：50分钟； 分析 今天在学习上的时间花费了较少，每天要留出一定的时间来学习充电，因为是情人节所以在生活上的时间多了些，热爱生活热爱她。 成功日记 1. 今天任务的完成率很高，说明我在不断的进步，继续加油。 2. 按照优先级，在有限的时间内给自己安排任务，大大提高了我的效率，之后要继续坚持对的方法。 3. 快速地完成了移动端优化的原型图绘制，又提升了一项能力。 每日感想 今天是情人节，没有给老婆准备礼物，虽然老婆嘴上说说不在意，但是我看的出来，女孩子还是会期待惊喜的，以后一定要懂得爱老婆，给予他完美的爱。加油。 2017.02.13 Mon. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）《记看啥都不爽的一天——致媳妇》 学习 （完成）英语单词5个； （完成）英语音标学习； （完成）每日总结与安排； （10%）翻译一篇短文章； （完成）制作梦想画布； 工作 （完成）移动端重构方案完善； （完成）移动端重构方案讨论； （5%）移动端重构实施； 时间-事件-时长详细记录 06:00-07:00 06:15-06:45（30分钟）起床、洗漱、晾衣服； 07:00-08:00 06:45-07:30（45分钟）坐车上班； 07:30-07:55（25分钟）准备工作，进入状态； 08:00-09:00 07:55-08:20（25分钟）学习英语； 08:20-08:25（5分钟）今日安排； 08:25-09:05（40分钟）写《记看啥都不爽的一天——致媳妇》； 09:00-10:00 09:05-09:30（25分钟）吃早饭； 10:00-11:00 09:30-10:35（65分钟）写《记看啥都不爽的一天——致媳妇》； 10:35-11:15（40分钟）完成梦想画布； 11:00-12:00 11:15-12:25（70分钟）完善移动端优化方案； 12:00-13:00 12:25-12:45（20分钟）吃午饭； 12:45-13:00（15分钟）完成移动端优化方案； 13:00-14:00 13:00-14:10（70分钟）睡午觉； 14:00-15:00 14:10-14:45（35分钟）编写移动端loading样式； 15:00-16:00 14:45-16:05（80分钟）讨论移动端优化方案； 16:00-17:00 16:05-16:20（15分钟）下午茶时间，休息休息； 17:00-18:00 16:20-17:25（65分钟）完成讨论移动端优化方案； 17:25-17:30（5分钟）替换优先级图标； 17:30-17:55（25分钟）背诵单词五个； 18:00-19:00 17:55-18:05（10分钟）查看宜家健身垫价钱、下载一个喜欢的手机主题； 18:05-18:35（30分钟）翻译《CSS通用数据类型》； 19:00-20:00 18:35-19:35（60分钟）打乒乓球； 19:35-20:00（25分钟）吃晚饭； 20:00-21:00 20:00-20:35（35分钟）坐车回家； 20:35-20:45（10分钟）回家收拾下（贴梦想画布）； 21:00-22:00 20:45-21:25（40分钟）洗澡，洗内衣； 21:25-21:35（10分钟）手机贴膜； 22:00-23:00 21:35-22:35（60分钟）翻译； 22:35-22:55（20分钟）今日总结与明日安排； 时间使用汇总与分析 汇总 生活：5小时15分钟；学习：3小时；工作：4小时25分钟；安排与整理：30分钟；运动：1小时；通勤：1小时20分钟；杂事：1小时10分钟； 分析 今天时间安排的都比较合理，主要归功于一次专注于一个任务，按照任务的优先级进行排序，才能更好地执行其他任务。 成功日记 1. 想到的事情立马去做，完成了《记看啥都不爽的一天——致媳妇》。 2. 学会了给任务制定严格的优先级，按照优先级执行任务，一次只关注一个任务，大大提高了自己的效率。 3. 完成了学习单词这一个小任务，之前都因为小而没有完成过。 4. 制作了自己的梦想画布，要朝着目标努力。 5. 开始通过翻译学习英语，而且还能提高技术能力。 每日感想 首先，完成了《记看啥都不爽的一天——致媳妇》这一重大感想，希望老婆乖乖的。 其次，体会到了工作效率提升的满足感，以后要更好地总结他人的经验，提高自己的效率。 2017.02.12 Sun.今日无记事，主要咨询了保险、逛了超市、练习了吉他； 2017.02.11 Sat. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）打扫卫生； （完成）清洗衣物； 学习 （完成）总结扎克伯格提高效率的内容； 英语单词5个； 英语音标学习； 每日总结与安排； 翻译一篇短文章； 吉他学习1.5小时； 工作 时间-事件-时长详细记录 06:00-07:00 06:20-07:20（1小时）起床、洗漱、送老婆上班； 07:00-08:00 07:20-08:00（40分钟）看视频； 08:00-09:00 08:00-08:30（30分钟）吃早饭、叠衣服； 09:00-10:00 08:30-10:20（110分钟）看视频； 10:00-11:00 10:20-11:00（40分钟）打扫卫生； 11:00-12:00 11:00-11:15（15分钟）杂事，乱收拾； 11:15-11:40（25分钟）昨日总结、更新年度计划（新增购置笔记本）； 12:00-13:00 11:40-12:35（55分钟）写扎克伯格提高效率总结； 12:35-12:45（10分钟）休息（看张小说）； 13:00-14:00 12:45-13:10（25分钟）吃午饭； 14:00-15:00 13:10-15:00（110分钟）完成扎克伯格提高效率总结； 15:00-16:00 15:00-16:50（110分钟）看视频； 16:00-17:00 16:50-17:10（20分钟）小眯一会； 17:00-24:00 17:00-24:00（7小时）到玉文家聚会； 时间使用汇总与分析 汇总 无汇总 分析 无分析 成功日记 1. 总结了扎克伯格提高效率的方法，并将其用于工作当中，每次只专注一件事件，大大提高了我的工作效率。 每日感想 珍惜和朋友相处的快乐时光，做一个快乐的人。 2017.02.10 Fri. 柳比歇夫时间管理个人日常记录表 每日计划 生活 学习 总结扎克伯格提高效率的内容； 英语单词5个； （完成）英语音标学习； （完成）每日总结与安排； 工作 （完成）完成移动端显示区域调整； 完成演播页优化方案； 时间-事件-时长详细记录 06:00-07:00 06:10-06:50（40分钟）起床、洗漱、做早饭； 07:00-08:00 06:50-07:30（40分钟）坐车上班； 07:30-07:40（10分钟）杂事准备； 08:00-09:00 07:40-08:25（45分钟）学习英语音标； 08:25-09:00（35分钟）整理与安排； 09:00-10:00 09:00-09:30（30分钟）吃早饭，上厕所； 09:30-09:55（25分钟）工作闲聊（情人节活动PPT）； 10:00-11:00 09:55-10:10（15分钟）写周报； 11:00-12:00 10:10-11:55（105分钟）修改移动端显示； 12:00-13:00 11:55-12:15（20分钟）休息20分； 12:15-12:30（15分钟）背单词； 12:30-13:00（30分钟）吃午饭； 13:00-14:00 13:00-14:15（75分钟）午休； 14:00-15:00 14:15-14:50（35分钟）调整演播页缩放空白； 15:00-16:00 14:50-16:00（70分钟）移动端bug调试； 16:00-17:00 16:00-17:00（60分钟）波波老师谈心（关于绩效和鼓励）； 17:00-18:00 18:00-19:00 17:00-20:10（190分钟）工作讨论，移动端bug参与调试； 19:00-20:00 20:00-21:00 20:10-20:35（25分钟）吃晚饭； 21:00-22:00 20:35-21:25（50分钟）坐车回家、买草莓给老婆吃； 22:00-23:00 21:25-22:20（55分钟）洗草莓、刷锅锅、洗澡澡； 22:20-22:35（15分钟）时间汇总； 时间使用汇总与分析 汇总 生活：5小时25分钟；学习：1小时；工作：8小时20分钟；安排与整理：50分钟；通勤：40分钟；杂事：10分钟； 分析 今天虽然在工作上花了很多时间，但是工作的效率并不高，一直都是瓜瓜在忙活，其实我的产出相当低。一方面是自己的能力还需要提升，一方面是自己的效率问题。以后多多改正。 成功日记 1. 碎片时间拿出小本本开始记单词，棒棒的。以后继续充分利用碎片时间。 2. 慢慢的习惯不在避重就轻，先把重要的事情完成，不能只挑简单的事情去做。 每日感想 今天波波老师跟我谈了一下年终绩效的事情，一方面是为了打消我的疑问，一方面也是鼓励我多努力，把握好现在的工作机会。 正如波波老师说的，机会是别人给的，但是要看自己会不会把握。把握住别人给你的机会，这样的机会才是机会，才能更好地实现自己的人生价值。 作为有着多年社会经验的前辈，他给我的建议也是很中肯的，而且也能够很直观地看出我的缺点——最大缺点之不够自信。 重中之重，我要重视起自己，提高自己的自信心。一方面，我从成功日记着手；另一方面，要多多和其他人交流，不要胆怯。 当然，该有的基本功不能丢，英语不能丢，技术基础不能丢。没事定期翻译技术文章，既能够提高自己的英语水平，也能够提升自己的技术能力。多阅读技术类文献。 2017.02.09 Thur. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）中午吃完饭去修手机； （完成）买个手机壳和手机贴膜（新旧手机都买）； 学习 总结扎克伯格提高效率的内容； 英语单词5个； （完成）英语口语学习； 每日总结与安排； （完成）《编写可读代码的艺术》第12章 把想法变成代码； （完成）《编写可读代码的艺术》第13章 少写代码； 工作 （完成）优化演播页移动端重构方案； 时间-事件-时长详细记录 06:00-07:00 07:00-08:00 07:40-08:20（40分钟）起床洗漱（冲突时间影响效率）； 08:00-09:00 08:20-08:55（35分钟）做饭吃饭（煮面条）； 09:00-10:00 08:55-09:35（40分钟）骑车上班； 09:35-10:05（30分钟）开工前准备； 10:00-11:00 10:05-10:25（20分钟）昨日总结； 10:25-10:35（10分钟）今日安排； 11:00-12:00 10:35-11:25（50分钟）整hexo-admin，差点整成傻逼（界面丑、还差点删了自己的重要文件）； 11:25-12:15（50分钟）学习《编写可读代码的艺术》； 12:00-13:00 12:15-12:45（30分钟）吃午饭； 13:00-14:00 12:45-14:00（75分钟）外出修手机； 14:00-15:00 14:00-14:15（15分钟）学习《编写可读代码的艺术》第13章； 14:15-14:45（30分钟）睡午觉； 15:00-16:00 14:45-16:20（95分钟）优化移动端演播页方案； 16:00-17:00 16:20-16:55（35分钟）优化移动端演播页方案； 17:00-18:00 16:55-17:15（20分钟）购买了手机壳、手机膜； 17:15-17:55（40分钟）优化演播页重构、讨论情人节活动； 18:00-19:00 17:55-18:50（55分钟）打乒乓球； 19:00-20:00 18:50-19:35（45分钟）骑车回家、超市买早餐； 20:00-21:00 19:35-20:35（60分钟）吃饭刷碗； 20:35-21:00（25分钟）洗澡澡； 21:00-22:00 21:00-21:30（30分钟）洗内衣、晾衣服、叠衣服； 21:30-22:00（30分钟）读英语； 22:00-23:00 时间使用汇总与分析 汇总 生活：5小时45分钟；学习：2小时25分钟；工作：2小时50分钟；安排与整理：30分钟；运动：55分钟；通勤：1小时25分钟；杂事：30分钟； 总结分析 早起能够让一天的时间多出近乎两小时，今天的整体时间只有14小时20分钟。从整体上来看，学习和工作上花费的时间整体上减少了很多。但是晚上还是抽出来时间完成了英语口语的学习。以后要继续努力利用碎片时间。 今天在运动上也投入了一定的时间，会相应地减少其他事项上的时间。但是身体是一切的前提，对身体健康的投入都是值得的。 成功日记 1. 抽出晚上短短半小时的时间，完成本来完成不了的口语学习，值得鼓励。可见时间是能抽出来的，哪怕很短都能完成想要做的事情。 2. 开始运动啦，虽然运动量不够，但是继续保持，保持健康。 2017.02.08 Wed. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）给老婆买情人节礼物（化妆刷）； 学习 背诵5个单词； （完成）英语口语学习； 每日总结； 工作 （完成）整理出转化率优化的方案； （完成）移动端演播页重构方案； 时间-事件-时长详细记录 06:00-07:00 06:20-06:50（30分钟）起床洗漱； 07:00-08:00 06:50-07:30（40分钟）坐车； 07:30-07:45（15分钟）开机准备； 08:00-09:00 07:45-08:25（40分钟）英语学习； 08:25-08:45（20分钟）昨日总结与今日安排； 09:00-10:00 08:45-09:20（35分钟）吃早饭、上厕所； 09:20-09:35（15分钟）给媳妇买化妆刷； 10:00-11:00 09:35-10:55（80分钟）总结转化率优化方案； 11:00-12:00 10:55-11:40（45分钟）小组讨论（推广、转化率）； 11:40-12:15（35分钟）思考如何重构移动端； 12:00-13:00 12:15-12:45（30分钟）午饭； 13:00-14:00 12:45-14:10（85分钟）午休； 14:00-15:00 14:10-15:35（85分钟）设计重构移动端演播页； 15:00-16:00 15:35-15:45（10分钟）下午茶时间； 16:00-17:00 15:45-16:50（65分钟）设计重构移动端演播页； 17:00-18:00 16:50-17:25（35分钟）参与情人节活动讨论； 17:25-17:50（25分钟）工作闲拉呱； 18:00-19:00 17:50-18:25（35分钟）假装自己在跑步； 18:25-18:35（10分钟）收拾东西出去吃饭； 19:00-20:00 18:35-21:00（145分钟）望京吃饭逛街； 20:00-21:00 21:00-22:00 21:00-21:40（40分钟）坐公车回家； 22:00-23:00 21:40-22:50（70分钟）磨磨唧唧看视频、洗漱睡觉； 时间使用汇总与分析 汇总 生活：6小时50分钟；学习：40分钟；工作：5小时45分钟；安排与整理：20分钟；通勤：1小时20分钟；娱乐：10分钟；杂事：1小时25分钟； 分析 今天在学习上花费的时间减少了很多。主要都是用在了生活上，但是在工作上并没有马虎。好好工作的结果就是还能抽出一定的时间来锻炼，虽然去锻炼但基本没锻炼成。以后继续协调时间。 当然有一点要批评自己的事，每天只背诵5个单词的小任务却完成率一直那么低，一定要警惕，不因事小而不为，要做到认真对待，合理利用碎片时间，分分钟搞定的事。 总结与成功日记 总结 老婆从过完年2月1号回来一直工作到今天，连续上了八天的班，想去吃鱼火锅当然要奉陪了，再说我也想吃。偶尔小逛一下也是可以的。爱你，老婆。 成功日记 1. 今天给老婆买了一个实用的情人节礼物（化妆刷），老婆一定会喜欢的。 2. 对待工作更加有激情，以后要继续努力，安排好工作，把握优先级。 2017.02.07 Tue. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）购买洗浴用品； 学习 背诵5个单词； （完成）英语口语学习； 每日总结； （完成）学习《编写可读代码的艺术》11章 一次只做一件事 工作 制作完成PPT《扎克伯格教你提高效率》； （完成）总结如何优化转化率； （完成）跑通开发环境； 时间-事件-时长详细记录 06:00-07:00 06:20-06:55（35分钟）挣扎着起床、洗漱刷牙； 07:00-08:00 06:55-07:35（40分钟）坐车上班； 07:35-07:45（10分钟）信用卡还款、开机准备； 07:45-07:50（5分钟）阅读媳妇推文《程序猿之爱的早餐》； 08:00-09:00 07:50-08:25（35分钟）英语音标学习； 08:25-08:50（25分钟）昨日总结与今日安排； 09:00-10:00 08:50-09:10（20分钟）吃早饭； 09:10-09:25（15分钟）看扎克伯格提高效率的方法； 09:25-09:50（25分钟）看《小王子》； 10:00-11:00 09:50-11:00（70分钟）总结《如何优化网页转化率？（中篇）》； 11:00-12:00 11:00-11:25（25分钟）洗浴用品加入购物车； 11:25-11:40（15分钟）洗浴用品加入京东购物车； 11:40-12:05（25分钟）总结《如何优化网页转化率？（下篇）》； 12:00-13:00 12:05-12:20（15分钟）看《小王子》； 12:20-12:40（20分钟）吃午饭； 12:40-12:50（10分钟）上厕所、下单洗浴用品； 13:00-14:00 12:50-14:00（70分钟）睡午觉； 14:00-15:00 14:00-15:25（85分钟）跑通运行环境（尝试首页改版）； 15:00-16:00 15:25-16:00（35分钟）着手首页改版； 16:00-17:00 16:00-16:15（15分钟）如厕…（尴尬）； 16:15-16:55（40分钟）首页改版； 17:00-18:00 16:55-17:10（15分钟）看《小王子》，读完啦； 18:00-19:00 17:10-19:10（120分钟）思考如何提高转化率； 19:00-20:00 19:10-19:40（30分钟）转化率问题和推广问题讨论； 19:40-20:00（20分钟）吃晚饭； 20:00-21:00 20:00-20:40（40分钟）坐车回家； 20:40-21:10（30分钟）娱乐、看剧； 21:00-22:00 21:10-21:30（20分钟）洗澡； 21:30-22:10（40分钟）看书《编写可读代码的艺术》； 22:00-23:00 时间使用汇总与分析 汇总 生活：4小时10分钟；学习：2小时25分钟；工作：6小时45分钟；整理与安排：25分钟；通勤：1小时20分钟；娱乐：35分钟；杂事：10分钟； 分析 提高自己的约束力，将生活时间和娱乐时间压缩在五小时以内能够更多地给自己留出学习的时间。因为身体状况的原因，虽然工作的时间较长，但是工作的效率不高，要提高自己的效率，每次只专注的做一件事情。 总结与成功日记 总结 身体是革命的本钱，不能马虎，今天开始锻炼身体，保持良好的体格。 成功日记 1. 从自己的角度出发，对首页进行了简单的改版，也由此想到自己要多利用空闲时间模仿页面，提高自己的前端技术水平。 2. 虽然回到家就开始看视频了，但是能够惹住视频的诱惑及时停止也是棒棒的，继续加油，提高自己的自制力。 2017.02.06 Mon. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）购买一个Monitir Meno Board（看到袁伟在用）；→没必要买； 学习 背诵5个单词； （完成）英语口语学习； （完成）《编写可读代码的艺术》—第十章 抽取不相关的子问题； 工作 制作一个PPT； （完成）思考如何提高页面转换率；→部分内容未总结； 时间-事件-时长详细记录 06:00-07:00 06:20-06:50（30分钟）起床、洗漱； 07:00-08:00 06:50-07:35（45分钟）坐车上班； 07:35-07:55（20分钟）如厕； 08:00-09:00 07:55-08:40（45分钟）学习英语； 08:40-09:00（20分钟）昨日总结与分析； 09:00-10:00 09:00-09:30（30分钟）下楼吃早饭； 09:30-09:35（5分钟）每日安排； 10:00-11:00 09:35-10:45（70分钟）思考制作PPT的主题（定为音标学习）； 11:00-12:00 10:45-11:40（55分钟）学习《如何优化网页转化率？（上篇）》； 11:40-11:45（5分钟）厕所…； 11:45-12:10（25分钟）学习《如何优化网页转化率？（中篇）》； 12:00-13:00 12:10-12:40（30分钟）吃午饭； 12:40-12:55（15分钟）搜索“便利贴板”； 13:00-14:00 12:55-13:50（55分钟）睡午觉； 13:50-14:00（10分钟）手机看笑话； 14:00-15:00 14:00-15:05（65分钟）看《小王子》； 15:00-16:00 15:05-15:30（25分钟）继续看《小王子》； 15:30-16:05（35分钟）学习《如何优化网页转化率？（下篇）》； 16:00-17:00 16:05-16:50（45分钟）总结《如何优化网页转化率？》； 16:50-17:15（25分钟）学习《如何设计更具行为互换的按钮》； 17:00-18:00 17:15-17:40（25分钟）总结完《如何优化网页转化率（上篇）》 18:00-19:00 17:40-18:30（50分钟）制作扎克伯格PPT（中间陪父母聊微信）； 18:30-18:40（10分钟）收拾书包回家； 19:00-20:00 18:40-19:25（45分钟）坐车回家； 19:25-20:10（45分钟）吃饭刷碗（老婆做的很好吃！）； 20:00-21:00 20:10-20:20（10分钟）洗澡前休闲； 20:20-20:35（15分钟）洗澡澡； 20:35-20:40（5分钟）洗衣服、烧水 20:40-21:00（20分钟）摆弄花草； 21:00-22:00 21:00-22:15（75分钟）学习《编写可读代码的艺术》； 22:00-23:00 时间使用汇总与分析 汇总 生活：4小时15分钟；学习：3小时30分钟；工作：5小时30分钟；整理与安排：25分钟；娱乐：10分钟；通勤：1小时30分钟；杂事：35分钟； 分析 由生活时间能够明显看出，生活时间的压缩能够有效的提高学习时间。今天晚上压缩出了一小时的时间进行了学习，虽然阿学习的内容不是很多，但是要相信日积月累的效果。 总结与成功日记 总结 今天脖子依然感觉不舒服，需要自己好好调整，多锻炼。尽管如此，我还是坚持了工作内容的学习与了解，并且在生活上进行了一定的时间压缩，在晚上回家后也抽出了一个小时的时间进行了学习，这是值得肯定的。不过没能在睡前写好每日总结，以后继续调整。 成功日记 1. 晚上抽出了一个小时的时间进行学习，以后多多保持，努力学习； 2. 初步实施了康奈尔笔记法，应用于如何优化转化率和编写可读代码的艺术学习上，逐渐摸索，一定会提高自己的学习效率的； 2017.02.05 Sun. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）打扫房间； （完成）做一顿美味的晚餐； （完成）维修手机； 学习 （完成）背诵5个单词； 英语口语学习； 《编写可读代码的艺术》—第十章 抽取不相关的子问题； （完成）提炼每日好习惯； （完成）完善梦想执行计划； （完成）学习吉他1.5小时； （完成）解决博客站内搜索问题； 工作 时间-事件-时长详细记录 06:00-07:00 05:50-06:15（25分钟）起床、洗漱； 06:15-06:40（25分钟）送老婆上班； 07:00-08:00 06:40-09:00（140分钟）看视频《漂亮的李慧珍》； 08:00-09:00 09:00-10:00 09:00-09:30（30分钟）做早餐、吃早餐； 09:30-10:00（30分钟）昨日时间管理分析与总结； 10:00-11:00 10:00-10:05（5分钟）提炼每日好习惯； 10:05-10:15（10分钟）摆弄旧手机； 10:15-11:25（70分钟）完善梦想执行清单； 11:00-12:00 11:25-12:10（45分钟）打扫房间； 12:00-13:00 12:10-12:50（40分钟）看剧； 13:00-14:00 12:50-13:30（40分钟）做午饭、吃午饭、看剧； 14:00-15:00 13:30-15:10（100分钟）学习吉他视频； 15:00-16:00 15:10-17:20（130分钟）出门修手机，可惜没修好； 16:00-17:00 17:00-18:00 18:00-19:00 17:20-18:50（90分钟）做晚饭、吃晚饭； 19:00-20:00 18:50-19:30（40分钟）开始解决博客站内搜索问题； 19:30-20:00（30分钟）收不到注册邮件、清理邮件； 20:00-21:00 20:00-20:20（20分钟）洗澡澡； 20:20-21:10（50分钟）解决博客站内搜索问题； 21:00-22:00 21:10-21:20（10分钟）背诵五个单词； 21:20-21:30（10分钟）看小说； 22:00-23:00 时间使用汇总与分析 汇总 生活：6小时45分钟；学习：4小时35分钟；安排与整理：30分钟；娱乐：3小时10分钟；杂事：40分钟； 分析 周末休息时间，没有工作时间，增加了相应的娱乐时间。虽然在娱乐上花了3个多小时的时间，但是也即使遏制住自己，学习了4个多小时的时间，相对于以往的周末有了一定的改善。并且合理利用了周末时间进行了生活上的卫生打扫等。 总结与成功日记 总结 懒惰小人总是先占据优势。一大早起来啥事没看就看了两个多小时的视频，然后才在良心的谴责下，去做一些有意义的事。以后需要提前做好任务安排才能进行适当放松，或者穿插着进行，但要先劳后逸。 成功日记 1. 迈出了学吉他的第一步，跟随入门视频学习了1个多小时。就这样继续努力，一定会学得一门才艺的，多年的痛处就会被弥补了。 2. 梦想执行计划基本完善完毕，以后按照计划加油努力。 3. 解决了个人博客的站内搜索问题，有效地提高了自己使用的便利性，以后也要想到做到，继续加油。 4. 打扫房间，替老婆承担家务，我是最好的老公！ 2017.02.04 Sat. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）换洗衣服机洗和手洗； 学习 （完成）30分钟英语音标学习； （完成）《编写可读代码的艺术》——第九章 变量与可读性； （完成）完善年度梦想清单和梦想执行计划； （完成）制作《康奈尔笔记法》PPT； （完成）了解学习BrowserSync； 工作 （完成）问卷的调整； 尝试个人中心页改版； 时间-事件-时长详细记录 06:00-07:00 06:20-06:50（30分钟）起床、洗漱； 07:00-08:00 06:50-07:30（40分钟）坐车上班（公交看小说、走路听英语）； 07:30-07:35（5分钟）收拾工位、开机； 07:35-07:50（15分钟）上厕所； 08:00-09:00 07:50-08:25（35分钟）学习英语音标； 08:25-08:50（25分钟）对昨天的时间管理进行汇总与分析，并总结记录成功日记； 08:50-09:00（10分钟）进行今日计划安排； 09:00-10:00 09:00-09:25（25分钟）吃早餐； 09:25-09:55（30分钟）学习《编写可读代码的艺术》； 09:55-10:00（5分钟）闭目养神五分钟； 10:00-11:00 10:00-10:15（15分钟）小组快速碰头，过一下现阶段任务； 10:15-10:25（10分钟）进入状态（可惜没进入，去上个厕所…）； 10:25-10:45（20分钟）如厕、看了篇简七文章、了解到“剑桥读书法”和“康奈尔笔记法”； 11:00-12:00 10:45-11:35（50分钟）了解康奈尔笔记法； 11:35-12:05（30分钟）制作《3分钟教你使用“康奈尔”》PPT； 12:00-13:00 12:05-12:30（25分钟）问卷初步调整； 12:30-13:00（30分钟）午餐； 13:00-14:00 13:00-13:10（10分钟）看笑话、搞定hexo s无效问题； 13:10-13:30（20分钟）hexo浏览器同步刷新，使用hexo-browsersync，引申Browsersync； 14:00-15:00 13:30-14:40（70分钟）睡午觉； 14:40-15:10（30分钟）问卷调整初步完成； 15:00-16:00 15:10-15:30（20分钟）问卷校验完成； 15:30-15:40（10分钟）问卷汇报完成； 16:00-17:00 15:40-16:55（75分钟）学习Browsersnyc； 17:00-18:00 16:55-17:10（15分钟）溜达、活动活动筋骨； 17:10-17:45（35分钟）了解了解净水器、纯水器； 18:00-19:00 17:45-18:30（45分钟）懵比状态（聊天、等待）； 19:00-20:00 18:30-19:50（80分钟）呷哺吃饭； 20:00-21:00 19:50-20:30（40分钟）坐车回家； 20:30-21:00（30分钟）洗澡； 21:00-22:00 21:00-21:15（15分钟）准备水果点心； 21:15-21:40（25分钟）完善年度梦想清单和梦想执行计划； 21:40-21:55（15分钟）洗内衣、刷牙； 22:00-23:00 时间使用汇总与分析 汇总 生活：6小时25分钟；学习：3小时55分钟；工作：2小时10分钟；安排与整理：35分钟；通勤：1小时20分钟；杂事：1小时10分钟； 分析 今天白天共计有15小时35分钟的时间。相较于昨天生活上的话费少了近一小时，也能够直观地看出回家做饭确实会多占用一部分时间，但是去除这一时间，我在生活上没能够做到压缩这一点，以后还有更好地利用生活时间。 然后很明显的可以看出，学习实践增多了，但是工作时间相应的减少了很多，结合可以得出总时间基本没有变化，也就是说虽然学习了更多的东西，但是利用了工作的时间进行学习，整体的有效时间并没有增加。 此外，因为今天脖子不舒服，在杂事上花费的时间增多了。以后要避免把时间花费在琐碎的杂事上面，积少成多，合理利用杂事时间能够更好地提高成果。 最后，新增了安排与整理这项时间，我想通过这一项时间能够看出合理的安排与整理是否能够提高工作和学习的效率。 总结与成功日记 总结 上班的第二天就身体不舒服，这是一个警告。一方面是因为上班前两天追剧导致的，一方面也因为自己没有注重锻炼。所以以后要更加注重身体的锻炼，健康才是硬道理。一切把健康摆在首位。 成功日记 1. 了解到了比较好的笔记方法——康奈尔笔记法，及时的学习了解，使用声享制作了一个PPT进行传播，并且付诸使用。通过借鉴好的方法论，我一定能够更快的变得优秀的。 2. 无意中解决了博客编写手动刷新的麻烦事，实现了实时刷新，并了解到了browsersync，即使进行了新知识的学习，给自己点个赞。 3. 完善了梦想清单和梦想执行计划，努力按照这个目标和计划去实施，最后一定会成功的。 2017.02.03 Fri. 柳比歇夫时间管理个人日常记录表 每日计划 生活 （完成）买淋蓬头和扳手（活口扳手）； （完成）充值公交卡； （完成）给爸妈打电话； 学习 （完成）英语30分钟早读； 《编写可读代码的艺术》——第九章 变量与可读性； （完成）思考自己的五年计划，五年之内想要变成什么样，书写五年计划； 工作 （完成）整理问卷结果，返还话费； （完成）反馈功能去除问题（待商议）； 时间—时长—事件详细记录 06:00-07:00 06:20-06:50（30分钟）起床洗漱，准备出门； 07:00-08:00 06:50-07:30（40分钟）坐车到公司； 07:30-08:00（30分钟）收拾桌子，准备进入状态； 08:00-09:00 08:00-08:30（30分钟）英语音标学习； 08:30-09:10（40分钟）吃早饭； 09:00-10:00 09:10-09:40（30分钟）制定每日计划； 09:40-10:00（20分钟）整理问卷； 10:00-11:00 10:00-11:00（60分钟）和瓜瓜讨论问卷并整理； 11:00-12:00 10:00-11:00（60分钟）和瓜瓜讨论问卷并整理； 12:00-13:00 12:00-12:30（30分钟）吃午饭； 12:30-13:10（40分钟）摆弄新手机、新耳机和旧手机； 13:00-14:00 13:10-13:30（20分钟）出去买淋雨水管和活口扳手； 13:30-14:30（60分钟）午休； 14:00-15:00 14:30-14:50（20分钟）继续上午的问卷讨论； 15:00-16:00 14:50-15:35（45分钟）思考如何对问卷进行修改； 16:00-17:00 15:35-17:05（90分钟）讨论问卷修改与总结 17:00-18:00 17:05-17:35（30分钟）查邮件、查工资明细； 17:35-18:05（30分钟）teambition忘记密码，删科大邮箱的邮件； 18:00-19:00 18:05-18:25（20分钟）teambition补充问卷目的和脑图地址； 18:25-18:50（25分钟）和同事闲拉呱； 19:00-20:00 18:50-19:20（30分钟）从公司回家（走路上给爸妈打了电话）； 19:20-21:40（140分钟）吃饭、刷碗、洗澡澡； 20:00-21:00 21:00-22:00 22:00-23:00 21:40-22:50（70分钟）畅想《我的五年计划》和2017年度计划； 22:50-23:05（15分钟）帮助媳妇弄揽投资 时间使用汇总与分析 汇总 生活：7小时15分钟；学习：30分钟；工作：5小时15分钟；通勤：1小时10分钟；杂事：2小时35分钟； 分析 以前都觉得自己每天也有很好地学习，但是通过详细地记录了自己的时间去向之后，更直观地看出了自己的问题所在。去除睡眠时间，白天的时间（即可利用时间）约在17个小时左右，而我用来学习的时间却只有半个小时，相比较而言就太少了。相应的用于生活的时间占据了可利用时间的一大部分，也是很明显的问题。所以接下来我要适当调整在生活上所花费的时间，压缩时间用于学习或者其他事情。其次，要减少杂事的时间，因为杂事多为不必要的。 总结与成功日记 总结 新年上班的第一天，虽然学习计划中有一项没有完成，但是也还算不错，没有太过懈怠。继续加油，努力调整好自己。 成功日记 1. 爸妈年纪越来越大了，要多关心父母，虽然今天又拖拖拉拉地才给爸妈打电话，但是没有忘记，值得鼓励。以后多关心爸妈。 2. 买了淋蓬头和扳手，并且修好了。跟着计划走，不拖拉，继续加油。以后做一个今日事今日毕的乖宝宝。 3. 初步畅想了自己的五年梦，继续思考自己想成为什么样的人，完善自己的年度梦想清单和梦想执行计划，做一个更好的自己。 4. 从头再认真学习48个音标，发现了第一遍为了速度而没有学到和记住的知识，更加用心的去体会学习，以后也要用心对待学习。 5. 列好工作计划，有目的进行工作安排，有效地提高了效率，减少了工作的拖延。 2017.01.24-2017.02.02. Tue. - Thur.春节七天假，外加假前最后一天班，给自己一个愉快的假期，期间思考自己的计划，完善它，假期结束后加油努力！ 2017.01.23 Mon. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 3. 每天运动一点点，哪怕脖子扭扭，屁股扭扭 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 6. 有机会就去解锁一项新技能 —— 7. 要学会反思与总结 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 《编写可读代码的艺术》第8章–拆分超长的表达式 完成 3. 着手书写《记我与媳妇谈共勉》 未进行 反思与总结对自己计划进行了重新梳理，但还没有梳理完成，梳理完成后，要严格按照标准去执行 2017.01.21 - 2017.01.22 Sat-Sun.给自己放个假，养养伤，买买年货。以后不能放纵自己。 2017.01.20 Fri. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 3. 每天运动一点点，哪怕脖子扭扭，屁股扭扭 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) 未完成 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 6. 有机会就去解锁一项新技能 —— 7. 要学会反思与总结 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 《编写可读代码的艺术》第8章–拆分超长的表达式 未完成 2. 完成问卷整体设计，包括问题和选项 完成 3. 完成《记我与媳妇谈共勉》 未完成 反思与总结今天摔了一跤，该做的任务没完成。以后不管事情多紧急，一定要注意安全。导致每日任务未完成，之后两天的任务也收到了影响 2017.01.19 Thur. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 3. 每天运动一点点，哪怕脖子扭扭，屁股扭扭 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) 未完成 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 6. 有机会就去解锁一项新技能 —— 7. 要学会反思与总结 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 《编写可读代码的艺术》第8章–拆分超长的表达式 未完成 2. 粗略的现有用户问卷问题结构 完成 3. 写一篇关于昨天的总结 未完成 反思与总结初步完成了问卷的问题结构，并进行了一定的问题构思。但是没能完成读书学习任务，也没写总结。今天就当给老婆过生日庆祝，自己放松一下吧。 PS: 辛苦一晚上偷土栽种的草莓，期待明年能够果实累累~！！！ 2017.01.18 Wed. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) 未完成 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 3. 每天运动一点点，哪怕脖子扭扭，屁股扭扭 未完成 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 6. 有机会就去解锁一项新技能 —— 7. 要学会反思与总结 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 《编写可读代码的艺术》第七章–把控制流变得易读 完成 2. 调研导入PPT 暂停进行 3. 个人中心页改版尝试 暂停进行 4. 给老婆定个可爱兔子蛋糕 完成 反思与总结回家之后和媳妇谈了次心，所以没能完成每日习惯中的两项。谈心的内容另记。 2017.01.17 Tue. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 3. 每天运动一点点，哪怕脖子扭扭，屁股扭扭 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 6. 有机会就去解锁一项新技能 —— 7. 要学会反思与总结 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 选购一本吉他入门书 完成 2. 《编写可读代码的艺术》第七章–把控制流变得易读 未进行 3. 调研导入PPT 进行中 4. 个人中心页改版尝试 未进行 5. 后台统计（PPT增长数、10页ppt增长数、 用户增长数） 完成 反思与总结临时加入了后台统计功能的设计，占用了调研或者改版中心页的时间，导致这两项任务没能完成。 此外没能抽时间把《编写可读代码的艺术》指定章节认真读完。需要保证每天的读书量，加强个人知识技能的学习。 2017.01.16 Mon. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 3. 每天运动一点点，哪怕脖子扭扭，屁股扭扭 未完成 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 6. 有机会就去解锁一项新技能 —— 7. 要学会反思与总结 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 选购一本吉他入门书 未完成 2. 《编写可读代码的艺术》5-6章 完成 反思与总结利用上班时间完成了《编写可读代码的艺术》，以后需要更好地抽出自己的时间进行知识的学习。并且忘记了需要加强锻炼意识的习惯，晚上没能进行简单的活动，这一点以后要谨记，身体是革命的本钱，要加强身体锻炼，保证身体健康。 2017.01.15 Sun. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 开心玩耍，陪老婆过个愉快的周末 完成 反思与总结 —— 什刹海冰场，陪着媳妇开开心心地玩了半天，同时也完成了每天的英语读书任务。继续坚持，养成良好的习惯 —— 2017.01.14 Sat. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 《编写可读代码的艺术》3-4章 —— 反思与总结 —— 利用早上空闲时间完成了《编写可读代码的艺术》，但是下午的时间没有充分利用（看了一下午海贼王…） —— 2017.01.13 Fri. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) 未完成 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) 未完成 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 《编写可读代码的艺术》前三章 未完成(66%) 反思与总结 —— 部门年会导致晚上回家过晚，没有完成日常的清洗和读书任务 —— 2017.01.12 Thur. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) 未完成 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) 未完成 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 进行个人资料的整理，电脑手机等相关文件的整理——(软件清理) 完成 2. 复习飞扬用户研究相关PPT，补充问卷问题 完成 3. 《编写可读代码的艺术》前三章 未完成 反思与总结 —— 飞扬小年会特殊原因回家较晚，没能完成好习惯中的勤洗衣物和英语学习。书本的学习时间和效率没有安排好，以后继续加油 —— 2017.01.11 Wed. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 5. 专注地进行学习，提高学习的效率 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 2. 专注地进行工作，提高工作的效率 —— 今日安排 —— 1. 进行个人资料的整理，电脑手机等相关文件的整理——(手机照片清理) 完成 2. 复习飞扬用户研究相关PPT，补充问卷问题 未进行 3. Hexo文档继续学习 完成 4. 为自己制定2017年的学习计划 完成 反思与总结 —— 制定了2017年的学习成长计划，在接下来的时间里要按照目标努力。争取达成任务，并超出自己的预期。 —— 没能完成用户研究PPT的学习，明天要继续完成相关内容的研究与学习。 —— 2017.01.10 Tues. 习惯培养情况 完成状态 一. 良好的生活习惯 —— 1. 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 2. 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 二. 良好的学习习惯 —— 1. 充分利用空档时间学习，哪怕只有五分钟 —— 2. 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 3. 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 4. 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 三. 良好的工作习惯 —— 1. 提前做好工作计划，有计划、有效率地工作 —— 今日安排 —— 1. 进行个人资料的整理，电脑手机等相关文件的整理——(手机照片清理) 未进行 2. 继续对身边的朋友进行推广，了解用户 完成 3. 总结需要咨询的问题，并咨询相关问题，归纳用户反馈 完成 4. 学习Hexo中tags和catagory的使用 完成 5. 首页热门邮件通知内容 完成 6. 复习飞扬用户研究相关PPT，初步撰写问卷问题 未进行 反思与总结 —— 没有抽空进行个人资料的逐步整理 —— 没能完成用户研究PPT的学习，需要提高白天的工作效率，分清工作的主次 —— 2017.01.09 Mon. 习惯培养情况 完成状态 良好的生活习惯 —— 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 良好的学习习惯 —— 充分利用空档时间学习，哪怕只有五分钟 —— 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 学习奇舞周刊中的内容，利用接下来一周的时间学习最新发布的周刊，扩大知识面 —— 良好的工作习惯 —— 提前做好工作计划，有计划、有效率地工作 —— 今日安排 —— 1. 进行个人资料的整理，电脑手机等相关文件的整理——(手机照片清理) 进行中 2. 爆米兔微信认证上线 完成 3. 帮助文档查看 完成 4. 如何推广？ 进行中 反思与总结 —— 今天学习了Javascript中的delete操作符。认识并学习了别人对于只是的学习与态度。对于知识的学习要学会追根究底，要做到知其然知其所以然。这样才能够更好地将知识应用到实际当中 —— 对于声享产品的推广，今天对几个小伙伴进行了人肉推广，希望明天能够得到一定的反馈。 —— 2017.01.08 Sun. 习惯培养情况 完成状态 良好的生活习惯 —— 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 良好的学习习惯 —— 充分利用空档时间学习，哪怕只有五分钟 —— 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 良好的工作习惯 —— 提前做好工作计划，有计划、有效率地工作 —— 今日安排 —— 1. 学习英语音标 完成 2. 进行个人资料的整理，电脑手机等相关文件的整理 未进行 反思与总结 —— 提高了对英语学习的兴趣，从最根本的音标学习，标准化自己的发音，让英语说出口，这样才能学以致用 —— 个人资料整理是个繁琐而小长期的事情，不能因为杂乱繁琐、不知如何下手就不去整理。要抽出时间一点一点进行整理。这样不仅能够减少杂乱无用的内容的存储，也能够提高自己查找内容的效率，提高自己的整理能力。 —— 2017.01.07 Sat. 习惯培养情况 完成状态 良好的生活习惯 —— 及时清洗换洗衣物(内衣裤1天一次、其他衣物两天一次) —— 买东西不要图便宜，要买需要的且质量好的，哪怕价格贵点 —— 良好的学习习惯 —— 充分利用空档时间学习，哪怕只有五分钟 —— 每天早晚各花半小时学习英语(从基础学起，提高英语水平) —— 想学的东西立马学，想做的事情立马做，不拖拉(治愈拖延症) —— 良好的工作习惯 —— 提前做好工作计划，有计划、有效率地工作 —— 今日安排 —— 1. 个人博客的初步搭建(逐渐养成写点东西的习惯) 完成 2. 进行个人资料的整理，电脑手机等相关文件的整理 未完成 反思与总结 —— 总是会觉得时间很匆忙，自己很匆忙，忙着要干这个，忙着要干那个，结果确实一直处于焦躁的状态，啥也没干成。从今天起，我要想要干什么就立马付诸行动，不能总想着等以后再学、等以后再干，这样子往往以后都是再也不干，啥也干不了。今天终于克服了一点点惰性，完成了这个简单而好看的个人博客的搭建。希望能够以此激励自己，以后能够时刻督促自己、鞭挞自己、激励自己能够向着更好的自己奋斗~！ ——","categories":[{"name":"GROWING_SPACE","slug":"GROWING-SPACE","permalink":"http://verymuch.com/categories/GROWING-SPACE/"}],"tags":[{"name":"习惯","slug":"习惯","permalink":"http://verymuch.com/tags/习惯/"},{"name":"每日","slug":"每日","permalink":"http://verymuch.com/tags/每日/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-01-07T00:40:48.000Z","updated":"2017-01-10T11:04:50.000Z","comments":true,"path":"2017/01/07/hello-world/","link":"","permalink":"http://verymuch.com/2017/01/07/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}